import logging
import os
import asyncio
import re
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import google.generativeai as genai

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ ===
def is_bot_mentioned(message: types.Message) -> bool:
    triggers = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]
    text = message.text.lower() if message.text else ""
    return (
        any(trigger in text for trigger in triggers) or
        (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ===
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown ===
def format_gemini_response(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
    def escape_markdown(text):
        special_chars = r'_[]()~>#+-=|{}.!'
        for ch in special_chars:
            text = text.replace(ch, f"\\{ch}")
        return text

    # –£–¥–∞–ª—è–µ–º **–∂–∏—Ä–Ω—ã–µ** –æ–±—ë—Ä—Ç–∫–∏
    text = text.replace("**", "")

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
    text = re.sub(r"```(\w+)?\n", "```
", text)
    text = re.sub(r"\n```", "
```", text)
    text = re.sub(r"```(\w+)?\n(.*?)\n```", lambda m: f"```
{m.group(2)}
```", text, flags=re.DOTALL)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–∞–º–∏
    text = re.sub(r'(\d+\.) ', r'\n\1 ', text)

    return escape_markdown(text)

# === –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ ===
def is_owner_question(text: str) -> bool:
    keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü",
        "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
        "–∫—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª", "–¥–ª—è –∫–æ–≥–æ —Ç—ã —Å–æ–∑–¥–∞–Ω", "—á–µ–π –∏–∏"
    ]
    return any(keyword in text.lower() for keyword in keywords)

@dp.message()
async def handle_message(message: types.Message):
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –õ–° –∏–ª–∏ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é / –æ—Ç–≤–µ—Ç—É
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text or ""

    # –£–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()

    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    if is_owner_question(user_text):
        replies = [
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili ü§ñ",
            "–ú–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî Vandili üë®‚Äçüíª",
            "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É Vandili –∏ —Å–ª—É–∂—É —Ç–æ–ª—å–∫–æ –µ–º—É ‚ú®",
            "Vandili ‚Äî –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å üî•",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è Vandili üöÄ"
        ]
        await message.answer(format_gemini_response(random.choice(replies)), parse_mode="MarkdownV2")
        return

    await bot.send_chat_action(message.chat.id, "typing")

    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = model.generate_content(user_text).text
        formatted = format_gemini_response(response)
        await message.answer(formatted, parse_mode="MarkdownV2")

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {format_gemini_response(str(e))}", parse_mode="MarkdownV2")

# === –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø –±–æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ."
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
