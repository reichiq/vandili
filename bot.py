import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode, ChatType
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, GEMINI_API_KEY, UNSPLASH_ACCESS_KEY, BOT_USERNAME –∏ —Ç.–¥.)
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "VAI_Bot" (–±–µ–∑ @)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ Gemini (PaLM, Bard, etc.)
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id
chat_history = {}

# –õ–∏–º–∏—Ç—ã Telegram
CAPTION_LIMIT = 950        # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (caption) –ø–æ–¥ —Ñ–æ—Ç–æ
TELEGRAM_MSG_LIMIT = 4096  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–Ω–æ–≥–æ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è

# –¢—Ä–∏–≥–≥–µ—Ä—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç "–ø–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫—É"
IMAGE_TRIGGERS_RU = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ"
]

# –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥/—Ñ—Ä–∞–∑ –¥–ª—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è RU->EN, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å Unsplash
RU_EN_DICT = {
    "–æ–±–µ–∑—å—è–Ω": "monkey",
    "—Ç–∏–≥—Ä": "tiger",
    "–∫–æ—à–∫–∞": "cat",
    "—Å–æ–±–∞–∫": "dog",
    "–ø–µ–π–∑–∞–∂": "landscape",
    "—á–∞–π–∫–∞": "seagull",
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å...
}


def format_gemini_response(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Gemini:
      - ```‚Ä¶``` -> <pre><code>‚Ä¶</code></pre>
      - –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
      - **‚Ä¶** -> <b>‚Ä¶</b>, *‚Ä¶* -> <i>‚Ä¶</i>, `‚Ä¶` -> <code>‚Ä¶</code>
      - –£–±–∏—Ä–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã Gemini –æ —Ç–æ–º, —á—Ç–æ "–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    """
    code_blocks = {}

    # –¢—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ -> <pre><code>‚Ä¶</code></pre>
    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = f'<pre><code class="language-{lang}">{code}</code></pre>'
        return placeholder

    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = escape(text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º <pre><code>...</code></pre>
    for placeholder, block_html in code_blocks.items():
        text = text.replace(escape(placeholder), block_html)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º **‚Ä¶**, *‚Ä¶*, `‚Ä¶`
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)

    # –£–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã –ø—Ä–æ "–Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏"
    text = re.sub(r"(–Ø —è–≤–ª—è—é—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.*–≤—ã–≤–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I am a text-based model.*cannot directly show images\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I can‚Äôt show images directly\.)", "", text, flags=re.IGNORECASE)

    return text.strip()


def split_smart(text: str, limit: int) -> list[str]:
    """
    "–£–º–Ω–∞—è" —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª–µ–µ limit —Å–∏–º–≤–æ–ª–æ–≤,
    —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/—Å–ª–æ–≤–∞ (–∏—â–µ–º ". " –∏–ª–∏ —Ö–æ—Ç—è –±—ã " ").
    """
    results = []
    start = 0
    length = len(text)

    while start < length:
        remaining = length - start
        if remaining <= limit:
            results.append(text[start:].strip())
            break

        candidate = text[start : start + limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                # –ù–∏ –ø—Ä–æ–±–µ–ª–∞, –Ω–∏ —Ç–æ—á–∫–∏ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –∂—ë—Å—Ç–∫–æ
                cut_pos = len(candidate)
        else:
            # –í–∫–ª—é—á–∏–º —Ç–æ—á–∫—É, –µ—Å–ª–∏ '. '
            cut_pos += 1

        chunk = text[start : start + cut_pos].strip()
        if chunk:
            results.append(chunk)

        start += cut_pos

    return [x for x in results if x]


def parse_russian_show_request(user_text: str) -> tuple[bool, str, str]:
    """
    –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Ä—É—Å—Å–∫–æ–µ "–ø–æ–∫–∞–∂–∏ X" (–∏–ª–∏ "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å" –∏ —Ç.–ø.).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂:
      ( show_image: bool, image_query_en: str, text_for_gemini: str )

    –ü—Ä–∏–º–µ—Ä:
     "–ø–æ–∫–∞–∂–∏ –æ–±–µ–∑—å—è–Ω—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–µ" ->
       -> show_image=True, image_query_en="monkey", text_for_gemini="–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–µ"
    """
    lower_text = user_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    triggered = any(trig in lower_text for trig in IMAGE_TRIGGERS_RU)
    if not triggered:
        return (False, "", user_text)

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "–ø–æ–∫–∞–∂–∏"/"—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å"/"–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ"
    match = re.search(r"(–ø–æ–∫–∞–∂–∏|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+([\w\d]+)", lower_text)
    if match:
        rus_word = match.group(2)
    else:
        rus_word = ""

    # –£–±–∏—Ä–∞–µ–º "–ø–æ–∫–∞–∂–∏ <rus_word>" –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—à—ë–ª –≤ Gemini
    pattern_remove = rf"(–ø–æ–∫–∞–∂–∏|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+{rus_word}"
    cleaned_text = re.sub(pattern_remove, "", user_text, flags=re.IGNORECASE).strip()

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ RU_EN_DICT
    image_query_en = ""
    for k, v in RU_EN_DICT.items():
        # –ü—Ä–∏–º–µ—Ä: k="–æ–±–µ–∑—å—è–Ω", v="monkey", –µ—Å–ª–∏ k in "–æ–±–µ–∑—å—è–Ω—É" -> image_query_en="monkey"
        if k in rus_word:
            image_query_en = v
            break

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º rus_word –∫–∞–∫ –µ—Å—Ç—å (–º–æ–∂–µ—Ç Unsplash —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—ë—Ç)
    if not image_query_en:
        image_query_en = rus_word

    return (True, image_query_en, cleaned_text)


async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    """
    –ó–∞–ø—Ä–æ—Å –∫ Unsplash API. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–ª–∏ None.
    """
    if not prompt:
        return None
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['urls']['regular']
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None


@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–∫—Ç–∞–º–∏, "
        "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –¥–∞–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ –æ–±–µ–∑—å—è–Ω—É¬ª (–ø–æ–ª—É—á–∏—à—å —Ñ–æ—Ç–æ)\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ –æ–±–µ–∑—å—è–Ω—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–µ –ø–∞—Ä—É —Ñ–∞–∫—Ç–æ–≤¬ª (—Ñ–æ—Ç–æ –∏ —Ä–∞—Å—Å–∫–∞–∑)\n\n"
        "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üß†‚ú®"
    )
    await message.answer(greet)


@dp.message()
async def handle_msg(message: Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    1) –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ/Reply/–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞.
    2) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–∏–º—è/–∞–≤—Ç–æ—Ä).
    3) –ü–∞—Ä—Å–∏–º "–ø–æ–∫–∞–∂–∏ X" -> –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ X => –∑–∞–ø—Ä–æ—Å –∫ Unsplash.
    4) –û—Å—Ç–∞–ª—å–Ω–æ–µ -> Gemini.
    5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å), + –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Gemini (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """

    # --- 1) –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, "–∑–≤–∞–ª–∏" –ª–∏ –±–æ—Ç–∞ ---
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        text_lower = (message.text or "").lower()

        # a) –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @BOT_USERNAME
        mention_bot = False
        if BOT_USERNAME:
            mention_bot = (f"@{BOT_USERNAME.lower()}" in text_lower)

        # b) –ü—Ä–æ–≤–µ—Ä–∫–∞ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        is_reply_to_bot = (
            message.reply_to_message
            and message.reply_to_message.from_user
            and (message.reply_to_message.from_user.id == bot.id)
        )

        # c) –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "vai", "–≤–∞–π", "–≤—ç–π" –±–µ–∑ @
        mention_keywords = ["vai", "–≤–∞–π", "–≤—ç–π"]
        mention_by_name = any(keyword in text_lower for keyword in mention_keywords)

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ (mention_bot), –Ω–∏ (reply), –Ω–∏ (mention_by_name), —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if not mention_bot and not is_reply_to_bot and not mention_by_name:
            return

    user_input = message.text.strip()
    cid = message.chat.id
    logging.info(f"[BOT] cid={cid}, text='{user_input}'")

    # --- 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∏–º—è –∏ –∞–≤—Ç–æ—Ä ---
    low_input = user_input.lower()
    if any(name_trig in low_input for name_trig in NAME_COMMANDS):
        await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!")
        return
    if any(info_trig in low_input for info_trig in INFO_COMMANDS):
        r = random.choice(OWNER_REPLIES)
        await message.answer(r)
        return

    # --- 3) –†–∞–∑–±–∏—Ä–∞–µ–º "–ø–æ–∫–∞–∂–∏ ‚Ä¶" –ø–æ-—Ä—É—Å—Å–∫–∏ ---
    show_image, image_en, text_for_gemini = parse_russian_show_request(user_input)

    # --- 4) –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ø–æ–∫–∞–∂–∏ X" (–∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ "–ø–æ–∫–∞–∂–∏") ---
    gemini_text = ""
    text_for_gemini = text_for_gemini.strip()
    if text_for_gemini:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏–∏
        chat_history.setdefault(cid, []).append({"role": "user", "parts": [text_for_gemini]})
        if len(chat_history[cid]) > 5:
            chat_history[cid].pop(0)

        try:
            await bot.send_chat_action(cid, "typing")
            resp = model.generate_content(chat_history[cid])
            gemini_text = format_gemini_response(resp.text)
        except Exception as e:
            logging.error(f"[BOT] Error from Gemini: {e}")
            gemini_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM: {escape(str(e))}"

    # --- 5) –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ Unsplash ---
    image_url = None
    if show_image and image_en:
        image_url = await get_unsplash_image_url(image_en, UNSPLASH_ACCESS_KEY)

    # --- 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å ---
    if image_url:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(image_url) as r:
                if r.status == 200:
                    photo_bytes = await r.read()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                        tmpf.write(photo_bytes)
                        tmp_path = tmpf.name

                    try:
                        await bot.send_chat_action(cid, "upload_photo")
                        file = FSInputFile(tmp_path, filename="image.jpg")

                        # –ï—Å–ª–∏ –≤–µ—Å—å gemini_text <= CAPTION_LIMIT (950), —Å—É–Ω–µ–º –µ–≥–æ —Ç—É–¥–∞
                        if gemini_text and len(gemini_text) <= CAPTION_LIMIT:
                            # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫, –µ—Å–ª–∏ gemini_text –±–ª–∏–∑–æ–∫ –∫ 4096
                            # –ù–æ –æ–±—ã—á–Ω–æ caption –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç "Message too long".
                            await bot.send_photo(cid, file, caption=gemini_text)
                            gemini_text = ""  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç
                        else:
                            # –ò–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ caption="..."
                            await bot.send_photo(cid, file, caption="...")
                    finally:
                        if os.path.exists(tmp_path):
                            os.remove(tmp_path)

    # --- 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è ---
    if gemini_text:
        if len(gemini_text) <= TELEGRAM_MSG_LIMIT:
            await message.answer(gemini_text)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º "—É–º–Ω–æ" –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4096
            chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
            for ch in chunks:
                await message.answer(ch)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
