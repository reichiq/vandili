import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai
import re

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
def is_bot_mentioned(message: types.Message):
    triggers = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]
    text = message.text.lower()
    return (
        any(trigger in text for trigger in triggers)
        or (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown(text: str) -> str:
    special_chars = "_*[]()~`>#+-=|{}.!"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
def format_response(text: str) -> str:
    code_blocks = re.findall(r"```([\s\S]+?)```", text)  # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    if code_blocks:
        for code in code_blocks:
            formatted_code = f"```{code}```"
            text = text.replace(f"```{code}```", formatted_code)
    else:
        text = escape_markdown(text)
    
    return text

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chat_with_gemini(message: types.Message):
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()

    try:
        response = model.generate_content(user_text)
        formatted_text = format_response(response.text)
        await message.answer(formatted_text, parse_mode="MarkdownV2")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {escape_markdown(str(e))}", parse_mode="MarkdownV2")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())