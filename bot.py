import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command

############################
# –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å googletrans
############################
try:
    from googletrans import Translator
    translator = Translator()
    USE_TRANSLATOR = True
except ImportError:
    translator = None
    USE_TRANSLATOR = False

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

############################
# –ü–∞–º—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
############################
chat_history = {}

############################
# –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
############################
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]

OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]

############################
# –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∏–º—è –±–æ—Ç–∞
############################
NAME_COMMANDS = [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç",
    "—Ç–≤–æ–µ –∏–º—è",
    "—Ç–≤–æ—ë –∏–º—è",
    "what is your name",
    "who are you"
]

NAME_REPLY = "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>. –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"

############################
# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ
############################
IMAGE_TRIGGERS = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ",
    "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É",
    "–¥–∞–π —Ñ–æ—Ç–æ", "–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
]

############################
# –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ RU->EN
############################
PROMPT_FIX = {
    "–ø—É–¥–µ–ª—å": "poodle",
    "–ø—É–¥–µ–ª–∏": "poodle",
    "–∫–æ—à–∫–∞": "cat",
    "–∫–æ—à–∫–∏": "cats",
    "–∫–æ—Ç": "cat",
    "–∫–æ—Ç—ã": "cats",
    "—Å–æ–±–∞–∫–∞": "dog",
    "—Å–æ–±–∞–∫–∏": "dogs",
    "–æ—Ä—Ö–∏–¥–µ—é": "orchid",
    "–æ—Ä—Ö–∏–¥–µ–∏": "orchids",
    "–æ—Ä—Ö–∏–¥–µ—è": "orchid",
    "–ø–µ—Ä—Å–∏–∫–∏": "peaches",
    "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
    "–æ–±–µ–∑—å—è–Ω—É": "monkey"
}

############################
# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–≥. –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –≤—ã—Ä–µ–∑–∞–µ–º –æ—Ç–≥–æ–≤–æ—Ä–∫–∏
############################
UNWANTED_REGEX = [
    # ¬´–∏–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å‚Ä¶¬ª
    r"(–∏–∑–≤–∏–Ω–∏.*?–Ω–µ –º–æ–≥—É (?:–Ω–∞–ø—Ä—è–º—É—é\s+)?–ø–æ–∫–∞–∑–∞—Ç—å.*?(\.|$))",
    r"(—è\s+–Ω–µ\s+–º–æ–≥—É\s+–ø–æ–∫–∞–∑–∞—Ç—å\s+.*?(\.|$))",
    r"(—è\s+—Ç–µ–∫—Å—Ç–æ–≤–∞\w+\s+–º–æ–¥–µ–ª—å.*?(\.|$))",
    r"(–Ω–µ\s+–∏–º–µ\w+\s+–≤–æ–∑–º–æ–∂\w+\s+–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤\w+.*?(\.|$))",
    # ¬´—è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏...¬ª
    r"(?:—è –º–æ–≥—É –ø–æ–º–æ—á—å (?:–≤–∞–º\s+)?–Ω–∞–π—Ç–∏\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–∫–∞—Ä—Ç–∏–Ω–∫–∏).*?(\.|$))",
    # Google/Bing/Yandex —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    r"(google\s*(images)?|yandex\s*(–∫–∞—Ä—Ç–∏–Ω–∫(–∏|–∞—Ö))|bing)",
    r"(–≤—ã\s+–º–æ–∂–µ—Ç–µ\s+–Ω–∞–π—Ç–∏\s+.*?(google|yandex|bing).*)",
    # –õ—é–±—ã–µ —Å—Å—ã–ª–∫–∏
    r"(https?:\/\/[^\s)]+)",
]

def remove_unwanted_phrases(text: str) -> str:
    for pattern in UNWANTED_REGEX:
        text = re.sub(pattern, "", text, flags=re.IGNORECASE | re.DOTALL)
    return text

############################
# –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —á–∏—Å—Ç–æ "–ø–æ–∫–∞–∂–∏"
############################
def maybe_shorten_text(original_text: str, user_input: str) -> str:
    if re.search(r"\b–ø–æ–∫–∞–∂–∏\b", user_input.lower()) and not re.search(r"(—Ä–∞—Å—Å–∫–∞–∂–∏|–æ–ø–∏—à–∏|—Ñ–∞–∫—Ç—ã|–ø–∞—Ä—É\s+—Ñ–∞–∫—Ç–æ–≤)", user_input.lower()):
        sentences = re.split(r'(?<=[.!?])\s+', original_text)
        return " ".join(sentences[:2]).strip()
    return original_text

############################
# format_gemini_response
############################
def format_gemini_response(text: str, user_input: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏, –≤—Å—Ç–∞–≤–∫–∏, —Å—Å—ã–ª–∫–∏, –æ—Ç–≥–æ–≤–æ—Ä–∫–∏, Google‚Ä¶"""
    def extract_code(match):
        return ""
    # 1) code-block
    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)

    # 2) [–≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ...]
    text = re.sub(r"\[.*?(—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–≤—Å—Ç–∞–≤—å—Ç–µ|–≤—Å—Ç–∞–≤–∏—Ç—å|insert|–∫–∞—Ä—Ç–∏–Ω–∫—É).*?\]", "", text, flags=re.IGNORECASE)

    # 3) HTML-escape
    text = escape(text)

    # 4) markdown => html
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)

    # 5) –≤—ã—Ä–µ–∑–∞–µ–º ¬´–Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å¬ª –∏ —Ç.–ø. + —Å—Å—ã–ª–∫–∏
    text = remove_unwanted_phrases(text)

    # 6) —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ ¬´–ø–æ–∫–∞–∂–∏¬ª
    text = maybe_shorten_text(text.strip(), user_input)
    return text.strip()

############################
# –ì–µ–Ω. prompt –¥–ª—è Unsplash
############################
def get_safe_prompt(user_input: str) -> str:
    text = user_input.lower()
    text = re.sub(r'[.,!?\-\n]', ' ', text)
    text = re.sub(r"\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏|–º–Ω–µ|–ø—Ä–æ|—Ñ–∞–∫—Ç|—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–ø—Ä–∏–∫—Ä–µ–ø–∏|–¥–∞–π|–∏|–æ|–æ–±|–æ—Ç–ø—Ä–∞–≤—å|—á—Ç–æ|—Ç–∞–∫–æ–µ|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)\b", "", text)
    words = text.strip().split()
    for i, w in enumerate(words):
        if w in PROMPT_FIX:
            words[i] = PROMPT_FIX[w]
    cleaned = " ".join(words).strip()
    if not cleaned:
        return "random"
    if USE_TRANSLATOR:
        translated = translator.translate(cleaned, src="ru", dest="en").text
        logging.info(f"[BOT] Translate RU->EN: '{cleaned}' -> '{translated}'")
        return translated.strip() or "random"
    else:
        return cleaned

############################
# Unsplash –∑–∞–ø—Ä–æ—Å
############################
async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                logging.info(f"[UNSPLASH] status: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    if "urls" in data and "regular" in data["urls"]:
                        return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

############################
# –î–ª–∏–Ω–∞ > 950 => —Ä–µ–∂–µ–º
############################
def split_text(text: str, max_length: int = 950):
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind('. ')
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

############################
# /start
############################
@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.\n\n"
        "–ú–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ –∫–æ—Ç–∞¬ª\n"
        "‚Ä¢ ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ü–∞—Ä–∏–∂¬ª\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ ‚Äî —Å–ø—Ä–æ—Å–∏ ¬´–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª¬ª –∏–ª–∏ ¬´–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç¬ª.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! ü¶æ"
    )
    await message.answer(greet_text, parse_mode=ParseMode.HTML)

############################
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
############################
@dp.message()
async def handle_message(message: Message):
    user_input = message.text.strip()
    chat_id = message.chat.id
    logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–æ: '{user_input}', chat_id={chat_id}")

    # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –∏–º—è
    if any(name_trigger in user_input.lower() for name_trigger in NAME_COMMANDS):
        await bot.send_chat_action(chat_id, action="typing")
        await asyncio.sleep(1)
        await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!", parse_mode=ParseMode.HTML)
        return

    # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if any(trigger in user_input.lower() for trigger in INFO_COMMANDS):
        reply = random.choice(OWNER_REPLIES)
        await asyncio.sleep(1)
        await bot.send_chat_action(chat_id, action="typing")
        await message.answer(reply, parse_mode=ParseMode.HTML)
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chat_history.setdefault(chat_id, []).append({"role": "user", "parts": [user_input]})
    if len(chat_history[chat_id]) > 5:
        chat_history[chat_id].pop(0)

    try:
        await bot.send_chat_action(chat_id, action="typing")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = model.generate_content(chat_history[chat_id])
        gemini_text = format_gemini_response(response.text, user_input)
        logging.info(f"[GEMINI] => {gemini_text[:200]}...")

        # Prompt Unsplash
        prompt = get_safe_prompt(user_input)
        image_url = await get_unsplash_image_url(prompt, UNSPLASH_ACCESS_KEY)

        triggered = any(t in user_input.lower() for t in IMAGE_TRIGGERS)
        logging.info(f"[BOT] triggered => {triggered} | image_url => {image_url}")

        if image_url and triggered:
            # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as resp:
                    if resp.status == 200:
                        photo_bytes = await resp.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpfile:
                            tmpfile.write(photo_bytes)
                            tmp_path = tmpfile.name

                        chunks = split_text(gemini_text)
                        try:
                            await bot.send_chat_action(chat_id, action="upload_photo")
                            file = FSInputFile(tmp_path, filename="image.jpg")
                            cap = chunks[0] if chunks else "..."
                            await bot.send_photo(chat_id, photo=file, caption=cap, parse_mode=ParseMode.HTML)

                            for chunk in chunks[1:]:
                                await message.answer(chunk, parse_mode=ParseMode.HTML)

                        finally:
                            import os
                            if os.path.exists(tmp_path):
                                os.remove(tmp_path)
                        return

        # –ò–Ω–∞—á–µ ‚Äî —Ç–µ–∫—Å—Ç
        for chunk in split_text(gemini_text):
            await message.answer(chunk, parse_mode=ParseMode.HTML)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–≤—è–∑–∏ —Å –æ–±–ª–∞–∫–∞–º–∏.")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    except Exception as e:
        logging.error(f"[BOT] –æ—à–∏–±–∫–∞: {e}")
        from html import escape
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape(str(e))}", parse_mode=ParseMode.HTML)

############################
# –ó–∞–ø—É—Å–∫
############################
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
