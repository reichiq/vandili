import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import tempfile
from aiogram.filters import Command

import google.generativeai as genai
from google.generativeai.types import Content

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
try:
    from googletrans import Translator
    translator = Translator()
    USE_TRANSLATOR = True
except ImportError:
    translator = None
    USE_TRANSLATOR = False

# Load environment variables
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")
TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini —Å system-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(
    model_name="models/gemini-1.5-pro-latest",
    system_instruction=(
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å, —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, –ò–ò –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. "
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Å–∫–∞—Ç—å –≤ Google, Yandex –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞—Ö. "
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –µ–≥–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–æ –µ—Å—Ç—å."
    )
)

chat_history = {}

# –ö–æ–º–∞–Ω–¥—ã
NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω", "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü"
]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]
IMAGE_TRIGGERS = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ", "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ",
    "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–¥–∞–π —Ñ–æ—Ç–æ", "–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
]
PROMPT_FIX = {
    "–ø—É–¥–µ–ª—å": "poodle", "–ø—É–¥–µ–ª–∏": "poodle", "–∫–æ—à–∫–∞": "cat", "–∫–æ—à–∫–∏": "cats",
    "–∫–æ—Ç": "cat", "–∫–æ—Ç—ã": "cats", "—Å–æ–±–∞–∫–∞": "dog", "—Å–æ–±–∞–∫–∏": "dogs", "–æ—Ä—Ö–∏–¥–µ—è": "orchid",
    "–æ—Ä—Ö–∏–¥–µ—é": "orchid", "–æ—Ä—Ö–∏–¥–µ–∏": "orchids", "–ø–µ—Ä—Å–∏–∫–∏": "peaches", "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
    "–æ–±–µ–∑—å—è–Ω—É": "monkey"
}

UNWANTED_REGEX = [
    r"(?is)(\b—è\s+(?:—Ç–µ–∫—Å—Ç–æ–≤\w*|language\s+model|–±–æ–ª—å—à–∞—è\s+—è–∑—ã–∫–æ–≤–∞—è\s+–º–æ–¥–µ–ª—å)[^.]{0,50})",
    r"(?is)(\b–Ω–µ\s+–º–æ–≥—É\s+–ø–æ–∫–∞–∑–∞—Ç—å\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–≥—Ä–∞—Ñ–∏–∫—É|—á—Ç–æ-–ª–∏–±–æ).{0,50})",
    r"(?is)(https?:\/\/[^\s)]+)",  # URL
    r"(?is)(google|yandex|bing|–ø–æ–∏—Å–∫|–ø–æ–∏—Å–∫–æ–≤–∏–∫|search\s+engine)",
    r"(?is)(—Ä–µ–∫–æ–º–µ–Ω–¥—É—é\s+–ø–æ–∏—Å–∫–∞—Ç—å|—Å–æ–≤–µ—Ç—É—é\s+–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å)",
    r"(?is)(–≤—ã\s+–º–æ–∂–µ—Ç–µ\s+–Ω–∞–π—Ç–∏.*?(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫–∏))",
]

def remove_unwanted_phrases(text: str) -> str:
    for pattern in UNWANTED_REGEX:
        text = re.sub(pattern, "", text, flags=re.IGNORECASE)
    return text

def maybe_shorten(text: str, user_input: str) -> str:
    if "–ø–æ–∫–∞–∂–∏" in user_input.lower() and not re.search(r"(—Ä–∞—Å—Å–∫–∞–∂–∏|—Ñ–∞–∫—Ç|–æ–ø–∏—à–∏|–æ–±—ä—è—Å–Ω–∏)", user_input.lower()):
        sents = re.split(r'(?<=[.!?])\s+', text)
        return " ".join(sents[:2]).strip()
    return text.strip()

def format_gemini_response(text: str, user_input: str) -> str:
    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", "", text)
    text = re.sub(r"\[.*?(–≤—Å—Ç–∞–≤–∏—Ç—å|insert|—Ñ–æ—Ç–æ|image|picture).*?\]", "", text, flags=re.IGNORECASE)
    text = escape(text)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = remove_unwanted_phrases(text)
    return maybe_shorten(text, user_input)

def get_safe_prompt(user_input: str) -> str:
    clean = re.sub(r'[.,!?\-\n]', ' ', user_input.lower())
    clean = re.sub(r"\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏|—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|–ø—Ä–æ|–æ|–º–Ω–µ|–æ–ø–∏—à–∏|—Ñ–∞–∫—Ç|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ|–¥–∞–π|—á—Ç–æ)\b", "", clean)
    words = clean.strip().split()
    for i, w in enumerate(words):
        if w in PROMPT_FIX:
            words[i] = PROMPT_FIX[w]
    prompt = " ".join(words) or "random"
    if USE_TRANSLATOR:
        try:
            translated = translator.translate(prompt, src="ru", dest="en").text
            return translated.strip() or prompt
        except:
            return prompt
    return prompt

async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(url) as r:
                if r.status == 200:
                    data = await r.json()
                    return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"[UNSPLASH] Error: {e}")
    return None

def split_text(text: str, max_len=950):
    parts = []
    while len(text) > max_len:
        idx = text[:max_len].rfind('. ')
        if idx == -1:
            idx = max_len
        parts.append(text[:idx+1].strip())
        text = text[idx+1:].strip()
    if text:
        parts.append(text)
    return parts

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.\n\n"
        "<i>–Ø —É–º–µ—é:</i>\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã (Gemini)\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (Unsplash)\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–ø–æ–∫–∞–∂–∏ –∫–æ—Ç–∞¬ª –∏–ª–∏ ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ü–∞—Ä–∏–∂¬ª!\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ ‚Äî —Å–ø—Ä–æ—Å–∏ ¬´–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª¬ª.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! ü¶æ"
    )

@dp.message()
async def handle_msg(message: Message):
    cid = message.chat.id
    user_input = message.text.strip()

    if any(trig in user_input.lower() for trig in NAME_COMMANDS):
        await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!", parse_mode=ParseMode.HTML)
        return

    if any(trig in user_input.lower() for trig in INFO_COMMANDS):
        await message.answer(random.choice(OWNER_REPLIES), parse_mode=ParseMode.HTML)
        return

    chat_history.setdefault(cid, []).append({"role": "user", "parts": [user_input]})
    if len(chat_history[cid]) > 5:
        chat_history[cid].pop(0)

    try:
        await bot.send_chat_action(cid, "typing")
        response = model.generate_content(chat_history[cid])
        gemini_text = format_gemini_response(response.text, user_input)
        prompt = get_safe_prompt(user_input)
        image_url = await get_unsplash_image_url(prompt, UNSPLASH_ACCESS_KEY)
        triggered = any(t in user_input.lower() for t in IMAGE_TRIGGERS)

        if image_url and triggered:
            async with aiohttp.ClientSession() as s:
                async with s.get(image_url) as r:
                    if r.status == 200:
                        photo = await r.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
                            tmp.write(photo)
                            tmp_path = tmp.name

                        try:
                            await bot.send_chat_action(cid, "upload_photo")
                            file = FSInputFile(tmp_path)
                            parts = split_text(gemini_text)
                            await bot.send_photo(cid, file, caption=parts[0] if parts else "", parse_mode=ParseMode.HTML)
                            for chunk in parts[1:]:
                                await message.answer(chunk, parse_mode=ParseMode.HTML)
                        finally:
                            os.remove(tmp_path)
                        return

        for chunk in split_text(gemini_text):
            await message.answer(chunk, parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.error(f"[BOT] Error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape(str(e))}", parse_mode=ParseMode.HTML)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
