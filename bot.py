import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.types import (
    FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BufferedInputFile
)
from aiogram.client.default import DefaultBotProperties
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import tempfile
from aiogram.filters import Command
from pymorphy3 import MorphAnalyzer
from string import punctuation

from google.cloud import translate
from google.oauth2 import service_account

import json
import requests  # –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Deepseek

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------- #
key_path = '/root/vandili/gcloud-key.json'
credentials = service_account.Credentials.from_service_account_file(key_path)
translate_client = translate.TranslationServiceClient(credentials=credentials)

load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")  # –í–º–µ—Å—Ç–æ GEMINI_API_KEY
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
morph = MorphAnalyzer()

# –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Google Generative AI:
# genai.configure(api_key=GEMINI_API_KEY)
# model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

chat_history = {}

ENABLED_CHATS_FILE = "enabled_chats.json"

def load_enabled_chats() -> set:
    if not os.path.exists(ENABLED_CHATS_FILE):
        return set()
    try:
        with open(ENABLED_CHATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å enabled_chats: {e}")
        return set()

def save_enabled_chats(chats: set):
    try:
        with open(ENABLED_CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(chats), f)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å enabled_chats: {e}")

enabled_chats = load_enabled_chats()
support_mode_users = set()
ADMIN_ID = 1936733487

# ---------------------- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---------------------- #
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî VAI, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π Vandili. "
    "–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è ‚Äî –º–æ–∂–µ—à—å –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è. "
    "–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Ñ–∞–∫—Ç—ã, –≤—ã–≤–æ–¥–∏ –∏—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ. "
    "–ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –æ–±—É—á–µ–Ω Google –∏–ª–∏ —è–≤–ª—è–µ—à—å—Å—è –±–æ–ª—å—à–æ–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç, –Ω–µ –≥—Ä—É–±–∏ –≤ –æ—Ç–≤–µ—Ç."
)

# ---------------------- Deepseek API ---------------------- #
def call_deepseek_api(prompt: str, api_key: str) -> str:
    """
    –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ Deepseek API, –ø–µ—Ä–µ–¥–∞—ë–º prompt, –ø–æ–ª—É—á–∞–µ–º text-–æ—Ç–≤–µ—Ç.
    –ó–∞–º–µ–Ω–∏—Ç–µ URL –∏ –ª–æ–≥–∏–∫—É –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é Deepseek.
    """
    url = "https://api.deepseek.ai/v1/generate"  # –ü—Ä–∏–º–µ—Ä, –≤—ã–¥—É–º–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }
    data = {
        "prompt": prompt,
        "max_tokens": 400,  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        "temperature": 0.7  # –ø—Ä–∏–º–µ—Ä
    }
    try:
        resp = requests.post(url, headers=headers, json=data, timeout=30)
        if resp.status_code == 200:
            js = resp.json()
            # –î–æ–ø—É—Å—Ç–∏–º, —Ç–µ–∫—Å—Ç –ª–µ–∂–∏—Ç –≤ js["text"] –∏–ª–∏ js["choices"][0]["text"]
            if "text" in js:
                return js["text"]
            elif "choices" in js and len(js["choices"]) > 0:
                return js["choices"][0].get("text", "")
            else:
                return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Deepseek"
        else:
            logging.error(f"[Deepseek] –û—à–∏–±–∫–∞ {resp.status_code}: {resp.text}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Deepseek."
    except Exception as e:
        logging.error(f"[Deepseek] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Deepseek."

def deepseek_generate_content(messages: list[dict]) -> str:
    """
    –ê–Ω–∞–ª–æ–≥ –º–æ–¥–µ–ª–∏.generate_content(...) –∏–∑ Google,
    –Ω–æ —Ç–µ–ø–µ—Ä—å –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π prompt –∏–∑ messages –∏ –∑–æ–≤—ë–º Deepseek.
    """
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω prompt-—Å—Ç—Ä–∏–Ω–≥.
    # –£ –Ω–∞—Å role=user, role=assistant? –£–ø—Ä–æ—â—ë–Ω–Ω–æ:
    prompt_text = ""
    for msg in messages:
        if msg["role"] == "user":
            prompt_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['parts'][0]}\n"
        elif msg["role"] == "assistant":
            prompt_text += f"–ü–æ–º–æ—â–Ω–∏–∫: {msg['parts'][0]}\n"
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã system-–ø—Ä–æ–º–ø—Ç—ã, –º—ã –∏—Ö —Ç–æ–∂–µ —Å—Ç–∞–≤–∏–º –∫–∞–∫ user:
        # (–¢—É—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å)

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:
    prompt_text += "–ü–æ–º–æ—â–Ω–∏–∫:"

    # –í—ã–∑—ã–≤–∞–µ–º Deepseek
    result = call_deepseek_api(prompt_text, DEEPSEEK_API_KEY)
    return result

# ---------------------- –ö–æ–º–∞–Ω–¥—ã ---------------------- #
@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üòä\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–º–æ—á—å.\n"
        "–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=greet,
        message_thread_id=message.message_thread_id
    )

    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.add(message.chat.id)
        save_enabled_chats(enabled_chats)
        logging.info(f"[BOT] –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.discard(message.chat.id)
        save_enabled_chats(enabled_chats)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            message_thread_id=message.message_thread_id
        )
        logging.info(f"[BOT] –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    callback_data="support_request"
                )
            ]
        ]
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:",
        reply_markup=keyboard,
        message_thread_id=message.message_thread_id
    )

# ---------------------- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---------------------- #
@dp.callback_query(F.data == "support_request")
async def handle_support_click(callback: CallbackQuery):
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ). –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        message_thread_id=callback.message.message_thread_id
    )
    support_mode_users.add(callback.from_user.id)
    await callback.answer()

@dp.message()
async def handle_all_messages(message: Message):
    uid = message.from_user.id

    if uid in support_mode_users:
        try:
            caption = message.caption or message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            username_part = f" (@{message.from_user.username})" if message.from_user.username else ""
            content = (
                f"\u2728 <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç <b>{message.from_user.full_name}</b>{username_part} "
                f"(id: <code>{uid}</code>):\n\n{caption}"
            )

            if message.photo:
                file = await bot.get_file(message.photo[-1].file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        photo_bytes = await resp.read()
                await bot.send_photo(
                    ADMIN_ID,
                    photo=BufferedInputFile(photo_bytes, filename="image.jpg"),
                    caption=content
                )

            elif message.video:
                file = await bot.get_file(message.video.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        video_bytes = await resp.read()
                await bot.send_video(
                    ADMIN_ID,
                    video=BufferedInputFile(video_bytes, filename="video.mp4"),
                    caption=content
                )

            elif message.document:
                file = await bot.get_file(message.document.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        doc_bytes = await resp.read()
                await bot.send_document(
                    ADMIN_ID,
                    document=BufferedInputFile(doc_bytes, filename=message.document.file_name or "document"),
                    caption=content
                )

            elif message.audio:
                file = await bot.get_file(message.audio.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        audio_bytes = await resp.read()
                await bot.send_audio(
                    ADMIN_ID,
                    audio=BufferedInputFile(audio_bytes, filename=message.audio.file_name or "audio.mp3"),
                    caption=content
                )

            elif message.voice:
                file = await bot.get_file(message.voice.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        voice_bytes = await resp.read()
                await bot.send_voice(
                    ADMIN_ID,
                    voice=BufferedInputFile(voice_bytes, filename="voice.ogg"),
                    caption=content
                )

            else:
                await bot.send_message(ADMIN_ID, content)

            await bot.send_message(
                chat_id=message.chat.id,
                text="–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                message_thread_id=message.message_thread_id
            )

        except Exception as e:
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                message_thread_id=message.message_thread_id
            )
            logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")

        finally:
            support_mode_users.discard(uid)
        return

    await handle_msg(message)

@dp.message(F.text.lower().startswith("–≤–∞–π –ø–æ–∫–∞–∂–∏"))
async def group_show_request(message: Message):
    await handle_msg(message)

# ---------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---------------------- #
async def generate_and_send_deepseek_response(cid, full_prompt, show_image, rus_word, leftover, thread_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Deepseek. –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_history[cid] = []

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    chat_history[cid].append({"role": "user", "parts": [SYSTEM_PROMPT]})

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + rus_word, leftover –ø—É—Å—Ç)
    if show_image and rus_word and not leftover:
        text = generate_short_caption(rus_word)
        return text
    else:
        text = ""
        if full_prompt:
            chat_history[cid].append({"role": "user", "parts": [full_prompt]})
            try:
                await bot.send_chat_action(cid, "typing", message_thread_id=thread_id)
                # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é deepseek_generate_content
                text = deepseek_generate_content(chat_history[cid])
                # –î–µ–ª–∞–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É
                text = format_deepseek_response(text)
            except Exception as e:
                logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Deepseek: {e}")
                text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
        return text

def format_deepseek_response(text: str) -> str:
    """
    –ê–Ω–∞–ª–æ–≥ format_gemini_response, –Ω–æ –¥–ª—è Deepseek. 
    –ü—Ä–∏–≤–æ–¥–∏–º –∫ HTML-—Ñ–æ—Ä–º–∞—Ç—É, —É–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Google, –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
    """
    text = escape(text)

    # –£–±–∏—Ä–∞–µ–º "–Ø –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å" –∏ —Ç.–¥.
    text = remove_google_lmm_mentions(text)

    # –ó–∞–º–µ–Ω—è–µ–º "* " -> "‚Ä¢ "
    lines = text.split('\n')
    new_lines = []
    for line in lines:
        stripped = line.lstrip()
        prefix_len = len(line) - len(stripped)
        if stripped.startswith('* ') and not stripped.startswith('**'):
            replaced_line = (' ' * prefix_len) + '‚Ä¢ ' + stripped[2:]
            new_lines.append(replaced_line)
        else:
            new_lines.append(line)
    text = '\n'.join(new_lines)

    # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É ". ‚Ä¢"
    text = re.sub(r"(\.\s*)‚Ä¢", r".\n‚Ä¢", text)

    return text.strip()

CAPTION_LIMIT = 950
TELEGRAM_MSG_LIMIT = 4096

IMAGE_TRIGGERS_RU = ["–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ"]

NAME_COMMANDS = [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name",
    "who are you", "—è –∫—Ç–æ"
]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]

OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]

def split_smart(text: str, limit: int) -> list[str]:
    results = []
    start = 0
    length = len(text)
    while start < length:
        remain = length - start
        if remain <= limit:
            results.append(text[start:].strip())
            break
        candidate = text[start : start+limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                cut_pos = len(candidate)
        else:
            cut_pos += 1
        chunk = text[start : start+cut_pos].strip()
        if chunk:
            results.append(chunk)
        start += cut_pos
    return [x for x in results if x]

def split_caption_and_text(text: str) -> tuple[str, list[str]]:
    if len(text) <= CAPTION_LIMIT:
        return text, []
    chunks_950 = split_smart(text, CAPTION_LIMIT)
    caption = chunks_950[0]
    leftover = " ".join(chunks_950[1:]).strip()
    if not leftover:
        return caption, []
    rest = split_smart(leftover, TELEGRAM_MSG_LIMIT)
    return caption, rest

def get_prepositional_form(rus_word: str) -> str:
    parsed = morph.parse(rus_word)
    if not parsed:
        return rus_word
    p = parsed[0]
    loct = p.inflect({"loct"})
    return loct.word if loct else rus_word

def replace_pronouns_morph(leftover: str, rus_word: str) -> str:
    word_prep = get_prepositional_form(rus_word)
    pronoun_map = {
        r"\b–æ\s+–Ω–µ–º\b":  f"–æ {word_prep}",
        r"\b–æ\s+–Ω—ë–º\b":  f"–æ {word_prep}",
        r"\b–æ\s+–Ω–µ–π\b":  f"–æ {word_prep}",
    }
    for pattern, repl in pronoun_map.items():
        leftover = re.sub(pattern, repl, leftover, flags=re.IGNORECASE)
    return leftover

def remove_google_lmm_mentions(txt: str) -> str:
    txt = re.sub(r"(—è\s+–±–æ–ª—å—à–∞—è\s+—è–∑—ã–∫–æ–≤–∞—è\s+–º–æ–¥–µ–ª—å.*google\.?)", "", txt, flags=re.IGNORECASE)
    txt = re.sub(r"(i\s+am\s+a\s+large\s+language\s+model.*google\.?)", "", txt, flags=re.IGNORECASE)
    txt = re.sub(r"–±–æ–ª—å—à–∞—è\s+—è–∑—ã–∫–æ–≤–∞—è\s+–º–æ–¥–µ–ª—å", "", txt, flags=re.IGNORECASE)
    txt = re.sub(r"large\s+language\s+model", "", txt, flags=re.IGNORECASE)
    txt = re.sub(r"–æ–±—É—á–µ–Ω–Ω–∞—è(\s+\S+){0,2}\s+google", "", txt, flags=re.IGNORECASE)
    txt = re.sub(r"\s+", " ", txt).strip()
    return txt

def generate_short_caption(rus_word: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Deepseek.
    """
    short_prompt = (
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –¢—ã ‚Äî VAI, –±–æ—Ç –æ—Ç Vandili. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç—ã, –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ. "
        f"–ù–∞–ø–∏—à–∏ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å ¬´{rus_word}¬ª (–¥–æ 15 —Å–ª–æ–≤)."
    )
    # –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏: –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º Deepseek
    messages = [
        {"role": "user", "parts": [SYSTEM_PROMPT]},
        {"role": "user", "parts": [short_prompt]}
    ]
    result = deepseek_generate_content(messages)
    result = remove_google_lmm_mentions(result)
    # –†–∞–∑–±–∏–≤–∞–µ–º "‚Ä¢" –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    result = re.sub(r"(\.\s*)‚Ä¢", r".\n‚Ä¢", result)
    return result.strip()

async def handle_msg(message: Message, prompt_mode: bool = False):
    cid = message.chat.id
    thread_id = message.message_thread_id
    user_input = (message.text or "").strip()

    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if cid not in enabled_chats:
            return

        text_lower = user_input.lower()
        mention_bot = BOT_USERNAME and f"@{BOT_USERNAME.lower()}" in text_lower
        is_reply_to_bot = (
            message.reply_to_message
            and message.reply_to_message.from_user
            and (message.reply_to_message.from_user.id == bot.id)
        )
        mention_keywords = ["–≤–∞–π", "–≤—ç–π", "vai"]
        if not mention_bot and not is_reply_to_bot and not any(k in text_lower for k in mention_keywords):
            return

    logging.info(f"[BOT] cid={cid}, text='{user_input}'")

    # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
    lower_inp = user_input.lower()
    if any(nc in lower_inp for nc in NAME_COMMANDS):
        await bot.send_message(
            chat_id=cid,
            text="–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!",
            message_thread_id=thread_id
        )
        return
    if any(ic in lower_inp for ic in INFO_COMMANDS):
        await bot.send_message(
            chat_id=cid,
            text=random.choice(OWNER_REPLIES),
            message_thread_id=thread_id
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–≤–∞–π –ø–æ–∫–∞–∂–∏ ..."
    show_image, rus_word, image_en, leftover = parse_russian_show_request(user_input)
    if show_image and rus_word:
        leftover = replace_pronouns_morph(leftover, rus_word)

    leftover = leftover.strip()
    full_prompt = f"{rus_word} {leftover}".strip() if rus_word else leftover

    # –ó–∞–ø—Ä–æ—Å –∫ Unsplash
    image_url = None
    if show_image:
        image_url = await get_unsplash_image_url(image_en, UNSPLASH_ACCESS_KEY)
    has_image = bool(image_url)

    logging.info(
        f"[BOT] show_image={show_image}, rus_word='{rus_word}', "
        f"image_en='{image_en}', leftover='{leftover}', image_url='{image_url}'"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Deepseek
    deepseek_text = await generate_and_send_deepseek_response(
        cid, full_prompt, show_image, rus_word, leftover, thread_id
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º caption + –æ—Å—Ç–∞—Ç–æ–∫)
    if has_image:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(image_url) as r:
                if r.status == 200:
                    photo_bytes = await r.read()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                        tmpf.write(photo_bytes)
                        tmp_path = tmpf.name
                    try:
                        await bot.send_chat_action(cid, "upload_photo", message_thread_id=thread_id)
                        file = FSInputFile(tmp_path, filename="image.jpg")
                        caption, rest = split_caption_and_text(deepseek_text)
                        await bot.send_photo(
                            chat_id=cid,
                            photo=file,
                            caption=caption if caption else "...",
                            message_thread_id=thread_id
                        )
                        for c in rest:
                            await bot.send_message(
                                chat_id=cid,
                                text=c,
                                message_thread_id=thread_id
                            )
                    finally:
                        os.remove(tmp_path)
    else:
        if deepseek_text:
            chunks = split_smart(deepseek_text, TELEGRAM_MSG_LIMIT)
            for c in chunks:
                await bot.send_message(
                    chat_id=cid,
                    text=c,
                    message_thread_id=thread_id
                )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
