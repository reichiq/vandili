import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.types import (
    FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, InputFile, BufferedInputFile
)
from aiogram.client.default import DefaultBotProperties
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command, CommandStart
from pymorphy3 import MorphAnalyzer
from string import punctuation

from google.cloud import translate
from google.oauth2 import service_account

import json

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------- #
key_path = '/root/vandili/gcloud-key.json'
credentials = service_account.Credentials.from_service_account_file(key_path)
translate_client = translate.TranslationServiceClient(credentials=credentials)

load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
morph = MorphAnalyzer()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Gemini 2.0-flash
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-2.0-flash")

chat_history = {}

ENABLED_CHATS_FILE = "enabled_chats.json"
ADMIN_ID = 1936733487
support_mode_users = set()

# –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤ –õ–°, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ ¬´—Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª
SUPPORT_PROMPT_TEXT = (
    "‚úâÔ∏è <b>–†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>\n\n"
    "–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –≥–æ–ª–æ—Å ‚Äî –≤—Å—ë –¥–æ–π–¥—ë—Ç –¥–æ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
)

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤ ---------------------- #
def thread_kwargs(message: Message) -> dict:
    if (
        message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]
        and message.message_thread_id is not None
    ):
        return {"message_thread_id": message.message_thread_id}
    return {}

def load_enabled_chats() -> set:
    if not os.path.exists(ENABLED_CHATS_FILE):
        return set()
    try:
        with open(ENABLED_CHATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å enabled_chats: {e}")
        return set()

def save_enabled_chats(chats: set):
    try:
        with open(ENABLED_CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(chats), f)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å enabled_chats: {e}")

enabled_chats = load_enabled_chats()

# ---------------------- –ö–æ–º–∞–Ω–¥—ã /start –∏ /stop ---------------------- #
@dp.message(CommandStart())
async def cmd_start(message: Message, command: CommandStart = None):
    if message.chat.type == ChatType.PRIVATE and command.args == "support":
        support_mode_users.add(message.from_user.id)
        await message.answer(SUPPORT_PROMPT_TEXT)
        return

    greet = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üòä\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–º–æ—á—å.\n"
        "–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    await message.answer(greet, **thread_kwargs(message))

    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.add(message.chat.id)
        save_enabled_chats(enabled_chats)
        logging.info(f"[BOT] –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.discard(message.chat.id)
        save_enabled_chats(enabled_chats)
        await message.answer(
            "–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            **thread_kwargs(message)
        )
        logging.info(f"[BOT] –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

# ---------------------- –ö–æ–º–∞–Ω–¥–∞ /help ---------------------- #
@dp.message(Command("help"))
async def cmd_help(message: Message):
    if message.chat.type == ChatType.PRIVATE:
        await message.answer(
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                        callback_data="support_request"
                    )
                ]]
            )
        )
    else:
        private_url = f"https://t.me/{BOT_USERNAME}?start=support"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url=private_url
                )
            ]]
        )
        await message.answer(
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:",
            reply_markup=keyboard,
            **thread_kwargs(message)
        )
# ---------------------- –†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---------------------- #
@dp.callback_query(F.data == "support_request")
async def handle_support_click(callback: CallbackQuery):
    user_id = callback.from_user.id
    private_url = f"https://t.me/{BOT_USERNAME}?start=support"

    if callback.message.chat.type == ChatType.PRIVATE:
        support_mode_users.add(user_id)
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ) ‚Äî –≤—Å—ë –¥–æ–π–¥—ë—Ç –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å VAI",
                        url=private_url
                    )
                ]
            ]
        )
        await callback.message.answer(
            "–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å VAI –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:",
            reply_markup=keyboard,
            message_thread_id=callback.message.message_thread_id
        )
    await callback.answer()


@dp.message()
async def handle_all_messages(message: Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º start=support
    if message.chat.type == ChatType.PRIVATE and message.text and message.text.strip().lower() == "/start support":
        support_mode_users.add(message.from_user.id)
        await message.answer(
            "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª, –∞—É–¥–∏–æ –∏–ª–∏ –≤–æ–π—Å)."
        )

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    uid = message.from_user.id
    if uid in support_mode_users:
        try:
            caption = message.caption or message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            username_part = f" (@{message.from_user.username})" if message.from_user.username else ""
            content = (
                f"‚ú® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç <b>{message.from_user.full_name}</b>{username_part} "
                f"(id: <code>{uid}</code>):\n\n{caption}"
            )

            async def fetch_and_forward(file_id, method, filename):
                file = await bot.get_file(file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        data = await resp.read()
                await getattr(bot, method)(
                    ADMIN_ID,
                    **{method.split("_", 1)[1]: BufferedInputFile(data, filename=filename)},
                    caption=content
                )

            if message.photo:
                await fetch_and_forward(message.photo[-1].file_id, "send_photo", "image.jpg")
            elif message.video:
                await fetch_and_forward(message.video.file_id, "send_video", "video.mp4")
            elif message.document:
                await fetch_and_forward(message.document.file_id, "send_document", message.document.file_name or "document")
            elif message.audio:
                await fetch_and_forward(message.audio.file_id, "send_audio", message.audio.file_name or "audio.mp3")
            elif message.voice:
                await fetch_and_forward(message.voice.file_id, "send_voice", "voice.ogg")
            else:
                await bot.send_message(ADMIN_ID, content)

            await message.answer("<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>")

        except Exception as e:
            logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
            await message.answer("<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        return

    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    await handle_msg(message)


# ---------------------- –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–≤–∞–π –ø–æ–∫–∞–∂–∏ ..." ---------------------- #
@dp.message(F.text.lower().startswith("–≤–∞–π –ø–æ–∫–∞–∂–∏"))
async def group_show_request(message: Message):
    await handle_msg(message)


# ---------------------- –ó–∞–ø—É—Å–∫ ---------------------- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
