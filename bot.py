# ---------------------- –ò–º–ø–æ—Ä—Ç—ã ---------------------- #
import logging
import matplotlib.pyplot as plt
import os
import re
from html import unescape, escape
import random
import aiohttp
import dateparser
import pytz
import requests
from datetime import datetime
from google.cloud import texttospeech
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.types import (
    FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BufferedInputFile, ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command
from pymorphy3 import MorphAnalyzer
from string import punctuation
from google.cloud import translate
from google.oauth2 import service_account
from docx import Document
from PyPDF2 import PdfReader
import json
import speech_recognition as sr
from pydub import AudioSegment
from collections import defaultdict
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
# ‚òÖ –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
from aiogram.fsm.storage.memory import MemoryStorage

class ReminderAdd(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_text = State()
class ReminderEdit(StatesGroup):
    waiting_for_new_text = State()
    waiting_for_new_date = State()
    waiting_for_new_time = State()

def clean_for_tts(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, &nbsp; ‚Üí –ø—Ä–æ–±–µ–ª) –¥–ª—è –æ–∑–≤—É—á–∫–∏.
    """
    text = re.sub(r"<[^>]+>", "", text)   # —É–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    return unescape(text).strip()

# ---------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---------------------- #
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/root/vandili/key.json"
credentials = service_account.Credentials.from_service_account_file("/root/vandili/key.json")
translate_client = translate.TranslationServiceClient(credentials=credentials)

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")
# –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ —Ç–∏–ø –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏–µ None)
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY") or ""

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# ‚òÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage –¥–ª—è FSM
dp = Dispatcher(storage=MemoryStorage())
morph = MorphAnalyzer()

genai.configure(api_key=GEMINI_API_KEY)
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ Gemini 2.5 Pro Experimental
model = genai.GenerativeModel(model_name="models/gemini-2.5-pro-exp-03-25")

# ---------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---------------------- #
STATS_FILE = "stats.json"
SUPPORT_MAP_FILE = "support_map.json"
NOTES_FILE = "notes.json"
REMINDERS_FILE = "reminders.json"
TIMEZONES_FILE = "timezones.json"

def load_timezones() -> dict:
    if not os.path.exists(TIMEZONES_FILE):
        return {}
    try:
        with open(TIMEZONES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å timezones.json: {e}")
        return {}

def save_timezones(timezones: dict):
    try:
        with open(TIMEZONES_FILE, "w", encoding="utf-8") as f:
            json.dump(timezones, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å timezones.json: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_timezones = load_timezones()

def load_reminders():
    if not os.path.exists(REMINDERS_FILE):
        return []
    try:
        with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # data ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{"user_id": ..., "datetime_utc": ..., "text": ...}]
            # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º datetime_utc –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            out = []
            for item in data:
                dt_str = item["datetime_utc"]
                dt_obj = datetime.fromisoformat(dt_str)
                out.append((item["user_id"], dt_obj, item["text"]))
            return out
    except:
        return []

def save_reminders():
    data_to_save = []
    for (user_id, dt_obj, text) in reminders:
        data_to_save.append({
            "user_id": user_id,
            "datetime_utc": dt_obj.isoformat(),
            "text": text
        })
    try:
        with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å reminders: {e}")

def load_notes() -> dict:
    if not os.path.exists(NOTES_FILE):
        return defaultdict(list)
    try:
        with open(NOTES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return defaultdict(list, {int(k): v for k, v in data.items()})
    except:
        return defaultdict(list)

def save_notes():
    try:
        with open(NOTES_FILE, "w", encoding="utf-8") as f:
            json.dump(user_notes, f, ensure_ascii=False)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏: {e}")

def load_support_map() -> dict:
    if not os.path.exists(SUPPORT_MAP_FILE):
        return {}
    try:
        with open(SUPPORT_MAP_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_support_map():
    try:
        with open(SUPPORT_MAP_FILE, "w", encoding="utf-8") as f:
            json.dump(support_reply_map, f)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ support_map: {e}")

def load_stats() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (messages_total, files_received, commands_used) –∏–∑ stats.json.
    """
    if not os.path.exists(STATS_FILE):
        return {
            "messages_total": 0,
            "files_received": 0,
            "commands_used": {}
        }
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            data.setdefault("messages_total", 0)
            data.setdefault("files_received", 0)
            data.setdefault("commands_used", {})
            return data
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å stats.json: {e}")
        return {
            "messages_total": 0,
            "files_received": 0,
            "commands_used": {}
        }

def save_stats():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (messages_total, files_received, commands_used) –≤ stats.json.
    """
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å stats.json: {e}")

def normalize_command(command: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –∫ –≤–∏–¥—É –±–µ–∑ @username.
    –ù–∞–ø—Ä–∏–º–µ—Ä, '/start@VandiliBot' -> '/start'
    """
    return command.split('@')[0]

def get_normalized_command_stats(stats_dict: dict) -> dict:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥, —É–±–∏—Ä–∞—è @username –∏–∑ –∫–ª—é—á–µ–π.
    """
    raw_commands = stats_dict.get("commands_used", {})
    normalized_stats = {}

    for command, count in raw_commands.items():
        norm_cmd = normalize_command(command)
        normalized_stats[norm_cmd] = normalized_stats.get(norm_cmd, 0) + count

    return normalized_stats

def render_top_commands_bar_chart(commands_dict: dict) -> str:
    import matplotlib.pyplot as plt
    import tempfile

    if not commands_dict:
        return None

    normalized_stats = get_normalized_command_stats({"commands_used": commands_dict})
    sorted_cmds = sorted(normalized_stats.items(), key=lambda x: x[1], reverse=True)[:5]
    commands = [cmd.replace("@VandiliBot", "") for cmd, _ in sorted_cmds]
    counts = [cnt for _, cnt in sorted_cmds]

    fig, ax = plt.subplots(figsize=(8, 5))
    bars = ax.bar(commands, counts)

    ax.set_title("üìä –¢–æ–ø-5 –∫–æ–º–∞–Ω–¥")
    ax.set_xlabel("–ö–æ–º–∞–Ω–¥—ã")
    ax.set_ylabel("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height + 0.5, f"{int(height)}",
                ha='center', va='bottom', fontsize=10)

    plt.tight_layout()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmpf:
        plt.savefig(tmpf.name)
        return tmpf.name

# ---------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---------------------- #
stats = load_stats()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
pending_note_or_reminder = {}
support_mode_users = set()
support_reply_map = load_support_map()
chat_history = {}
user_documents = {}
user_notes = load_notes()
reminders = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (user_id, event_utc: datetime, text)
reminders = load_reminders()

# ---------------------- –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ ---------------------- #
DISABLED_CHATS_FILE = "disabled_chats.json"

def load_disabled_chats() -> set:
    if not os.path.exists(DISABLED_CHATS_FILE):
        return set()
    try:
        with open(DISABLED_CHATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å disabled_chats: {e}")
        return set()

def save_disabled_chats(chats: set):
    try:
        with open(DISABLED_CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(chats), f)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å disabled_chats: {e}")

disabled_chats = load_disabled_chats()

# ---------------------- Persistent Unique Users –∏ Groups ---------------------- #
UNIQUE_USERS_FILE = "unique_users.json"
UNIQUE_GROUPS_FILE = "unique_groups.json"

def load_unique_users() -> set:
    if not os.path.exists(UNIQUE_USERS_FILE):
        return set()
    try:
        with open(UNIQUE_USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return set()

def save_unique_users(users: set):
    try:
        with open(UNIQUE_USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(users), f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_unique_groups() -> set:
    if not os.path.exists(UNIQUE_GROUPS_FILE):
        return set()
    try:
        with open(UNIQUE_GROUPS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")
        return set()

def save_unique_groups(groups: set):
    try:
        with open(UNIQUE_GROUPS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(groups), f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")

unique_users = load_unique_users()
unique_groups = load_unique_groups()

ADMIN_ID = 1936733487
EESKELA_ID = 6208034574
SUPPORT_IDS = {ADMIN_ID, EESKELA_ID}
SUPPORT_PROMPT_TEXT = ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ) ‚Äî –≤—Å—ë –¥–æ–π–¥—ë—Ç –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)
all_chat_ids = set()

def _register_message_stats(message: Message):
    stats["messages_total"] += 1
    save_stats()

    if message.chat.type == ChatType.PRIVATE:
        if message.from_user.id not in unique_users:
            unique_users.add(message.from_user.id)
            save_unique_users(unique_users)
    elif message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.chat.id not in unique_groups:
            unique_groups.add(message.chat.id)
            save_unique_groups(unique_groups)

    if message.text and message.text.startswith('/'):
        cmd = message.text.split()[0].strip().lower()
        cmd = cmd.split("@")[0].lstrip("!/")  # —É–¥–∞–ª—è–µ–º / ! –∏ @VandiliBot
        cmd = f"/{cmd}"  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        stats["commands_used"][cmd] = stats["commands_used"].get(cmd, 0) + 1
        save_stats()

# ---------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---------------------- #
async def send_admin_reply_as_single_message(admin_message: Message, user_id: int):
    sender_id = admin_message.from_user.id
    if sender_id == ADMIN_ID:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –° –≤–∞–º–∏ ‚Äî üëæ Admin:</b>"
    elif sender_id == EESKELA_ID:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –° –≤–∞–º–∏ ‚Äî üí≠ eeskela:</b>"
    else:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>"

    if admin_message.text:
        reply_text = f"{prefix}\n{admin_message.text}"
        await bot.send_message(chat_id=user_id, text=reply_text)
    elif admin_message.photo:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_photo(chat_id=user_id, photo=admin_message.photo[-1].file_id, caption=caption)
    elif admin_message.voice:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_voice(chat_id=user_id, voice=admin_message.voice.file_id, caption=caption)
    elif admin_message.video:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_video(chat_id=user_id, video=admin_message.video.file_id, caption=caption)
    elif admin_message.document:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_document(chat_id=user_id, document=admin_message.document.file_id, caption=caption)
    elif admin_message.audio:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_audio(chat_id=user_id, audio=admin_message.audio.file_id, caption=caption)
    else:
        await bot.send_message(chat_id=user_id, text=f"{prefix}\n[–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ]")

# ---------------------- –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞–ª—é—Ç –∏ –≥–æ—Ä–æ–¥–æ–≤ ---------------------- #
def normalize_currency_rus(word: str) -> str:
    word_clean = word.strip().lower()
    parsed = morph.parse(word_clean)
    if not parsed:
        return word_clean
    normal_form = parsed[0].normal_form
    return normal_form

def normalize_city_name(raw_city: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç "–ú–æ—Å–∫–≤–µ" -> "–º–æ—Å–∫–≤–∞", "–¢–∞—à–∫–µ–Ω—Ç–µ" -> "—Ç–∞—à–∫–µ–Ω—Ç" –∏ —Ç.–¥.
    –ï—Å–ª–∏ –º–æ—Ä—Ñ–æ–ø–∞—Ä—Å–µ—Ä –¥–∞—ë—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –∏–ª–∏ —Ç—É –∂–µ —Å–∞–º—É—é —Å—Ç—Ä–æ–∫—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª.
    """
    words = raw_city.split()
    norm_words = []
    for w in words:
        w_clean = w.strip(punctuation).lower()
        parsed = morph.parse(w_clean)
        if not parsed:
            norm_words.append(w_clean)
            continue
        best = parsed[0]
        if best.normal_form == w_clean or len(best.normal_form) < 2:
            norm_words.append(w_clean)
        else:
            norm_words.append(best.normal_form)
    return " ".join(norm_words)

# ---------------------- –°–ª–æ–≤–∞—Ä—å –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º –≤–∞–ª—é—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π) ---------------------- #
# –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è "–¥–æ–ª–∞—Ä" —Å –æ–¥–Ω–æ–π "–ª" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—á–∞—Ç–æ–∫
CURRENCY_SYNONYMS = {
    "–¥–æ–ª–ª–∞—Ä": "USD", "–¥–æ–ª–ª–∞—Ä—ã": "USD", "–¥–æ–ª–ª–∞—Ä–æ–≤": "USD",
    "–¥–æ–ª–∞—Ä": "USD",
    "–µ–≤—Ä–æ": "EUR",
    "—Ä—É–±–ª—å": "RUB", "—Ä—É–±–ª–∏": "RUB", "—Ä—É–±–ª–µ–π": "RUB",
    "—é–∞–Ω—å": "CNY", "—é–∞–Ω–∏": "CNY",
    "–∏–µ–Ω–∞": "JPY", "–∏–µ–Ω—ã": "JPY", "–π–µ–Ω–∞": "JPY",
    "–≤–æ–Ω": "KRW", "–≤–æ–Ω—ã": "KRW",
    "—Å—É–º": "UZS", "—Å—É–º–∞": "UZS", "—Å—É–º—ã": "UZS", "—Å—É–º–æ–≤": "UZS",
    "—Ç–µ–Ω–≥–µ": "KZT",
    "$": "USD",
    "‚Ç¨": "EUR",
    "‚ÇΩ": "RUB",
    "¬•": "JPY",
}

async def get_floatrates_rate(from_curr: str, to_curr: str) -> float:
    from_curr = from_curr.lower()
    to_curr = to_curr.lower()
    url = f"https://www.floatrates.com/daily/{from_curr}.json"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logging.warning(f"Floatrates –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è {url}")
                    return None
                data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Floatrates: {e}")
        return None
    if to_curr not in data:
        return None
    rate = data[to_curr].get("rate")
    if rate is None:
        return None
    return float(rate)

async def get_exchange_rate(amount: float, from_curr: str, to_curr: str) -> str:
    rate = await get_floatrates_rate(from_curr, to_curr)
    if rate is None:
        return None
    result = amount * rate
    today = datetime.now().strftime("%Y-%m-%d")
    return (f"–ö—É—Ä—Å {amount:.0f} {from_curr.upper()} ‚Äì {result:.2f} {to_curr.upper()} –Ω–∞ {today} üòä\n"
            "–ö—É—Ä—Å –≤ –±–∞–Ω–∫–∞—Ö –∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")

# –ù–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
# –û–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤–∏–¥–∞: "1 –¥–æ–ª–ª–∞—Ä —Å—É–º" –∏ "1 –¥–æ–ª–ª–∞—Ä –≤ —Å—É–º", –∞ —Ç–∞–∫–∂–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
EXCHANGE_PATTERN = re.compile(
    r"(?i)(\d+(?:[.,]\d+)?)[ \t]+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)(?:\s+(?:–≤|to))?\s+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)"
)

# ---------------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã ---------------------- #
async def do_geocoding_request(name: str) -> dict:
    url = f"https://geocoding-api.open-meteo.com/v1/search?name={name}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logging.warning(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è {name}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None
                geo_data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}")
        return None
    if "results" not in geo_data or not geo_data["results"]:
        return None
    best = geo_data["results"][0]
    return {
        "lat": best["latitude"],
        "lon": best["longitude"],
        "timezone": best.get("timezone", "Europe/Moscow")
    }

def simple_transliterate(s: str) -> str:
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
        '–µ': 'e', '—ë': 'yo','–∂': 'zh','–∑': 'z', '–∏': 'i',
        '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
        '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts','—á': 'ch',
        '—à': 'sh','—â': 'sch','—ä': '',  '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu','—è': 'ya'
    }
    result = []
    for ch in s:
        lower_ch = ch.lower()
        result.append(translit_map.get(lower_ch, ch))
    return "".join(result)

async def geocode_city(city_name: str) -> dict:
    city_name = city_name.strip().lower()

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —è–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    KNOWN_CITIES = {
        "–º–æ—Å–∫–≤–∞": "Europe/Moscow",
        "—Ç–∞—à–∫–µ–Ω—Ç": "Asia/Tashkent",
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Europe/Saint Petersburg",
        "–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Europe/Saint Petersburg",
        "—Å–µ—É–ª": "Asia/Seoul",
        "–∞–ª–º–∞—Ç—ã": "Asia/Almaty",
        "–∞—Å—Ç–∞–Ω–∞": "Asia/Astana"
    }

    if city_name in KNOWN_CITIES:
        return {
            "lat": 0,
            "lon": 0,
            "timezone": KNOWN_CITIES[city_name]
        }

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    result = await do_geocoding_request(city_name)
    if result:
        return result

    # 2. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Google Translate
    try:
        project_id = "gen-lang-client-0588633435"
        location = "global"
        parent = f"projects/{project_id}/locations/{location}"
        response = translate_client.translate_text(
            parent=parent,
            contents=[city_name],
            mime_type="text/plain",
            source_language_code="ru",
            target_language_code="en",
        )
        translated = response.translations[0].translated_text
        result = await do_geocoding_request(translated)
        if result:
            return result
    except Exception as e:
        logging.warning(f"[BOT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ '{city_name}': {e}")

    # 3. –ü—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
    translit_city = simple_transliterate(city_name)
    return await do_geocoding_request(translit_city)

# –ù–æ–≤—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–∞
def format_condition(condition_text: str) -> str:
    weather_emojis = {
        "—è—Å–Ω–æ": "‚òÄÔ∏è",
        "—Å–æ–ª–Ω–µ—á–Ω–æ": "‚òÄÔ∏è",
        "—Å–æ–ª–Ω–µ—á–Ω–∞—è": "‚òÄÔ∏è",  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "—Å–æ–ª–Ω–µ—á–Ω–∞—è"
        "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
        "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
        "—Ç—É–º–∞–Ω": "üå´Ô∏è",
        "–¥–æ–∂–¥—å": "üåßÔ∏è",
        "–ª–∏–≤–µ–Ω—å": "üå¶Ô∏è",
        "—Å–Ω–µ–≥": "üå®Ô∏è",
        "–≥—Ä–æ–∑–∞": "‚õàÔ∏è"
    }
    lower = condition_text.lower()
    for key, emoji in weather_emojis.items():
        if key in lower:
            return f"{condition_text.capitalize()} {emoji}"
    return f"{condition_text.capitalize()} üôÇ"

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ WeatherAPI.com
async def get_weather_info(city: str, days: int = 1, mode: str = "") -> str:
    base_url = "http://api.weatherapi.com/v1/forecast.json"
    params = {
        "key": WEATHER_API_KEY,
        "q": city,
        "days": max(days, 1),
        "lang": "ru",
        "aqi": "no",
        "alerts": "no"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url, params=params) as resp:
                if resp.status != 200:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
                data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

    if days == 1 and not mode:
        current = data.get("current", {})
        if not current:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
        condition_text = current.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        formatted_condition = format_condition(condition_text)
        temp = current.get("temp_c", "?")
        wind = current.get("wind_kph", "?")
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()} —Å–µ–π—á–∞—Å: {formatted_condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, –≤–µ—Ç–µ—Ä {wind} –∫–º/—á."
    else:
        forecast_days = data.get("forecast", {}).get("forecastday", [])
        if mode in ["–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
            index = 1 if mode == "–∑–∞–≤—Ç—Ä–∞" else 2
            if len(forecast_days) > index:
                day_info = forecast_days[index]
                date = day_info.get("date", "")
                day = day_info.get("day", {})
                condition_text = day.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                formatted_condition = format_condition(condition_text)
                mintemp = day.get("mintemp_c", "?")
                maxtemp = day.get("maxtemp_c", "?")
                return f"{date}: {formatted_condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç {mintemp}¬∞C –¥–æ {maxtemp}¬∞C."
            else:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."
        else:
            forecast_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.capitalize()}:</b>"]
            available_days = min(len(forecast_days), days)
            for i in range(available_days):
                day_info = forecast_days[i]
                date = day_info.get("date", "")
                day = day_info.get("day", {})
                condition_text = day.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                formatted_condition = format_condition(condition_text)
                mintemp = day.get("mintemp_c", "?")
                maxtemp = day.get("maxtemp_c", "?")
                forecast_lines.append(f"‚Ä¢ {date}: {formatted_condition}, –æ—Ç {mintemp}¬∞C –¥–æ {maxtemp}¬∞C")
            return "\n".join(forecast_lines)

# ---------------------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---------------------- #
async def send_voice_message(chat_id: int, text: str):
    client = texttospeech.TextToSpeechClient()

    clean_text = clean_for_tts(text)  # üí• –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—á–∏—â–∞–µ–º HTML

    synthesis_input = texttospeech.SynthesisInput(text=clean_text)

    voice = texttospeech.VoiceSelectionParams(
        language_code="ru-RU", name="ru-RU-Wavenet-C"
    )

    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.OGG_OPUS
    )

    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )

    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as out:
        out.write(response.audio_content)
        out_path = out.name

    await bot.send_voice(chat_id=chat_id, voice=FSInputFile(out_path, filename="voice.ogg"))
    os.remove(out_path)

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è thread ---------------------- #
def thread(message: Message) -> dict:
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and message.message_thread_id:
        return {"message_thread_id": message.message_thread_id}
    return {}

# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---------------------- #
from aiogram.filters import CommandObject

@dp.message(Command("start", prefix="/!"))
async def cmd_start(message: Message, command: CommandObject):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)

    # üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if command.args == "mynotes":
        await show_notes(message.chat.id, message=message)
        return
    elif command.args == "myreminders":
        await show_reminders(message.chat.id)
        return
    elif command.args == "support":
        support_mode_users.add(message.from_user.id)
        await message.answer(SUPPORT_PROMPT_TEXT)
        return

    greet = """–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ

‚Ä¢üîä–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –°–∫–∞–∂–∏ "–æ—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º" –∏–ª–∏ "–æ—Ç–≤–µ—Ç—å –≤–æ–π—Å–æ–º".
‚Ä¢üìÑ–ß–∏—Ç–∞—é PDF, DOCX, TXT –∏ .py-—Ñ–∞–π–ª—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª.
‚Ä¢‚ùì–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞.
‚Ä¢üë®‚Äçüíª–ü–æ–º–æ–≥–∞—é —Å –∫–æ–¥–æ–º ‚Äî –Ω–∞–ø–∏—à–∏ #—Ä–µ—Ñ–∞–∫—Ç–æ—Ä –∏ –≤—Å—Ç–∞–≤—å –∫–æ–¥.
‚Ä¢üèû–ü–æ–∫–∞–∑—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
‚Ä¢‚òÄÔ∏è–ü–æ–≥–æ–¥–∞: —Å–ø—Ä–æ—Å–∏ "–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ" –∏–ª–∏ "–ø–æ–≥–æ–¥–∞ –≤ –í–∞—Ä—à–∞–≤–µ –Ω–∞ 3 –¥–Ω—è"
‚Ä¢üí±–ö—É—Ä—Å –≤–∞–ª—é—Ç: —É–∑–Ω–∞–π –∫—É—Ä—Å "100 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª—è—Ö", "100 USD –≤ KRW" –∏ —Ç.–¥. 
‚Ä¢üìù –ó–∞–º–µ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /mynotes ‚Äî —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏. 
‚Ä¢‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∫–æ–º–∞–Ω–¥–∞ /myreminders ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ—à–∞–≥–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–¥–∞—Ç–∞ ‚Üí –≤—Ä–µ–º—è ‚Üí —Ç–µ–∫—Å—Ç).
‚Ä¢üîé–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã /help –∏ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"""

    # üåê –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.chat.id in disabled_chats:
            disabled_chats.remove(message.chat.id)
            save_disabled_chats(disabled_chats)
            logging.info(f"[BOT] –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
        await message.answer("–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ")
        await message.answer(greet)
        return

    # üì© –ï—Å–ª–∏ –≤ –õ–°
    await message.answer(greet)

@dp.message(Command("stop", prefix="/!"))
async def cmd_stop(message: Message, command: CommandObject):
    _register_message_stats(message)
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        disabled_chats.add(message.chat.id)
        save_disabled_chats(disabled_chats)
        logging.info(f"[BOT] –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
        await message.answer("–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ üö´")
    else:
        await message.answer("–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω üö´")
        
@dp.message(Command("help"))
async def cmd_help(message: Message):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)
    if message.chat.type == ChatType.PRIVATE:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support_request")]]
        )
        await bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:", reply_markup=keyboard, **thread(message))
    else:
        private_url = f"https://t.me/{BOT_USERNAME}?start=support"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=private_url)]]
        )
        await bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:", reply_markup=keyboard, **thread(message))

@dp.message(Command("adminstats"))
async def cmd_adminstats(message: Message):
    _register_message_stats(message)
    if message.from_user.id not in SUPPORT_IDS:
        return

    total_msgs = stats.get("messages_total", 0)
    unique_users_list = stats.get("unique_users", [])
    unique_users_count = len(set(unique_users_list))
    files_received = stats.get("files_received", 0)
    cmd_usage = stats.get("commands_used", {})

    total_cmds = sum(cmd_usage.values())
    avg_per_user = round(total_msgs / unique_users_count, 2) if unique_users_count else "‚Äî"

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_msgs}</b>\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{unique_users_count}</b>\n"
        f"üìé –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: <b>{files_received}</b>\n"
        f"üß† –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{total_cmds}</b>\n"
        f"üìà –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{avg_per_user}</b>"
    )

    chart_path = render_top_commands_bar_chart(cmd_usage)
    if chart_path:
        await message.answer_photo(photo=FSInputFile(chart_path, filename="top_commands.png"), caption=text)
        os.remove(chart_path)
    else:
        await message.answer(text + "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    _register_message_stats(message)
    if message.from_user.id != ADMIN_ID:
        return
    broadcast_prefix = "<b>Admin Message:</b>"
    if message.reply_to_message:
        broadcast_msg = message.reply_to_message
    else:
        text_parts = message.text.split(maxsplit=1)
        if len(text_parts) < 2:
            await message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        broadcast_text = text_parts[1]
        broadcast_msg = None

    recipients = unique_users.union(unique_groups)
    for recipient in recipients:
        try:
            if broadcast_msg:
                if broadcast_msg.text:
                    await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n{broadcast_msg.text}")
                elif broadcast_msg.photo:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_photo(chat_id=recipient, photo=broadcast_msg.photo[-1].file_id, caption=caption)
                elif broadcast_msg.video:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_video(chat_id=recipient, video=broadcast_msg.video.file_id, caption=caption)
                elif broadcast_msg.voice:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_voice(chat_id=recipient, voice=broadcast_msg.voice.file_id, caption=caption)
                elif broadcast_msg.document:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_document(chat_id=recipient, document=broadcast_msg.document.file_id, caption=caption)
                elif broadcast_msg.audio:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_audio(chat_id=recipient, audio=broadcast_msg.audio.file_id, caption=caption)
                else:
                    await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n[–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ]")
            else:
                await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n{broadcast_text}")
        except Exception as e:
            logging.warning(f"[BROADCAST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {recipient}: {e}")
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.callback_query(F.data == "support_request")
async def handle_support_click(callback: CallbackQuery):
    await callback.answer()
    support_mode_users.add(callback.from_user.id)
    await callback.message.answer(SUPPORT_PROMPT_TEXT)

# ‚òÖ –ò–∑–º–µ–Ω—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mynotes ‚Äì —Ç–µ–ø–µ—Ä—å –±–µ–∑ prefix, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
@dp.message(Command("mynotes"))
async def show_notes_command(message: Message):
    _register_message_stats(message)
    if message.chat.type != ChatType.PRIVATE:
        private_url = f"https://t.me/{BOT_USERNAME}?start=mynotes"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏", url=private_url)]
        ])
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", reply_markup=keyboard)
        return
    await show_notes(message.chat.id)

@dp.message(Command("myreminders", prefix="/!"))
async def show_reminders_command(message: Message):
    _register_message_stats(message)
    if message.chat.type != ChatType.PRIVATE:
        private_url = f"https://t.me/{BOT_USERNAME}?start=myreminders"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", url=private_url)]
        ])
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", reply_markup=keyboard)
        return
    await show_reminders(message.chat.id)


@dp.callback_query(F.data.startswith("note_type:"))
async def handle_note_type_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    choice = callback.data.split(":")[1]
    original_text = pending_note_or_reminder.pop(user_id, None)

    if not original_text:
        await callback.message.edit_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    await callback.answer()

    if choice == "note":
        user_notes[user_id].append(original_text)
        save_notes()
        await callback.message.edit_text("üìù –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É.")
    elif choice == "reminder":
        await callback.message.edit_text(
            "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —Ç–∞–∫: ¬´–Ω–∞–ø–æ–º–Ω–∏ {—Ç–µ–∫—Å—Ç} –ø–æ –ú–æ—Å–∫–≤–µ¬ª, —á—Ç–æ–±—ã —è —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –ø–æ –ú–æ—Å–∫–≤–µ</i>"
        )

@dp.message(lambda message: message.text and message.text.lower().startswith("–º–æ–π"))
async def handle_timezone_setting(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    tz_match = re.match(r"(?i)^–º–æ–π\s+(–≥–æ—Ä–æ–¥|—á–∞—Å–æ–≤–æ–π\s+–ø–æ—è—Å)\s*[:\-‚Äî]?\s*(.+?)\s*[!.\-‚Ä¶]*\s*$", text)
    if not tz_match:
        await message.answer(
            "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ú–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow</b>\n"
            "–∏–ª–∏\n"
            "<b>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</b>",
            parse_mode="HTML"
        )
        return

    setting_type = tz_match.group(1).lower()
    value = tz_match.group(2).strip()

    if "–≥–æ—Ä–æ–¥" in setting_type:
        value = normalize_city_name(value)
        geo = await geocode_city(value)
        if not geo or "timezone" not in geo:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è <b>{value}</b>.\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å: <code>–ú–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Warsaw</code>"
            )
            return
        tz_str = geo["timezone"]

        user_timezones[user_id] = tz_str
        save_timezones(user_timezones)

        await message.answer(
            f"–ó–∞–ø–æ–º–Ω–∏–ª: <b>{value.capitalize()}</b> ‚úÖ\n"
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>{tz_str}</code> –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

    else:
        tz_str = value
        user_timezones[user_id] = tz_str
        save_timezones(user_timezones)

        await message.answer(
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{tz_str}</code>. "
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

    # üîß –®–ê–ì 2: –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –æ–∂–∏–¥–∞—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    reminder_data = pending_note_or_reminder.get(user_id)
    if reminder_data and not reminder_data.get("was_retried"):
        pending_note_or_reminder[user_id]["was_retried"] = True
        prev_text = reminder_data["text"]
        await handle_reminder(
            type("FakeMessage", (object,), {
                "from_user": type("U", (), {"id": user_id})(),
                "text": prev_text,
                "answer": message.answer
            })
        )

@dp.message(lambda message: message.voice is not None)
async def handle_voice_message(message: Message):
    _register_message_stats(message)
    await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        file = await bot.get_file(message.voice.file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                voice_bytes = await resp.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmpf:
            tmpf.write(voice_bytes)
            ogg_path = tmpf.name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    try:
        audio = AudioSegment.from_file(ogg_path, format="ogg")
        wav_path = ogg_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        os.remove(ogg_path)
        return
    finally:
        os.remove(ogg_path)
    recognizer = sr.Recognizer()
    recognized_text = ""
    try:
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            recognized_text = recognizer.recognize_google(audio_data, language="ru-RU")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    os.remove(wav_path)
    if not recognized_text:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòî")
        return
    voice_regex = re.compile(r"(–æ—Ç–≤–µ—Ç—å\s+(–≤–æ–π—Å–æ–º|–≥–æ–ª–æ—Å–æ–º)|–≥–æ–ª–æ—Å–æ–º\s+–æ—Ç–≤–µ—Ç—å)", re.IGNORECASE)
    voice_response_requested = bool(voice_regex.search(recognized_text))
    cleaned_text = voice_regex.sub("", recognized_text).strip()
    await handle_msg(message, recognized_text=cleaned_text, voice_response_requested=voice_response_requested)

@dp.callback_query(F.data.startswith("note_delete:"))
async def delete_note(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    notes = user_notes.get(uid, [])
    if 0 <= index < len(notes):
        notes.pop(index)
        save_notes()
    await show_notes(uid)

@dp.callback_query(F.data == "note_delete_all")
async def delete_all_notes(callback: CallbackQuery):
    uid = callback.from_user.id
    user_notes[uid] = []
    save_notes()
    await show_notes(uid, callback=callback)

@dp.callback_query(F.data == "note_add")
async def ask_add_note(callback: CallbackQuery):
    await callback.message.delete()
    uid = callback.from_user.id
    pending_note_or_reminder[uid] = {"type": "note"}
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É.")

@dp.callback_query(F.data.startswith("note_edit:"))
async def ask_edit_note(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    notes = user_notes.get(uid, [])
    if 0 <= index < len(notes):
        pending_note_or_reminder[uid] = {"type": "edit_note", "index": index}
        await callback.message.answer(f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ‚Ññ{index+1}.")
    else:
        await callback.message.answer("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.callback_query(F.data == "note_close")
async def close_notes(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data.startswith("reminder_delete:"))
async def delete_reminder(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    user_reminders = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]
    if 0 <= index < len(user_reminders):
        real_index = user_reminders[index][0]
        reminders.pop(real_index)
        save_reminders()
    await show_reminders(uid, callback=callback)

@dp.callback_query(F.data.startswith("reminder_edit:"))
async def ask_edit_reminder(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    user_reminders = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]

    if 0 <= index < len(user_reminders):
        real_index = user_reminders[index][0]
        old_uid, old_dt, old_text = reminders[real_index]

        await state.update_data(reminder_index=real_index, old_text=old_text, old_dt=old_dt)
        await state.set_state(ReminderEdit.waiting_for_new_text)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_text")]
        ])
        await callback.message.answer(
            f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>:\n\n"
            f"üìå <i>{old_text}</i>",
            reply_markup=keyboard
        )

    else:
        await callback.message.answer("–¢–∞–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ—Ç.")

@dp.message(ReminderEdit.waiting_for_new_text)
async def edit_reminder_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    data = await state.get_data()
    await state.update_data(new_text=None if new_text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else new_text)
    await state.set_state(ReminderEdit.waiting_for_new_date)

    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(message.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_date")]
    ])
    await message.answer(
        f"üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <code>{old_local.strftime('%d.%m.%Y')}</code>",
        reply_markup=keyboard
    )


@dp.message(ReminderEdit.waiting_for_new_date)
async def edit_reminder_date(message: Message, state: FSMContext):
    raw = message.text.strip()
    data = await state.get_data()

    if raw.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_date=None)
        await state.set_state(ReminderEdit.waiting_for_new_time)
        old_dt = data.get("old_dt")
        old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(message.from_user.id, "UTC")))
        await message.answer(
            f"‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>,\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>{old_local.strftime('%H:%M')}</code>"
        )
        return

    try:
        date_obj = datetime.strptime(raw, "%d.%m.%Y").date()
        await state.update_data(new_date=date_obj)
        await state.set_state(ReminderEdit.waiting_for_new_time)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_time")]
        ])
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")

@dp.message(ReminderEdit.waiting_for_new_time)
async def edit_reminder_time(message: Message, state: FSMContext):
    user_id = message.from_user.id
    raw = message.text.strip()
    data = await state.get_data()

    old_dt: datetime = data.get("old_dt")
    old_text: str = data.get("old_text")
    index: int = data.get("reminder_index")
    new_text = data.get("new_text") or old_text
    new_date = data.get("new_date") or old_dt.astimezone(pytz.timezone(user_timezones.get(user_id, "UTC"))).date()

    if raw.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        new_time = old_dt.astimezone(pytz.timezone(user_timezones.get(user_id, "UTC"))).time()
    else:
        try:
            new_time = datetime.strptime(raw, "%H:%M").time()
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: <code>15:30</code>")
            return

    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ù–∞–ø–∏—à–∏: <code>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</code>")
        await state.clear()
        return

    try:
        local_tz = pytz.timezone(tz_str)
        dt_local = datetime.combine(new_date, new_time)
        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)

        reminders[index] = (user_id, dt_utc, new_text)
        save_reminders()
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_text}</b> ‚Äî <code>{dt_local.strftime('%d.%m.%Y %H:%M')}</code> ({tz_str})")
    except Exception as e:
        logging.warning(f"[REMINDER_EDIT] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    await state.clear()


@dp.callback_query(F.data == "edit_skip_text")
async def skip_edit_text(callback: CallbackQuery, state: FSMContext):
    await state.update_data(new_text=None)
    data = await state.get_data()
    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(callback.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_date")]
    ])
    await state.set_state(ReminderEdit.waiting_for_new_date)
    await callback.message.edit_text(
        f"üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <code>{old_local.strftime('%d.%m.%Y')}</code>",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "edit_skip_date")
async def skip_edit_date(callback: CallbackQuery, state: FSMContext):
    await state.update_data(new_date=None)
    data = await state.get_data()
    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(callback.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_time")]
    ])
    await state.set_state(ReminderEdit.waiting_for_new_time)
    await callback.message.edit_text(
        f"‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>{old_local.strftime('%H:%M')}</code>",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "edit_skip_time")
async def skip_edit_time(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    message.from_user = callback.from_user  # —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å message-—Ö–µ–Ω–¥–ª–µ—Ä
    await edit_reminder_time(message, state)


@dp.callback_query(F.data == "reminder_delete_all")
async def confirm_delete_all_reminders(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reminder_cancel_delete_all"),
            InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="reminder_confirm_delete_all")
        ]
    ])
    await callback.message.answer("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å <b>–≤—Å–µ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", reply_markup=keyboard)

@dp.callback_query(F.data == "reminder_confirm_delete_all")
async def do_delete_all_reminders(callback: CallbackQuery):
    uid = callback.from_user.id
    global reminders
    reminders = [r for r in reminders if r[0] != uid]
    save_reminders()
    await show_reminders(uid, callback=callback)

@dp.callback_query(F.data == "reminder_cancel_delete_all")
async def cancel_delete_all_reminders(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(F.data == "reminder_close")
async def close_reminders(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data == "reminder_add")
async def start_reminder_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")
    await state.set_state(ReminderAdd.waiting_for_date)

@dp.message(ReminderAdd.waiting_for_date)
async def process_reminder_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(date=date_obj)
        await message.answer("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n–ü—Ä–∏–º–µ—Ä: <code>15:30</code>")
        await state.set_state(ReminderAdd.waiting_for_time)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")

@dp.message(ReminderAdd.waiting_for_time)
async def process_reminder_time(message: Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text.strip(), "%H:%M").time()
        await state.update_data(time=time_obj)
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å)")
        await state.set_state(ReminderAdd.waiting_for_text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: <code>15:30</code>")

@dp.message(ReminderAdd.waiting_for_text)
async def process_reminder_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    date = data.get("date")
    time = data.get("time")
    text = message.text.strip()

    if not date or not time:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    dt_local = datetime.combine(date, time)
    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚è≥ –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏:\n<code>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</code>")
        pending_note_or_reminder[user_id] = {
            "text": text,
            "type": "reminder",
            "date": date,
            "time": time
        }
        await state.clear()
        return

    try:
        local_tz = pytz.timezone(tz_str)
        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)
    except Exception as e:
        logging.warning(f"[FSM] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å—ë –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        await state.clear()
        return

    reminders.append((user_id, dt_utc, text))
    save_reminders()
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <code>{dt_local.strftime('%Y-%m-%d %H:%M')}</code> ({tz_str})")
    await state.clear()

from datetime import timedelta

async def handle_reminder(message: Message):
    user_id = message.from_user.id
    reminder_data = pending_note_or_reminder.pop(user_id, None)
    if not reminder_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        return

    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")
        return

    try:
        local_tz = pytz.timezone(tz_str)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        date = reminder_data.get("date")
        time = reminder_data.get("time")
        if date and time:
            dt_local = datetime.combine(date, time)
        else:
            # –ò–Ω–∞—á–µ ‚Äî –±–ª–∏–∂–∞–π—à–∞—è –º–∏–Ω—É—Ç–∞
            dt_local = datetime.now(local_tz) + timedelta(minutes=1)

        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)

        reminders.append((user_id, dt_utc, reminder_data["text"]))
        save_reminders()
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <code>{dt_local.strftime('%Y-%m-%d %H:%M')}</code> ({tz_str})")
    except Exception as e:
        logging.warning(f"[DELAYED_REMINDER] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

@dp.message()
async def handle_all_messages(message: Message):
    user_input = (message.text or "").strip()
    await handle_all_messages_impl(message, user_input)

# ‚òÖ –ò–∑–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_notes ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫, –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async def show_notes(uid: int, callback: CallbackQuery = None, message: Message = None):
    notes = user_notes.get(uid, [])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    try:
        if callback:
            await callback.message.delete()
        elif message:
            await message.delete()
    except:
        pass

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if not notes:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="note_add")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="note_close")]
        ])
        await bot.send_message(uid, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=keyboard)
        return

    text = "<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n"
    buttons = []
    for i, note in enumerate(notes):
        text += f"{i+1}. {note}\n"
        buttons.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è {i+1}", callback_data=f"note_edit:{i}"),
            InlineKeyboardButton(text=f"üóë {i+1}", callback_data=f"note_delete:{i}")
        ])
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="note_add"),
        InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="note_delete_all")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="note_close")
    ])
    await bot.send_message(uid, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def show_reminders(uid: int, callback: CallbackQuery = None):
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
    global reminders
    reminders = [r for r in reminders if not (r[0] == uid and r[1] <= now_utc)]
    save_reminders()
    
    user_rem = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]
    if callback:
        try:
            await callback.message.delete()
        except:
            pass

    if not user_rem:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="reminder_add")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder_close")]
        ])
        await bot.send_message(uid, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=keyboard)
        return
    text = "<b>–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
    buttons = []
    for i, (real_i, (_, dt, msg)) in enumerate(user_rem):
        local = dt.astimezone(pytz.timezone(user_timezones.get(uid, "UTC")))
        text += f"{i+1}. {msg} ‚Äî <code>{local.strftime('%d.%m.%Y %H:%M')}</code>\n"
        buttons.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è {i+1}", callback_data=f"reminder_edit:{i}"),
            InlineKeyboardButton(text=f"üóë {i+1}", callback_data=f"reminder_delete:{i}")
        ])
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="reminder_add"),
        InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="reminder_delete_all")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder_close")
    ])
    await bot.send_message(uid, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def handle_all_messages_impl(message: Message, user_input: str):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)
    uid = message.from_user.id
    cid = message.chat.id

    voice_response_requested = False  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UnboundLocalError
    if uid in pending_note_or_reminder:
        data = pending_note_or_reminder.pop(uid)
        if data["type"] == "note":
            user_notes[uid].append(user_input)
            save_notes()
            await show_notes(uid)
            return
        elif data["type"] == "edit_note":
            index = data.get("index")
            if index is not None and 0 <= index < len(user_notes.get(uid, [])):
                user_notes[uid][index] = user_input
                save_notes()
                await show_notes(uid)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.from_user.id in SUPPORT_IDS and message.reply_to_message:
        original_id = message.reply_to_message.message_id
        if (message.chat.id, original_id) in support_reply_map:
            user_id = support_reply_map[(message.chat.id, original_id)]
            try:
                await send_admin_reply_as_single_message(message, user_id)
                if message.from_user.id != ADMIN_ID:
                    sender = message.from_user
                    sender_name = sender.full_name
                    sender_username = f"@{sender.username}" if sender.username else f"(ID: <code>{sender.id}</code>)"
                    try:
                        user = await bot.get_chat(user_id)
                        user_name = user.full_name
                        user_username = f"@{user.username}" if user.username else f"(ID: <code>{user.id}</code>)"
                    except Exception:
                        user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        user_username = f"(ID: <code>{user_id}</code>)"
                    text_preview = message.text or "[–º–µ–¥–∏–∞]"
                    await bot.send_message(
                        chat_id=ADMIN_ID,
                        text=(
                            f"üëÅ <b>{sender_name}</b> {sender_username} –æ—Ç–≤–µ—Ç–∏–ª <b>{user_name}</b> {user_username}:\n\n"
                            f"{escape(text_preview)}"
                        )
                    )
                    
            except Exception as e:
                logging.warning(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    if uid in support_mode_users:
        support_mode_users.discard(uid)
        try:
            caption = message.caption or user_input or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            username_part = f" (@{message.from_user.username})" if message.from_user.username else ""
            content = (f"\u2728 <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç <b>{message.from_user.full_name}</b>{username_part} "
                       f"(id: <code>{uid}</code>):\n\n{caption}")
            sent_msg = None
            if message.photo:
                file = await bot.get_file(message.photo[-1].file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        photo_bytes = await resp.read()
                sent_msg = await bot.send_photo(chat_id=ADMIN_ID, photo=BufferedInputFile(photo_bytes, filename="image.jpg"), caption=content)
            elif message.video:
                file = await bot.get_file(message.video.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        video_bytes = await resp.read()
                sent_msg = await bot.send_video(chat_id=ADMIN_ID, video=BufferedInputFile(video_bytes, filename="video.mp4"), caption=content)
            else:
                for support_id in SUPPORT_IDS:
                    try:
                        sent_msg = await bot.send_message(chat_id=support_id, text=content)
                        support_reply_map[(sent_msg.chat.id, sent_msg.message_id)] = uid
                        save_support_map()
                    except Exception as e:
                        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ({support_id}): {e}")
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception as e:
            logging.warning(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –ï—Å–ª–∏ –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if cid in disabled_chats:
            return
        # –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ: –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –µ–≥–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–∏ reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lower_text = user_input.lower()
        mentioned = any(keyword in lower_text for keyword in ["–≤–∞–π", "vai", "–≤—ç–π"])
        reply_to_bot = (message.reply_to_message and 
                        message.reply_to_message.from_user and 
                        message.reply_to_message.from_user.username and 
                        message.reply_to_message.from_user.username.lower() == BOT_USERNAME.lower())
        if not (mentioned or reply_to_bot):
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if message.document:
        stats["files_received"] += 1
        file = await bot.get_file(message.document.file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                file_bytes = await resp.read()
        text = extract_text_from_file(message.document.file_name, file_bytes)
        if text:
            user_documents[uid] = text
            await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º
    voice_regex = re.compile(r"(–æ—Ç–≤–µ—Ç—å\s+(–≤–æ–π—Å–æ–º|–≥–æ–ª–æ—Å–æ–º)|–≥–æ–ª–æ—Å–æ–º\s+–æ—Ç–≤–µ—Ç—å)", re.IGNORECASE)
    if voice_regex.search(user_input):
        voice_response_requested = True
        user_input = voice_regex.sub("", user_input)
    
    lower_input = user_input.lower()

    logging.info(f"[DEBUG] cid={cid}, text='{user_input}'")

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    exchange_match = EXCHANGE_PATTERN.search(lower_input)
    if exchange_match:
        amount_str = exchange_match.group(1).replace(',', '.')
        try:
            amount = float(amount_str)
        except:
            amount = 0
        from_curr_raw = exchange_match.group(2)
        to_curr_raw = exchange_match.group(3)
    
        from_curr_lemma = normalize_currency_rus(from_curr_raw)
        to_curr_lemma = normalize_currency_rus(to_curr_raw)
    
        from_curr = CURRENCY_SYNONYMS.get(from_curr_lemma, from_curr_lemma.upper())
        to_curr = CURRENCY_SYNONYMS.get(to_curr_lemma, to_curr_lemma.upper())
    
        exchange_text = await get_exchange_rate(amount, from_curr, to_curr)
        if exchange_text is not None:
            if voice_response_requested:
                await send_voice_message(cid, exchange_text)
            else:
                await message.answer(exchange_text)
            return

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WeatherAPI
    weather_pattern = r"–ø–æ–≥–æ–¥–∞(?:\s+–≤)?\s+([a-z–∞-—è—ë\-\s]+?)(?:\s+(?:–Ω–∞\s+(\d+)\s+–¥–Ω(?:—è|–µ–π)|–Ω–∞\s+(–Ω–µ–¥–µ–ª—é)|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞))?$"
    weather_match = re.search(weather_pattern, lower_input, re.IGNORECASE)
    if weather_match:
        city_raw = weather_match.group(1).strip()
        days_part = weather_match.group(2)
        week_flag = weather_match.group(3)
        mode_flag = re.search(r"(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)", lower_input)  # –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        
        city_norm = normalize_city_name(city_raw)
        
        if week_flag:
            days = 7
            mode = ""
        elif mode_flag:
            days = 2
            mode = mode_flag.group(1)
        else:
            days = int(days_part) if days_part else 1
            mode = ""
        
        weather_info = await get_weather_info(city_norm, days, mode)
        if not weather_info:
            weather_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
        if voice_response_requested:
            await send_voice_message(cid, weather_info)
        else:
            await message.answer(weather_info)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∞–π–ª—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø–æ—Å–ª–µ return)
    if uid in user_documents:
        file_content = user_documents[uid]
        prompt_with_file = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n\n{file_content}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å:\n\n{user_input}\n\n"
                            f"–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞.")
        gemini_text = await generate_and_send_gemini_response(cid, prompt_with_file, False, "", "")

        if voice_response_requested:
            await send_voice_message(cid, gemini_text)
        else:
            await message.answer(gemini_text)
        return

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —Å—é–¥–∞:
    gemini_text = await handle_msg(message, user_input, voice_response_requested)
    if not gemini_text:
        return

    if voice_response_requested:
        await send_voice_message(cid, gemini_text)
    else:
        await message.answer(gemini_text)
    return

def split_smart(text: str, limit: int) -> list[str]:
    results = []
    start = 0
    length = len(text)
    while start < length:
        remain = length - start
        if remain <= limit:
            results.append(text[start:].strip())
            break
        candidate = text[start : start+limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                cut_pos = len(candidate)
        else:
            cut_pos += 1
        chunk = text[start : start+cut_pos].strip()
        if chunk:
            results.append(chunk)
        start += cut_pos
    return [x for x in results if x]

CAPTION_LIMIT = 950
TELEGRAM_MSG_LIMIT = 4096

def split_caption_and_text(text: str) -> tuple[str, list[str]]:
    if len(text) <= CAPTION_LIMIT:
        return text, []
    chunks_950 = split_smart(text, CAPTION_LIMIT)
    caption = chunks_950[0]
    leftover = " ".join(chunks_950[1:]).strip()
    if not leftover:
        return caption, []
    rest = split_smart(leftover, TELEGRAM_MSG_LIMIT)
    return caption, rest

def format_gemini_response(text: str) -> str:
    code_blocks = {}
    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = f'<pre><code class="language-{lang}">{code}</code></pre>'
        return placeholder

    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)
    text = escape(text)
    for placeholder, block_html in code_blocks.items():
        text = text.replace(escape(placeholder), block_html)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r"\[.*?(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—Ä–∏—Å—É–Ω–æ–∫).+?\]", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(–Ø —è–≤–ª—è—é—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.*–≤—ã–≤–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I am a text-based model.*cannot directly show images\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I can‚Äôt show images directly\.)", "", text, flags=re.IGNORECASE)

    lines = text.split('\n')
    new_lines = []
    for line in lines:
        stripped = line.lstrip()
        prefix_len = len(line) - len(stripped)
        if stripped.startswith('* ') and not stripped.startswith('**'):
            replaced_line = (' ' * prefix_len) + '‚Ä¢ ' + stripped[2:]
            new_lines.append(replaced_line)
        else:
            new_lines.append(line)
    text = '\n'.join(new_lines).strip()

    text = re.sub(r"(?i)\bi am a large language model\b", "I am VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bi'm a large language model\b", "I'm VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bgoogle\b", "Vandili", text)
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å(?:.*?)(?=\.)", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è\s*‚Äî\s*–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø ‚Äî VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)

    return text

IMAGE_TRIGGERS_RU = ["–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ"]
NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = ["–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
                 "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                 "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π <i>Vandili</i> üòé",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–∏—Ö üòâ",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω–∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ ‚ú®",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –¥–∞–ª–∏ –º–Ω–µ –∂–∏–∑–Ω—å ü§ù",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ ü§ó",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω–∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ üòá"
]

RU_EN_DICT = {
    "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
    "—Ç–∏–≥—Ä": "tiger",
    "–∫–æ—à–∫–∞": "cat",
    "—Å–æ–±–∞–∫–∞": "dog",
    "–ø–µ–π–∑–∞–∂": "landscape",
    "—á–∞–π–∫–∞": "seagull",
    "–ø–∞—Ä–∏–∂": "paris",
    "—É—Ç–∫–æ–Ω–æ—Å": "platypus",
    "–ø—É–¥–µ–ª—å": "poodle",
    "–º–µ–¥–æ–µ–¥": "honey badger"
}

async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    if not prompt:
        return None
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logging.warning(f"Unsplash returned status {response.status} for prompt '{prompt}'")
                    return None
                data = await response.json()
                if "urls" not in data or "regular" not in data["urls"]:
                    logging.warning(f"No 'regular' URL in response for '{prompt}': {data}")
                    return None
                return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

def fallback_translate_to_english(rus_word: str) -> str:
    try:
        project_id = "gen-lang-client-0588633435"
        location = "global"
        parent = f"projects/{project_id}/locations/{location}"
        response = translate_client.translate_text(
            parent=parent,
            contents=[rus_word],
            mime_type="text/plain",
            source_language_code="ru",
            target_language_code="en",
        )
        return response.translations[0].translated_text
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ '{rus_word}': {e}")
        return rus_word

async def generate_short_caption(rus_word: str) -> str:
    short_prompt = (
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –¢—ã ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ Google. –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–ª–æ–≤.\n\n"
        f"–ó–ê–î–ê–ß–ê: –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å ¬´{rus_word}¬ª. "
        "–ú–æ–∂–Ω–æ —Å –ª—ë–≥–∫–æ–π —ç–º–æ—Ü–∏–µ–π –∏–ª–∏ —é–º–æ—Ä–æ–º, –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤."
    )
    try:
        response = await model.generate_content_async([
            {"role": "user", "parts": [short_prompt]}
        ])
        caption = format_gemini_response(response.text.strip())
        return caption
    except Exception as e:
        logging.error(f"[BOT] Error generating short caption: {e}")
        return rus_word.capitalize()

def parse_russian_show_request(user_text: str):
    lower_text = user_text.lower()
    triggered = any(trig in lower_text for trig in IMAGE_TRIGGERS_RU)
    if not triggered:
        return (False, "", "", user_text)
    match = re.search(r"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+([\w\d]+)", lower_text)
    if match:
        raw_rus_word = match.group(3)
        raw_rus_word_clean = raw_rus_word.strip(punctuation)
        parsed = morph.parse(raw_rus_word_clean)
        if parsed:
            rus_normal = parsed[0].normal_form
        else:
            rus_normal = raw_rus_word_clean
        rus_word = rus_normal
    else:
        rus_word = ""
        raw_rus_word = ""
    if raw_rus_word:
        pattern_remove = rf"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+{re.escape(raw_rus_word)}"
        leftover = re.sub(pattern_remove, "", user_text, flags=re.IGNORECASE).strip()
    else:
        leftover = user_text
    RU_EN_DICT_CUSTOM = {
        "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
        "—Ç–∏–≥—Ä": "tiger",
        "–∫–æ—à–∫–∞": "cat",
        "—Å–æ–±–∞–∫–∞": "dog",
        "–ø–µ–π–∑–∞–∂": "landscape",
        "—á–∞–π–∫–∞": "seagull",
        "–ø–∞—Ä–∏–∂": "paris",
        "—É—Ç–∫–æ–Ω–æ—Å": "platypus",
        "–ø—É–¥–µ–ª—å": "poodle",
        "–º–µ–¥–æ–µ–¥": "honey badger"
    }
    if rus_word in RU_EN_DICT_CUSTOM:
        en_word = RU_EN_DICT_CUSTOM[rus_word]
    else:
        en_word = fallback_translate_to_english(rus_word)
    return (True, rus_word, en_word, leftover) if rus_word else (False, "", "", user_text)

# ---------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_msg ---------------------- #
async def handle_msg(message: Message, recognized_text: str = None, voice_response_requested: bool = False):
    cid = message.chat.id
    user_input = recognized_text or (message.text or "").strip()

    lower_inp = user_input.lower()
    if any(nc in lower_inp for nc in NAME_COMMANDS):
        answer = "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>! ü§ñ"
        if voice_response_requested:
            await send_voice_message(cid, answer)
        else:
            await message.answer(answer)
        return

    if any(ic in lower_inp for ic in INFO_COMMANDS):
        reply_text = random.choice(OWNER_REPLIES)
        if voice_response_requested:
            await send_voice_message(cid, reply_text)
        else:
            await message.answer(reply_text)
        return

    show_image, rus_word, image_en, leftover = parse_russian_show_request(user_input)
    if show_image and rus_word:
        leftover = re.sub(r"\b(–≤–∞–π|vai)\b", "", leftover, flags=re.IGNORECASE).strip()

    leftover = leftover.strip()
    full_prompt = f"{rus_word} {leftover}".strip() if rus_word else leftover

    image_url = None
    if show_image:
        image_url = await get_unsplash_image_url(image_en, UNSPLASH_ACCESS_KEY)

    gemini_text = await generate_and_send_gemini_response(cid, full_prompt, show_image, rus_word, leftover)

    if voice_response_requested:
        if not gemini_text:
            gemini_text = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        await send_voice_message(cid, gemini_text)
        return

    if image_url:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(image_url) as r:
                if r.status == 200:
                    photo_bytes = await r.read()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                        tmpf.write(photo_bytes)
                        tmp_path = tmpf.name
                    try:
                        await bot.send_chat_action(chat_id=cid, action="upload_photo")
                        file = FSInputFile(tmp_path, filename="image.jpg")
                        caption, rest = split_caption_and_text(gemini_text or "...")
                        await bot.send_photo(chat_id=cid, photo=file, caption=caption if caption else "...", **thread(message))
                        for c in rest:
                            await bot.send_message(chat_id=cid, text=c, **thread(message))
                    finally:
                        os.remove(tmp_path)
    elif gemini_text:
        chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
        for c in chunks:
            await message.answer(c)

@dp.message(F.text.lower().startswith("–≤–∞–π –ø–æ–∫–∞–∂–∏"))
async def group_show_request(message: Message):
    user_input = message.text.strip()
    await handle_msg(message, recognized_text=user_input, voice_response_requested=False)

async def generate_and_send_gemini_response(cid, full_prompt, show_image, rus_word, leftover):
    gemini_text = ""
    analysis_keywords = [
        "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–Ω–∞ –∫–æ–≥–æ", "–∫—Ç–æ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–≤–ª–∏—è–Ω–∏–µ",
        "—Ñ–∏–ª–æ—Å–æ—Ñ", "–æ—Ç—Ä–∏—Ü–∞–ª", "–ø–æ–≤–ª–∏—è–ª", "—Å–º—ã—Å–ª", "—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º", "–æ–ø—Ä–æ–≤–µ—Ä–≥"
    ]
    needs_expansion = any(k in full_prompt.lower() for k in analysis_keywords)
    if needs_expansion:
        smart_prompt = ("–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é. "
                        "–ü—Ä–∏–≤–æ–¥–∏ –∏–º–µ–Ω–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å:\n\n")
        full_prompt = smart_prompt + full_prompt

    if show_image and rus_word and not leftover:
        gemini_text = await generate_short_caption(rus_word)
        return gemini_text

    conversation = chat_history.setdefault(cid, [])
    conversation.append({"role": "user", "parts": [full_prompt]})
    if len(conversation) > 8:
        conversation.pop(0)
    try:
        await bot.send_chat_action(chat_id=cid, action="typing")
        resp = model.generate_content(conversation)
        if not resp.candidates:
            reason = getattr(resp.prompt_feedback, "block_reason", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            logging.warning(f"[BOT] –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini: –ø—Ä–∏—á–∏–Ω–∞ ‚Äî {reason}")
            gemini_text = f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        else:
            raw_model_text = resp.text
            gemini_text = format_gemini_response(raw_model_text)
            conversation.append({"role": "model", "parts": [raw_model_text]})
            if len(conversation) > 8:
                conversation.pop(0)
    except Exception as e:
        logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {e}")
        gemini_text = ("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    return gemini_text

# ---------------------- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç ---------------------- #
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–∞ "1 –¥–æ–ª–ª–∞—Ä —Å—É–º" –∏–ª–∏ "1 –¥–æ–ª–∞—Ä –≤ —Å—É–º".
EXCHANGE_PATTERN = re.compile(
    r"(?i)(\d+(?:[.,]\d+)?)[ \t]+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)(?:\s+(?:–≤|to))?\s+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)"
)

async def reminder_loop():
    global reminders
    import pytz
    from datetime import datetime
    while True:
        now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
        to_send = []
        to_remove = []

        for i, (user_id, remind_dt_utc, note_text) in enumerate(reminders):
            if remind_dt_utc <= now_utc:
                to_send.append((user_id, note_text))
                to_remove.append(i)

        for i in reversed(to_remove):
            reminders.pop(i)
        if to_remove:
            save_reminders()

        for user_id, text in to_send:
            try:
                if "–≤–æ–π—Å" in text.lower() or "–≥–æ–ª–æ—Å–æ–º" in text.lower():
                    await send_voice_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{text}")
                else:
                    await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{text}")
            except Exception as e:
                logging.warning(f"[REMINDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        
        await asyncio.sleep(30)  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º

# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---------------------- #
async def main():
    asyncio.create_task(reminder_loop())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
