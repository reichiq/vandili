import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command

############################
# –ü–û–ü–´–¢–ê–ï–ú–°–Ø –ü–û–î–ö–õ–Æ–ß–ò–¢–¨ googletrans
############################
try:
    from googletrans import Translator
    translator = Translator()
    USE_TRANSLATOR = True
except ImportError:
    translator = None
    USE_TRANSLATOR = False

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

############################
# –û–¢–î–ï–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –ù–ê –ö–ê–ñ–î–´–ô CHAT
############################
chat_history = {}

INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]

OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]

IMAGE_TRIGGERS = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ",
    "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É",
    "–¥–∞–π —Ñ–æ—Ç–æ", "–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
]

UNWANTED_GEMINI_PHRASES = [
    "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    "—è –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    "I cannot display images",
    "I can't display images",
    "I am a text-based model",
    "I'm a text-based model",
    "I can't show images",
    "–Ω–µ –∏–º–µ—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å",  # —Ä–∞—Å—à–∏—Ä—è–µ–º
]

######################
# –°–õ–û–í–ê–†–¨ –ü–û–î–°–¢–ê–ù–û–í–û–ö
######################
# –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∫–ª—é—á –≤ —Ç–µ–∫—Å—Ç–µ, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
PROMPT_FIX = {
    "–ø—É–¥–µ–ª—å": "poodle",
    "–ø—É–¥–µ–ª–∏": "poodle",
    "–∫–æ—à–∫–∞": "cat",
    "–∫–æ—à–∫–∏": "cats",
    "–∫–æ—Ç": "cat",
    "–∫–æ—Ç—ã": "cats",
    "—Å–æ–±–∞–∫–∞": "dog",
    "—Å–æ–±–∞–∫–∏": "dogs",
    "–æ—Ä—Ö–∏–¥–µ—é": "orchid",
    "–æ—Ä—Ö–∏–¥–µ–∏": "orchids",
    "–æ—Ä—Ö–∏–¥–µ—è": "orchid",
    "–ø–µ—Ä—Å–∏–∫–∏": "peaches",
}

############################
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
############################
def format_gemini_response(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏, –≤—Å—Ç–∞–≤–∫–∏, –æ—Ç–≥–æ–≤–æ—Ä–∫–∏, –ø–µ—Ä–µ–≤–æ–¥–∏–º Markdown ‚Üí HTML."""
    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK__"
        return placeholder

    # –£–¥–∞–ª—è–µ–º code-block–∏
    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)

    # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–∏–ø–∞ [–≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É]
    text = re.sub(r"\[.*?(—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–≤—Å—Ç–∞–≤—å—Ç–µ|–≤—Å—Ç–∞–≤–∏—Ç—å|insert|–∫–∞—Ä—Ç–∏–Ω–∫—É).*?\]", "", text, flags=re.IGNORECASE)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    text = escape(text)

    # Markdown => HTML
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≥–æ–≤–æ—Ä–∫–∏
    for phrase in UNWANTED_GEMINI_PHRASES:
        text = re.sub(phrase, "", text, flags=re.IGNORECASE)

    return text.strip()

############################
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–ê –î–õ–Ø UNSPLASH
############################
def get_safe_prompt(user_input: str) -> str:
    """
    1) –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–ø–æ–∫–∞–∂–∏, —Ä–∞—Å—Å–∫–∞–∂–∏, –∏ —Ç.–ø.)
    2) –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ PROMPT_FIX (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—É–¥–µ–ª—å'->'poodle')
    3) –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—é —Ñ—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–µ—Å–ª–∏ googletrans –µ—Å—Ç—å)
    """
    text = user_input.lower()
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏
    text = re.sub(r'[.,!?\-\n]', ' ', text)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    text = re.sub(r"\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏|–º–Ω–µ|–ø—Ä–æ|—Ñ–∞–∫—Ç|—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–ø—Ä–∏–∫—Ä–µ–ø–∏|–¥–∞–π|–∏|–æ|–æ–±|–æ—Ç–ø—Ä–∞–≤—å|—á—Ç–æ|—Ç–∞–∫–æ–µ|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)\b", "", text)
    words = text.strip().split()

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å—ã
    for i, w in enumerate(words):
        if w in PROMPT_FIX:
            words[i] = PROMPT_FIX[w]

    cleaned = " ".join(words).strip()
    if not cleaned:
        return "random"

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –í–°–Æ —Å—Ç—Ä–æ–∫—É
    if USE_TRANSLATOR:
        translated = translator.translate(cleaned, src="ru", dest="en").text
        # –ü—Ä–∏–º–µ—Ä: "–ø—É–¥–µ–ª–∏ —Å–æ–±–∞–∫–∏" -> "poodle dogs"
        prompt = translated.strip()
        logging.info(f"[BOT] Translate RU->EN: '{cleaned}' -> '{prompt}'")
        return prompt if prompt else "random"
    else:
        return cleaned

############################
# –ó–ê–ü–†–û–° –ö UNSPLASH
############################
async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ–º random-—Ñ–æ—Ç–æ —Å Unsplash –ø–æ prompt."""
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                logging.info(f"[UNSPLASH] status: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    if "urls" in data and "regular" in data["urls"]:
                        return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

############################
# –†–ê–ó–î–ï–õ–Ø–ï–ú –î–õ–ò–ù–ù–´–ô –¢–ï–ö–°–¢
############################
def split_text(text: str, max_length: int = 950):
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind('. ')
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

############################
# /start (–ø—Ä–∏–≤–µ—Ç)
############################
@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.\n\n"
        "–ú–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ –∫–æ—Ç–∞¬ª\n"
        "‚Ä¢ ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ü–∞—Ä–∏–∂¬ª\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ ‚Äî —Å–ø—Ä–æ—Å–∏ ¬´–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª¬ª.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! ü¶æ"
    )
    await message.answer(greet_text, parse_mode=ParseMode.HTML)

############################
# –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
############################
@dp.message()
async def handle_message(message: Message):
    user_input = message.text.strip()
    chat_id = message.chat.id  # –ø–∞–º—è—Ç—å –¥–ª—è –≥—Ä—É–ø–ø—ã/–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    logging.info(f"[BOT] –ü–æ–ª—É—á–µ–Ω–æ: '{user_input}', chat_id={chat_id}")

    # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if any(trigger in user_input.lower() for trigger in INFO_COMMANDS):
        reply = random.choice(OWNER_REPLIES)
        await asyncio.sleep(1)
        await bot.send_chat_action(chat_id, action="typing")
        await message.answer(reply, parse_mode=ParseMode.HTML)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥ –∫–ª—é—á–æ–º chat_id
    chat_history.setdefault(chat_id, []).append({"role": "user", "parts": [user_input]})
    if len(chat_history[chat_id]) > 5:
        chat_history[chat_id].pop(0)

    try:
        await bot.send_chat_action(chat_id, action="typing")
        response = model.generate_content(chat_history[chat_id])
        gemini_text = format_gemini_response(response.text)
        logging.info(f"[GEMINI] text[:200] => {gemini_text[:200]}...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º prompt
        prompt = get_safe_prompt(user_input)
        logging.info(f"[BOT] unsplash prompt => {prompt}")
        image_url = await get_unsplash_image_url(prompt, UNSPLASH_ACCESS_KEY)
        logging.info(f"[BOT] image_url => {image_url}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        triggered = any(t in user_input.lower() for t in IMAGE_TRIGGERS)
        logging.info(f"[BOT] triggered => {triggered}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å url –∏ —Ç—Ä–∏–≥–≥–µ—Ä
        if image_url and triggered:
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as resp:
                    if resp.status == 200:
                        photo_bytes = await resp.read()
                        size = len(photo_bytes)
                        logging.info(f"[BOT] —Å–∫–∞—á–∞–Ω–æ {size} –±–∞–π—Ç.")
                        # –ü–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        import os
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpfile:
                            tmpfile.write(photo_bytes)
                            tmp_path = tmpfile.name

                        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        chunks = split_text(gemini_text)
                        try:
                            await bot.send_chat_action(chat_id, action="upload_photo")
                            file = FSInputFile(tmp_path, filename="image.jpg")
                            caption_part = chunks[0] if chunks else " "
                            await bot.send_photo(
                                chat_id=chat_id,
                                photo=file,
                                caption=caption_part,
                                parse_mode=ParseMode.HTML
                            )
                            for chunk in chunks[1:]:
                                await message.answer(chunk, parse_mode=ParseMode.HTML)

                        finally:
                            if os.path.exists(tmp_path):
                                os.remove(tmp_path)
                        return
                    else:
                        logging.warning(f"[BOT] resp.status={resp.status}, —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # –ò–Ω–∞—á–µ -> –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        for chunk in split_text(gemini_text):
            await message.answer(chunk, parse_mode=ParseMode.HTML)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–≤—è–∑–∏ —Å –æ–±–ª–∞–∫–∞–º–∏.")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    except Exception as e:
        logging.error(f"[BOT] –æ—à–∏–±–∫–∞: {e}")
        err_text = escape(str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {err_text}", parse_mode=ParseMode.HTML)

############################
# –ó–ê–ü–£–°–ö
############################
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
