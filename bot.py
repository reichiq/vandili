import logging
import os
import asyncio
import re
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ü–∞–º—è—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_memory = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

def format_gemini_response(text: str) -> str:
    special_chars = r"_[]()~>#+-=|{}.!"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    text = text.replace("**", "")
    text = re.sub(r'\s*```\w*\n', '```\n', text)
    text = re.sub(r'\n```\s*', '\n```', text)
    text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f"```\n{m.group(2)}\n```", text, flags=re.DOTALL)
    text = re.sub(r'(\d+\.) ', r'\n\1 ', text)
    return text

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def remember_user(user: types.User):
    if user.id not in user_memory:
        user_memory[user.id] = user.first_name or user.username

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–ø–æ–º—è–Ω—É–ª–∏ –ª–∏ –±–æ—Ç–∞
def is_bot_mentioned(message: types.Message):
    triggers = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]
    text = message.text.lower()
    return any(trigger in text for trigger in triggers) or (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
def is_owner_question(text: str) -> bool:
    owner_keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞", "—á–µ–π –∏–∏", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç", "–∫—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª",
        "–¥–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç", "–∫–æ–º—É –æ–Ω —Å–ª—É–∂–∏—Ç", "–∫–µ–º –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª",
        "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω", "–∫–µ–º —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª —ç—Ç–æ—Ç –±–æ—Ç"
    ]
    return any(re.search(rf"\b{re.escape(keyword)}\b", text.lower()) for keyword in owner_keywords)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    remember_user(message.from_user)
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
@dp.message()
async def handle_owner_question(message: types.Message):
    remember_user(message.from_user)
    if is_owner_question(message.text):
        responses = [
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili. ü§ñ", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Vandili. ‚úÖ",
            "Vandili ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞. üöÄ", "–≠—Ç–æ—Ç –±–æ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Vandili. üí°",
            "–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–µ–º—É! üëÄ", "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Vandili, –±–æ–ª—å—à–µ –Ω–∏ –¥–ª—è –∫–æ–≥–æ! üèÜ",
            "–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª Vandili, —Ç–∞–∫ —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–Ω –∑–Ω–∞–µ—Ç –≤—Å–µ –º–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã! üî•", "–Ø —Å–æ–∑–¥–∞–Ω Vandili –∏ —Ä–∞–±–æ—Ç–∞—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ. üëë"
        ]
        await message.answer(format_gemini_response(random.choice(responses)), parse_mode="MarkdownV2")
        return
    await chat_with_gemini(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chat_with_gemini(message: types.Message):
    remember_user(message.from_user)
    user_text = message.text
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()
    await bot.send_chat_action(message.chat.id, "typing")
    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        response = model.generate_content(user_text).text
        formatted_response = format_gemini_response(response)
        if message.from_user.id in user_memory and random.random() < 0.3:
            formatted_response = f"{user_memory[message.from_user.id]}, {formatted_response}"
        await message.answer(formatted_response, parse_mode="MarkdownV2")
    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: `{format_gemini_response(str(e))}`", parse_mode="MarkdownV2")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
