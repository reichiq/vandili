import logging
import os
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
TRIGGERS = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
def is_bot_mentioned(message: types.Message):
    text = message.text.lower()
    return (
        any(trigger in text for trigger in TRIGGERS)
        or (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ñ–æ—Ä–º—É–ª)
def escape_markdown(text: str) -> str:
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}\! ü§ñ\n–Ø AI –æ—Ç Vandili\. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ\!"
    await message.answer(escape_markdown(text))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–±—Ä–∞—â–µ–Ω–∏—è
@dp.message()
async def chat_with_gemini(message: types.Message):
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    # –£–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    user_text = message.text
    for trigger in TRIGGERS:
        user_text = user_text.replace(trigger, "").strip()

    try:
        response = model.generate_content(user_text)
        formatted_response = escape_markdown(response.text)

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if "```" in formatted_response:
            formatted_response = "```\n" + formatted_response.replace("```", "") + "\n```"
        else:
            # –ï—Å–ª–∏ –Ω–µ –∫–æ–¥, –Ω–æ –µ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏
            formatted_response = re.sub(r"(\d+)", r"\1", formatted_response)  # –¶–∏—Ñ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            formatted_response = re.sub(r"([\+\-\*/=])", r"\\\1", formatted_response)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º +, -, *, /

        await message.answer(formatted_response)
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {escape_markdown(str(e))}"
        await message.answer(error_message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())