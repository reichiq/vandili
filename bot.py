import logging
import os
import asyncio
import re
import aiohttp
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# ‚ö° –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ (—Å–ª–æ–≤–∞—Ä—å)
user_memory = {}

# üõ† –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def format_gemini_response(text: str) -> str:
    special_chars = r"_[]()~>#+-=|{}.!"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    text = text.replace("**", "")
    text = re.sub(r'\s*```\w*\n', '```\n', text)
    text = re.sub(r'\n```\s*', '\n```', text)
    text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f"```\n{m.group(2)}\n```", text, flags=re.DOTALL)
    text = re.sub(r'(\d+\.) ', r'\n\1 ', text)
    return text

# ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
def is_owner_question(text: str) -> bool:
    owner_keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞", "—á–µ–π –∏–∏", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç",
        "–∫—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª", "–¥–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç", "–∫–æ–º—É –æ–Ω —Å–ª—É–∂–∏—Ç",
        "–∫–µ–º –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
        "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω", "–∫–µ–º —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª —ç—Ç–æ—Ç –±–æ—Ç"
    ]
    return any(re.search(rf"\b{re.escape(keyword)}\b", text.lower()) for keyword in owner_keywords)

# üèÜ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
@dp.message()
async def handle_owner_question(message: types.Message):
    if is_owner_question(message.text):
        responses = [
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Vandili.",
            "üîß Vandili ‚Äî –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!",
            "‚öôÔ∏è –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ!",
            "üìå Vandili ‚Äî –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —è —Å–ª—É–∂—É —Ç–æ–ª—å–∫–æ –µ–º—É!",
            "üõ†Ô∏è Vandili –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å!",
            "ü§ñ Vandili –∑–Ω–∞–µ—Ç –≤—Å—ë –æ–±–æ –º–Ω–µ, –æ–Ω –º–æ–π —Ö–æ–∑—è–∏–Ω!",
            "üí° –ú–æ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ‚Äî –∑–∞—Å–ª—É–≥–∞ Vandili!",
            "üß† Vandili –º–µ–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª, —è —Å–ª—É–∂—É —Ç–æ–ª—å–∫–æ –µ–º—É!"
        ]
        await message.answer(format_gemini_response(random.choice(responses)), parse_mode="MarkdownV2")
        return

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞—ë–º –≤ —á–∞—Ç —Å Gemini
    await chat_with_gemini(message)

# üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False

# üéØ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")

# üí¨ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
@dp.message()
async def chat_with_gemini(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text.strip()
    user_id = message.from_user.id
    user_name = message.from_user.full_name or message.from_user.username

    # –£–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ "–ü—Ä–∏–≤–µ—Ç", –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if user_text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello", "–∑–¥–∞—Ä–æ–≤–∞", "–∞–ª–ª–æ"]:
        greeting_responses = [
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üòä –ö–∞–∫ –¥–µ–ª–∞?",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user_name}! üöÄ",
            f"–•—ç–π, {user_name}! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? üî•",
        ]
        await message.answer(format_gemini_response(random.choice(greeting_responses)), parse_mode="MarkdownV2")
        return

    # –í–∫–ª—é—á–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_memory:
            past_messages = user_memory[user_id]
        else:
            past_messages = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        past_messages.append(user_text)
        past_messages = past_messages[-5:]  # –•—Ä–∞–Ω–∏–º –Ω–µ –±–æ–ª–µ–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        full_conversation = "\n".join(past_messages)
        response = model.generate_content(full_conversation).text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        user_memory[user_id] = past_messages

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = format_gemini_response(response)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —é–∑–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ, –∞ –Ω–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if len(past_messages) == 1:
            formatted_response = f"{user_name}, {formatted_response}"

        await message.answer(formatted_response, parse_mode="MarkdownV2")

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")

    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {format_gemini_response(str(e))}", parse_mode="MarkdownV2")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
