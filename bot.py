import os
import logging
import re
import aiohttp
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY or not UNSPLASH_ACCESS_KEY:
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å .env: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram, Gemini –∏–ª–∏ Unsplash.")

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML
def clean_html(text: str) -> str:
    return re.sub(r"<.*?>", "", text)

# –ó–∞–ø—Ä–æ—Å –∫ Unsplash API
async def fetch_unsplash_image(query: str) -> str | None:
    url = f"https://api.unsplash.com/photos/random?query={query}&orientation=landscape&client_id={UNSPLASH_ACCESS_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get("urls", {}).get("regular")
    return None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Å—å–±–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ
def is_photo_request(text: str) -> bool:
    return any(kw in text.lower() for kw in ["–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ —Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø–æ–∫–∞–∂–∏ –∞—Ä—Ç"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    try:
        # –ó–∞–ø—Ä–æ—Å –≤ Gemini
        gemini_response = await model.generate_content_async(user_text)
        gemini_text = gemini_response.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–æ—Ç–æ
        if is_photo_request(user_text):
            image_query = user_text.replace("–ø–æ–∫–∞–∂–∏", "").strip()
            photo_url = await fetch_unsplash_image(image_query)

            if photo_url:
                # –û–±—Ä–µ–∑–∞–µ–º caption –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(gemini_text) > 900:
                    short_text = gemini_text[:900].rsplit(".", 1)[0] + "..."
                    await bot.send_photo(message.chat.id, photo_url, caption=short_text)
                    await message.answer(gemini_text)  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                else:
                    await bot.send_photo(message.chat.id, photo_url, caption=gemini_text)
            else:
                await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

        else:
            await message.answer(gemini_text)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {clean_html(str(e))}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
