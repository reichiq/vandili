# ---------------------- –ò–º–ø–æ—Ä—Ç—ã ---------------------- #
import logging
import os
import re, textwrap
from html import unescape, escape
import random
import aiohttp
import pytz
import html as _html
from pix2text import Pix2Text
from PIL import Image
from datetime import datetime
from google.cloud import texttospeech
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.types import (
    FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BufferedInputFile, ReplyKeyboardRemove,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from pathlib import Path

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = Path(__file__).resolve().parent / "data"
DATA_DIR.mkdir(exist_ok=True)

REMINDERS_FILE = DATA_DIR / "reminders.json"
STATS_FILE = DATA_DIR / "stats.json"
NOTES_FILE = DATA_DIR / "notes.json"
SUPPORT_MAP_FILE = DATA_DIR / "support_map.json"
TIMEZONES_FILE = DATA_DIR / "timezones.json"
PROGRESS_FILE = DATA_DIR / "progress.json"
VOCAB_FILE = DATA_DIR / "vocab.json"
WORD_OF_DAY_HISTORY_FILE = DATA_DIR / "word_of_day_per_user.json"
REVIEW_STATS_FILE = DATA_DIR / "review_stats.json"
ACHIEVEMENTS_FILE = DATA_DIR / "achievements.json"
VOCAB_REMINDERS_FILE = DATA_DIR / "vocab_reminders.json"
DISABLED_CHATS_FILE = DATA_DIR / "disabled_chats.json"
UNIQUE_USERS_FILE = DATA_DIR / "unique_users.json"
UNIQUE_GROUPS_FILE = DATA_DIR / "unique_groups.json"

import asyncio
import google.generativeai as genai
import tempfile
import requests
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from pymorphy3 import MorphAnalyzer
from string import punctuation
from google.cloud import translate
from google.oauth2 import service_account
from docx import Document
from PyPDF2 import PdfReader
import json
import speech_recognition as sr
from pydub import AudioSegment
from collections import defaultdict
dialogue_stats = defaultdict(int)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
# ‚òÖ –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
from aiogram.fsm.storage.memory import MemoryStorage

class ReminderAdd(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_text = State()
class ReminderEdit(StatesGroup):
    waiting_for_new_text = State()
    waiting_for_new_date = State()
    waiting_for_new_time = State()
class VocabAdd(StatesGroup):
    waiting_for_word = State()
class VocabEdit(StatesGroup):
    waiting_for_field = State()
    waiting_for_new_value = State()
class GrammarExercise(StatesGroup):
    waiting_for_answer = State()
class VocabReview(StatesGroup):
    reviewing = State()
class QuizStates(StatesGroup):
    quiz = State()
    score = State()
    current_question = State()
    questions = State()
    level = State()

BOT_ID: int = None
VOICE_MAP = {
    "en": {"lang": "en-US", "name": "en-US-Wavenet-D"},
    "ru": {"lang": "ru-RU", "name": "ru-RU-Wavenet-C"},
}

async def safe_send(chat_id: int, text: str, *, reply_to: int | None = None):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å text c parse_mode=HTML.
    –ï—Å–ª–∏ Telegram —Ä—É–≥–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ ¬´–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ¬ª –≤–∞—Ä–∏–∞–Ω—Ç—ã.
    """
    try:
        # 1‚Äë—è –ø–æ–ø—ã—Ç–∫–∞¬†‚Äî –∫–∞–∫ –µ—Å—Ç—å (–∫—Ä–∞—Å–∏–≤—ã–π HTML)
        await bot.send_message(chat_id,
                               text=text,
                               parse_mode="HTML",
                               reply_to_message_id=reply_to)
    except TelegramBadRequest:
        # 2‚Äë—è –ø–æ–ø—ã—Ç–∫–∞¬†‚Äî –≤—ã—Ä–µ–∑–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ <code>/<pre>
        no_tags = re.sub(r'</?(?!code|pre)[a-zA-Z][^>]*>', '', text)
        try:
            await bot.send_message(chat_id,
                                   text=no_tags,
                                   parse_mode="HTML",
                                   reply_to_message_id=reply_to)
        except TelegramBadRequest:
            # 3‚Äë—è –ø–æ–ø—ã—Ç–∫–∞¬†‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, –æ—Ç–∫–ª—é—á–∞–µ–º parse_mode
            await bot.send_message(chat_id,
                                   text=_html.escape(text),
                                   parse_mode=None,
                                   reply_to_message_id=reply_to)

def web_search(query: str, num_results: int = 5) -> str:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Google Custom Search JSON API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_SEARCH_API_KEY,
        "cx": GOOGLE_CX,
        "q": query,
        "num": num_results,
    }
    resp = requests.get(url, params=params)
    data = resp.json()
    snippets = []
    for item in data.get("items", []):
        snippets.append(f"- {item['snippet']}")
    return "\n".join(snippets)

def detect_lang(text: str) -> str:
    return "ru" if re.search(r"[–∞-—è–ê-–Ø]", text) else "en"

def detect_dominant_lang(text: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—É–∫–≤. –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –±–æ–ª—å—à–µ 30% –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30% –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —Ä—É—Å—Å–∫–∏–π.
    –ò–Ω–∞—á–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru'.
    """
    letters = [ch for ch in text if ch.isalpha()]
    if not letters:
        return "ru"

    en_count = sum(1 for ch in letters if 'a' <= ch.lower() <= 'z')
    ru_count = sum(1 for ch in letters if '–∞' <= ch.lower() <= '—è')
    total = en_count + ru_count

    if total == 0:
        return "ru"

    en_ratio = en_count / total
    ru_ratio = ru_count / total

    if en_ratio >= 0.3 and en_count >= 5:
        return "en"
    elif ru_ratio >= 0.3 and ru_count >= 5:
        return "ru"
    return "ru"

def strip_html(text: str) -> str:
    text = re.sub(r"</?[^>]+>", "", text)
    text = text.replace("‚Ä¢", "").strip()
    return text

def _clean_explain(text: str) -> str:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç LaTeX‚Äë—Ñ–æ—Ä–º—É–ª—ã –≤ ¬´—á–∏—Ç–∞–µ–º—ã–π¬ª —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
    –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ Telegram –Ω–µ —É–º–µ–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å.
    """
    # —É–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫‚Äë–∑–∞–≥–ª—É—à–∫—É Gemini
    text = text.replace("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ:", "").strip()

    # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤—Å—ë, —á—Ç–æ –≤ $$ ‚Ä¶ $$
    text = re.sub(r"\$\$.*?\$\$", "", text, flags=re.S)

    # \frac{a}{b} ‚Üí ¬´–¥—Ä–æ–±—å a / b¬ª
    text = re.sub(r"\\frac\{([^}]+)\}\{([^}]+)\}", r"–¥—Ä–æ–±—å \1 / \2", text)

    # \sqrt{x} –∏–ª–∏ \sqrt{a^2+b^2} ‚Üí ¬´–∫–æ—Ä–µ–Ω—å –∏–∑ ( ‚Ä¶ )¬ª
    text = re.sub(r"\\sqrt\{([^}]+)\}", r"–∫–æ—Ä–µ–Ω—å –∏–∑ (\1)", text)

    # x^{2} ‚Üí ¬´x –≤ —Å—Ç–µ–ø–µ–Ω–∏ 2¬ª
    text = re.sub(r"([a-zA-Z\d]+)\^\{([^}]+)\}", r"\1 –≤ —Å—Ç–µ–ø–µ–Ω–∏ \2", text)

    # x_1 ‚Üí ¬´x –≤–Ω–∏–∑—É 1¬ª  (–º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è)
    text = re.sub(r"([a-zA-Z\d]+)_\{([^}]+)\}", r"\1 –≤–Ω–∏–∑—É \2", text)

    # —É–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (\sin, \alpha ‚Ä¶),
    # —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r"\\[a-zA-Z]+", "", text)
    text = text.replace("{", "").replace("}", "")
    return re.sub(r"\s+", " ", text).strip()

def clean_for_tts(text: str) -> str:
    text = re.sub(r"<[^>]+>", "", text)  # —É–¥–∞–ª–µ–Ω–∏–µ HTML
    text = unescape(text)
    text = re.sub(r"[¬´¬ª‚Äû‚Äú‚Äù\"']", '', text)  # —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∫–∞–≤—ã—á–µ–∫
    text = text.replace("‚Äî", "-")
    
    # (–ò–ó–ú–ï–ù–ï–ù–û) —É–±–∏—Ä–∞–µ–º markdown
    text = re.sub(r"[*_`]+", "", text)
    return text.strip()

def load_dialogues():
    with open("learning/dialogues.json", "r", encoding="utf-8") as f:
        raw = json.load(f)
    # –ï—Å–ª–∏ —ç—Ç–æ dict, —Ç–æ –¥–µ–ª–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª—é—á–µ–π
    if isinstance(raw, dict):
        return {k.lower(): v for k, v in raw.items()}
    else:
        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª–µ–º "topic"
        return raw

dialogues = load_dialogues()

# ---------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---------------------- #
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/root/vandili/key2.json"
credentials = service_account.Credentials.from_service_account_file("/root/vandili/key.json")
translate_client = translate.TranslationServiceClient(credentials=credentials)

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_CX = os.getenv("GOOGLE_CX")
# –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ —Ç–∏–ø –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏–µ None)
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY") or ""

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"),
            KeyboardButton(text="‚è∞ –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        ],
        [
            KeyboardButton(text="üá¨üáß –ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"),
            KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)
# ‚òÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage –¥–ª—è FSM
dp = Dispatcher(storage=MemoryStorage())
morph = MorphAnalyzer()

genai.configure(api_key=GEMINI_API_KEY)
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ Gemini 2.5 Pro Experimental
model = genai.GenerativeModel(model_name="models/gemini-2.5-pro-preview-03-25")


if os.path.exists(ACHIEVEMENTS_FILE):
    with open(ACHIEVEMENTS_FILE, "r", encoding="utf-8") as f:
        user_achievements = json.load(f)
else:
    user_achievements = {}

if os.path.exists(REVIEW_STATS_FILE):
    with open(REVIEW_STATS_FILE, "r", encoding="utf-8") as f:
        review_stats = json.load(f)
else:
    review_stats = {}

def load_timezones() -> dict:
    if not os.path.exists(TIMEZONES_FILE):
        return {}
    try:
        with open(TIMEZONES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å timezones.json: {e}")
        return {}

def save_timezones(timezones: dict):
    try:
        with open(TIMEZONES_FILE, "w", encoding="utf-8") as f:
            json.dump(timezones, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å timezones.json: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_timezones = load_timezones()

def load_reminders():
    if not os.path.exists(REMINDERS_FILE):
        return []
    try:
        with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # data ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{"user_id": ..., "datetime_utc": ..., "text": ...}]
            # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º datetime_utc –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            out = []
            for item in data:
                dt_str = item["datetime_utc"]
                dt_obj = datetime.fromisoformat(dt_str)
                out.append((item["user_id"], dt_obj, item["text"]))
            return out
    except:
        return []

def save_reminders():
    data_to_save = []
    for (user_id, dt_obj, text) in reminders:
        data_to_save.append({
            "user_id": user_id,
            "datetime_utc": dt_obj.isoformat(),
            "text": text
        })
    try:
        with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å reminders: {e}")

def load_notes() -> dict:
    if not os.path.exists(NOTES_FILE):
        return defaultdict(list)
    try:
        with open(NOTES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return defaultdict(list, {int(k): v for k, v in data.items()})
    except:
        return defaultdict(list)

def save_notes():
    try:
        with open(NOTES_FILE, "w", encoding="utf-8") as f:
            json.dump(user_notes, f, ensure_ascii=False)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏: {e}")

def load_support_map() -> dict:
    if not os.path.exists(SUPPORT_MAP_FILE):
        return {}
    try:
        with open(SUPPORT_MAP_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_support_map():
    try:
        with open(SUPPORT_MAP_FILE, "w", encoding="utf-8") as f:
            json.dump(support_reply_map, f)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ support_map: {e}")

def load_stats() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (messages_total, files_received, commands_used, unique_users) –∏–∑ stats.json.
    """
    if not os.path.exists(STATS_FILE):
        return {
            "messages_total": 0,
            "files_received": 0,
            "commands_used": {},
            "unique_users": []
        }
    try:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            data.setdefault("messages_total", 0)
            data.setdefault("files_received", 0)
            data.setdefault("commands_used", {})
            data.setdefault("unique_users", [])  
            return data
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å stats.json: {e}")
        return {
            "messages_total": 0,
            "files_received": 0,
            "commands_used": {},
            "unique_users": []  
        }

def save_stats():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (messages_total, files_received, commands_used) –≤ stats.json.
    """
    try:
        with open(STATS_FILE, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å stats.json: {e}")

def load_progress() -> dict:
    if not os.path.exists(PROGRESS_FILE):
        return {}
    try:
        with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å progress.json: {e}")
        return {}

def save_progress(progress: dict):
    try:
        with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
            json.dump(progress, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å progress.json: {e}")

def save_achievements():
    with open(ACHIEVEMENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_achievements, f, ensure_ascii=False, indent=2)

async def check_achievements(user_id: int, message_target):
    uid = str(user_id)
    achieved = user_achievements.get(uid, [])
    new_achievements = []

    total_words = len(user_vocab.get(user_id, []))
    reviewed_5 = sum(1 for e in user_vocab.get(user_id, []) if e.get("review_level", 0) >= 5)
    correct = review_stats.get(uid, {}).get("correct", 0)
    dialog_words = dialogue_stats.get(uid, 0)

    if total_words >= 10 and "üìò 10 —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ" not in achieved:
        new_achievements.append("üìò 10 —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    if reviewed_5 >= 3 and "üéì 3 —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω–æ" not in achieved:
        new_achievements.append("üéì 3 —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω–æ")
    if correct >= 10 and "üß† 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤" not in achieved:
        new_achievements.append("üß† 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    if dialog_words >= 5 and "üó£ 5 —Å–ª–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤" not in achieved:
        new_achievements.append("üó£ 5 —Å–ª–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤")

    if new_achievements:
        achieved.extend(new_achievements)
        user_achievements[uid] = achieved
        save_achievements()
        await message_target.answer(
            f"üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n" + "\n".join(f"‚Ä¢ {a}" for a in new_achievements),
            show_alert=True
        )

def load_vocab() -> dict[int, list[dict]]:
    if not os.path.exists(VOCAB_FILE):
        return {}
    try:
        with open(VOCAB_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return {int(k): v for k, v in data.items()}
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å vocab: {e}")
        return {}

def save_vocab(vocab: dict[int, list[dict]]):
    try:
        with open(VOCAB_FILE, "w", encoding="utf-8") as f:
            json.dump(vocab, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å vocab: {e}")

def save_review_stats():
    with open(REVIEW_STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(review_stats, f, ensure_ascii=False, indent=2)

def load_word_of_day_history() -> dict[int, list[str]]:
    if not os.path.exists(WORD_OF_DAY_HISTORY_FILE):
        return {}
    try:
        with open(WORD_OF_DAY_HISTORY_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            return {int(k): v for k, v in raw.items()}
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–ª–æ–≤ –¥–Ω—è: {e}")
        return {}

def save_word_of_day_history(history: dict[int, list[str]]):
    try:
        with open(WORD_OF_DAY_HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–ª–æ–≤ –¥–Ω—è: {e}")

def normalize_text(text: str) -> str:
    return re.sub(r"[^\w]", "", text.strip().lower())

def normalize_command(command: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –∫ –≤–∏–¥—É –±–µ–∑ @username.
    –ù–∞–ø—Ä–∏–º–µ—Ä, '/start@VandiliBot' -> '/start'
    """
    return command.split('@')[0]

def get_normalized_command_stats(stats_dict: dict) -> dict:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥, —É–±–∏—Ä–∞—è @username –∏–∑ –∫–ª—é—á–µ–π.
    """
    raw_commands = stats_dict.get("commands_used", {})
    normalized_stats = {}

    for command, count in raw_commands.items():
        norm_cmd = normalize_command(command)
        normalized_stats[norm_cmd] = normalized_stats.get(norm_cmd, 0) + count

    return normalized_stats

def render_top_commands_bar_chart(commands_dict: dict) -> str:
    import matplotlib.pyplot as plt
    import tempfile

    if not commands_dict:
        return None

    normalized_stats = get_normalized_command_stats({"commands_used": commands_dict})
    sorted_cmds = sorted(normalized_stats.items(), key=lambda x: x[1], reverse=True)[:5]
    commands = [cmd.replace("@VandiliBot", "") for cmd, _ in sorted_cmds]
    counts = [cnt for _, cnt in sorted_cmds]

    fig, ax = plt.subplots(figsize=(8, 5))
    bars = ax.bar(commands, counts)

    ax.set_title("–¢–æ–ø-5 –∫–æ–º–∞–Ω–¥")
    ax.set_xlabel("–ö–æ–º–∞–Ω–¥—ã")
    ax.set_ylabel("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height + 0.5, f"{int(height)}",
                ha='center', va='bottom', fontsize=10)

    plt.tight_layout()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmpf:
        plt.savefig(tmpf.name)
        return tmpf.name

# ---------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---------------------- #
# –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
vocab_reminders_enabled = {}
VOCAB_REMINDERS_FILE = VOCAB_REMINDERS_FILE

def load_vocab_reminder_settings():
    if not os.path.exists(VOCAB_REMINDERS_FILE):
        return {}
    try:
        with open(VOCAB_REMINDERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {VOCAB_REMINDERS_FILE}: {e}")
        return {}

def save_vocab_reminder_settings():
    try:
        with open(VOCAB_REMINDERS_FILE, "w", encoding="utf-8") as f:
            json.dump(vocab_reminders_enabled, f)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {VOCAB_REMINDERS_FILE}: {e}")

vocab_reminders_enabled = load_vocab_reminder_settings()
stats = load_stats()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
pending_note_or_reminder = {}
support_mode_users = set()
support_reply_map = load_support_map()
chat_history = {}
user_documents = {}
user_notes = load_notes()
reminders = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (user_id, event_utc: datetime, text)
reminders = load_reminders()
quiz_storage = {}
user_progress = load_progress()
reminder_status = {}
user_vocab: dict[int, list[dict]] = load_vocab()
user_word_of_day_history = load_word_of_day_history()
user_images_text = {}
_p2t = Pix2Text(use_fast=True)

async def recognize_formula(image_bytes: bytes) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç LaTeX –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–æ–π.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –Ω–æ–≤—ã–º–∏ (Page), —Ç–∞–∫ –∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ (list[dict]) –æ—Ç–≤–µ—Ç–∞–º–∏ pix2text.
    """
    img = Image.open(BytesIO(image_bytes)).convert("RGB")

    # ‚ö†Ô∏è   –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –ª—É—á—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–æ–π –æ–±—ë—Ä—Ç–∫–æ–π:
    try:
        latex = _p2t.recognize_formula(img)          # >=1.1 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str
        return latex.strip() if latex else None
    except AttributeError:
        # fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ API
        pass

    #  ---- —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (<1.1)  -----------------
    preds = _p2t(img, return_text=False)             # –æ—Ç–¥–∞—ë—Ç list
    if not preds:
        return None

    block = preds[0]

    # Page/Block  (>=1.1)  -------------------------
    if hasattr(block, "formula"):
        return getattr(block, "formula", None)

    # dict (<1.1) ---------------------------------
    if isinstance(block, dict):
        return block.get("formula") or block.get("text")

    return None

# --- –†–µ–Ω–¥–µ—Ä LaTeX –≤ PNG (–¥–ª—è –ø—Ä–µ–≤—å—é) ---
import matplotlib
matplotlib.use("Agg")          # –æ—Ç–∫–ª—é—á–∞–µ–º GUI‚Äë–±—ç–∫—ç–Ω–¥
import matplotlib.pyplot as plt
import tempfile, os

def latex_to_png(latex: str) -> str:
    """
    –†–∏—Å—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É .png
    """
    fig = plt.figure()
    fig.text(0.1, 0.5, f"${latex}$", fontsize=24)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    fig.savefig(tmp.name, bbox_inches="tight", pad_inches=0.3)
    plt.close(fig)
    return tmp.name

# --- –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ $$...$$ –Ω–∞ PNG –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç + —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
def replace_latex_with_png(text: str) -> tuple[str, list[str]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã $$ ... $$, —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∏—Ö –≤¬†PNG —á–µ—Ä–µ–∑ latex_to_png()
    –∏¬†–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      ‚Ä¢ text  ‚Äì —Å—Ç—Ä–æ–∫—É –±–µ–∑ LaTeX (–Ω–∞ –º–µ—Å—Ç–µ –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª—ã ‚Äì –ø–æ–º–µ—Ç–∫–∞ [—Å–º.¬†–∫–∞—Ä—Ç–∏–Ω–∫—É¬†N])
      ‚Ä¢ images ‚Äì —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫¬†–≤—Ä–µ–º–µ–Ω–Ω—ã–º PNG‚Äë—Ñ–∞–π–ª–∞–º
    """
    import re
    images: list[str] = []

    def _repl(match):
        latex = match.group(1).strip()
        path  = latex_to_png(latex)
        images.append(path)
        idx = len(images)       # 1‚Äëbased –Ω—É–º–µ—Ä–∞—Ü–∏—è
        return f"[—Å–º.¬†–∫–∞—Ä—Ç–∏–Ω–∫—É¬†{idx}]"

    new_text = re.sub(r"\$\$(.+?)\$\$", _repl, text, flags=re.S)
    return new_text, images

# --- ¬´—á–∏–Ω–∏—Ç—å¬ª LaTeX, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç matplotlib.mathtext ----------
def _sanitize_for_png(lx: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ mathtext.
    –î–æ–±–∞–≤–ª—è–π —Å—é–¥–∞ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    replacements = {
        r"\implies": r"\Rightarrow",
        r"\iff": r"\Leftrightarrow",
        r"\Longrightarrow": r"\Rightarrow",
        r"\longrightarrow": r"\rightarrow",
        r"\longleftarrow": r"\leftarrow",
    }
    for bad, good in replacements.items():
        lx = lx.replace(bad, good)
    return lx

STEP_RE = re.compile(
    r"(?:–®–∞–≥|Step)\s*[\.\:‚Ññ]?\s*(\d+)[\.\:]*\s*.*?"  # ¬´–®–∞–≥¬†1¬ª, ¬´Step¬†1:¬ª
    r"\$\$(.+?)\$\$"                                # —Å–∞–º LaTeX
    r"(.*?)(?=(?:–®–∞–≥|Step)\s*\d+|$)",               # –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    flags=re.S | re.I
)

def split_steps(raw: str) -> list[tuple[str, str, str]]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Gemini –Ω–∞ —à–∞–≥–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(latex, header, explain), ‚Ä¶],
    –≥–¥–µ header ‚Äî —Å—Ç—Ä–æ–∫–∞ ¬´–®–∞–≥¬†N: ‚Ä¶¬ª, explain ‚Äî –ø–æ–ª–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ —É—Ä–µ–∑–∞–Ω–∏—è.
    """
    out = []
    for m in STEP_RE.finditer(raw):
        header  = m.group(1).strip()     # ¬´–®–∞–≥ 3: ‚Ä¶¬ª
        latex   = m.group(2).strip()
        explain = m.group(3).strip()
        out.append((latex, header, explain))
    return out
    
# ---------------------- –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ ---------------------- #
DISABLED_CHATS_FILE = DISABLED_CHATS_FILE

def load_disabled_chats() -> set:
    if not os.path.exists(DISABLED_CHATS_FILE):
        return set()
    try:
        with open(DISABLED_CHATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å disabled_chats: {e}")
        return set()

def save_disabled_chats(chats: set):
    try:
        with open(DISABLED_CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(chats), f)
    except Exception as e:
        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å disabled_chats: {e}")

disabled_chats = load_disabled_chats()

# ---------------------- Persistent Unique Users –∏ Groups ---------------------- #
UNIQUE_USERS_FILE = UNIQUE_USERS_FILE
UNIQUE_GROUPS_FILE = UNIQUE_GROUPS_FILE

def load_unique_users() -> set:
    if not os.path.exists(UNIQUE_USERS_FILE):
        return set()
    try:
        with open(UNIQUE_USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return set()

def save_unique_users(users: set):
    try:
        with open(UNIQUE_USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(users), f)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_unique_groups() -> set:
    if not os.path.exists(UNIQUE_GROUPS_FILE):
        return set()
    try:
        with open(UNIQUE_GROUPS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")
        return set()

def save_unique_groups(groups: set):
    try:
        with open(UNIQUE_GROUPS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(groups), f)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")

unique_users = load_unique_users()
unique_groups = load_unique_groups()

ADMIN_ID = 1936733487
EESKELA_ID = 6208034574
SUPPORT_IDS = {ADMIN_ID, EESKELA_ID}
SUPPORT_PROMPT_TEXT = ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ) ‚Äî –≤—Å—ë –¥–æ–π–¥—ë—Ç –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)
all_chat_ids = set()

def _register_message_stats(message: Message):
    stats["messages_total"] += 1
    save_stats()

    if message.chat.type == ChatType.PRIVATE:
        if message.from_user.id not in unique_users:
            unique_users.add(message.from_user.id)
            save_unique_users(unique_users)
            stats["unique_users"] = list(unique_users)
            save_stats()
    elif message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.chat.id not in unique_groups:
            unique_groups.add(message.chat.id)
            save_unique_groups(unique_groups)

    if message.text and message.text.startswith('/'):
        cmd = message.text.split()[0].strip().lower()
        cmd = cmd.split("@")[0].lstrip("!/")  # —É–¥–∞–ª—è–µ–º / ! –∏ @VandiliBot
        cmd = f"/{cmd}"  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        stats["commands_used"][cmd] = stats["commands_used"].get(cmd, 0) + 1
        save_stats()

# ---------------------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---------------------- #
async def send_admin_reply_as_single_message(admin_message: Message, user_id: int):
    sender_id = admin_message.from_user.id
    if sender_id == ADMIN_ID:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –° –≤–∞–º–∏ ‚Äî üëæ Admin:</b>"
    elif sender_id == EESKELA_ID:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –° –≤–∞–º–∏ ‚Äî üí≠ eeskela:</b>"
    else:
        prefix = "<b>üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>"

    if admin_message.text:
        reply_text = f"{prefix}\n{admin_message.text}"
        await bot.send_message(chat_id=user_id, text=reply_text)
    elif admin_message.photo:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_photo(chat_id=user_id, photo=admin_message.photo[-1].file_id, caption=caption)
    elif admin_message.voice:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_voice(chat_id=user_id, voice=admin_message.voice.file_id, caption=caption)
    elif admin_message.video:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_video(chat_id=user_id, video=admin_message.video.file_id, caption=caption)
    elif admin_message.document:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_document(chat_id=user_id, document=admin_message.document.file_id, caption=caption)
    elif admin_message.audio:
        caption = prefix + ("\n" + admin_message.caption if admin_message.caption else "")
        await bot.send_audio(chat_id=user_id, audio=admin_message.audio.file_id, caption=caption)
    else:
        await bot.send_message(chat_id=user_id, text=f"{prefix}\n[–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ]")

# ---------------------- –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞–ª—é—Ç –∏ –≥–æ—Ä–æ–¥–æ–≤ ---------------------- #
def normalize_currency_rus(word: str) -> str:
    word_clean = word.strip().lower()
    parsed = morph.parse(word_clean)
    if not parsed:
        return word_clean
    normal_form = parsed[0].normal_form
    return normal_form

def normalize_city_name(raw_city: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç "–ú–æ—Å–∫–≤–µ" -> "–º–æ—Å–∫–≤–∞", "–¢–∞—à–∫–µ–Ω—Ç–µ" -> "—Ç–∞—à–∫–µ–Ω—Ç" –∏ —Ç.–¥.
    –ï—Å–ª–∏ –º–æ—Ä—Ñ–æ–ø–∞—Ä—Å–µ—Ä –¥–∞—ë—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –∏–ª–∏ —Ç—É –∂–µ —Å–∞–º—É—é —Å—Ç—Ä–æ–∫—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª.
    """
    words = raw_city.split()
    norm_words = []
    for w in words:
        w_clean = w.strip(punctuation).lower()
        parsed = morph.parse(w_clean)
        if not parsed:
            norm_words.append(w_clean)
            continue
        best = parsed[0]
        if best.normal_form == w_clean or len(best.normal_form) < 2:
            norm_words.append(w_clean)
        else:
            norm_words.append(best.normal_form)
    return " ".join(norm_words)

# ---------------------- –°–ª–æ–≤–∞—Ä—å –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º –≤–∞–ª—é—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π) ---------------------- #
# –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è "–¥–æ–ª–∞—Ä" —Å –æ–¥–Ω–æ–π "–ª" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—á–∞—Ç–æ–∫
CURRENCY_SYNONYMS = {
    "–¥–æ–ª–ª–∞—Ä": "USD", "–¥–æ–ª–ª–∞—Ä—ã": "USD", "–¥–æ–ª–ª–∞—Ä–æ–≤": "USD",
    "–¥–æ–ª–∞—Ä": "USD",
    "–µ–≤—Ä–æ": "EUR",
    "—Ä—É–±–ª—å": "RUB", "—Ä—É–±–ª–∏": "RUB", "—Ä—É–±–ª–µ–π": "RUB",
    "—é–∞–Ω—å": "CNY", "—é–∞–Ω–∏": "CNY",
    "–∏–µ–Ω–∞": "JPY", "–∏–µ–Ω—ã": "JPY", "–π–µ–Ω–∞": "JPY",
    "–≤–æ–Ω": "KRW", "–≤–æ–Ω—ã": "KRW",
    "—Å—É–º": "UZS", "—Å—É–º–∞": "UZS", "—Å—É–º—ã": "UZS", "—Å—É–º–æ–≤": "UZS",
    "—Ç–µ–Ω–≥–µ": "KZT",
    "$": "USD",
    "‚Ç¨": "EUR",
    "‚ÇΩ": "RUB",
    "¬•": "JPY",
}

EXCHANGE_PATTERN = re.compile(
    r"(?i)(\d+(?:[.,]\d+)?)[ \t]+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)(?:\s+(?:–≤|to))?\s+([a-z–∞-—è—ë$‚Ç¨‚ÇΩ¬•]+)"
)

@dp.message(F.text.regexp(EXCHANGE_PATTERN))
async def handle_exchange_request(message: Message):
    match = EXCHANGE_PATTERN.search(message.text)
    if not match:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç üòî")
        return

    amount, from_curr, to_curr = match.groups()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float
    amount = float(amount.replace(",", "."))

    result_text = await get_exchange_rate(amount, from_curr, to_curr)
    await message.answer(result_text)

async def get_floatrates_rate(from_curr: str, to_curr: str) -> float:
    from_curr = from_curr.lower()
    to_curr = to_curr.lower()

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç
    from_curr = CURRENCY_SYNONYMS.get(from_curr, from_curr).lower()
    to_curr = CURRENCY_SYNONYMS.get(to_curr, to_curr).lower()

    url = f"https://www.floatrates.com/daily/{from_curr}.json"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logging.error(f"Floatrates –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è {url}")
                    return None
                data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Floatrates: {e}")
        return None

    if to_curr not in data:
        return None

    rate = data[to_curr].get("rate")
    if rate is None:
        return None
    return float(rate)

async def get_exchange_rate(amount: float, from_curr: str, to_curr: str) -> str:
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å
    rate = await get_floatrates_rate(from_curr, to_curr)
    if rate is None:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ üòî"

    result = amount * rate
    today = datetime.now().strftime("%Y-%m-%d")
    return (f"–ö—É—Ä—Å {amount:.0f} {from_curr.upper()} ‚Äì {result:.2f} {to_curr.upper()} –Ω–∞ {today} üòä\n"
            "–ö—É—Ä—Å –≤ –±–∞–Ω–∫–∞—Ö –∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")

# ---------------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã ---------------------- #
async def do_geocoding_request(name: str) -> dict:
    url = f"https://geocoding-api.open-meteo.com/v1/search?name={name}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logging.exception(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è {name}: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None
                geo_data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}")
        return None
    if "results" not in geo_data or not geo_data["results"]:
        return None
    best = geo_data["results"][0]
    return {
        "lat": best["latitude"],
        "lon": best["longitude"],
        "timezone": best.get("timezone", "Europe/Moscow")
    }

def simple_transliterate(s: str) -> str:
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
        '–µ': 'e', '—ë': 'yo','–∂': 'zh','–∑': 'z', '–∏': 'i',
        '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
        '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
        '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts','—á': 'ch',
        '—à': 'sh','—â': 'sch','—ä': '',  '—ã': 'y', '—å': '',
        '—ç': 'e', '—é': 'yu','—è': 'ya'
    }
    result = []
    for ch in s:
        lower_ch = ch.lower()
        result.append(translit_map.get(lower_ch, ch))
    return "".join(result)

async def geocode_city(city_name: str) -> dict:
    city_name = city_name.strip().lower()

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —è–≤–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    KNOWN_CITIES = {
        "–º–æ—Å–∫–≤–∞": "Europe/Moscow",
        "—Ç–∞—à–∫–µ–Ω—Ç": "Asia/Tashkent",
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Europe/Saint Petersburg",
        "–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "Europe/Saint Petersburg",
        "—Å–µ—É–ª": "Asia/Seoul",
        "–∞–ª–º–∞—Ç—ã": "Asia/Almaty",
        "–∞—Å—Ç–∞–Ω–∞": "Asia/Astana"
    }

    if city_name in KNOWN_CITIES:
        return {
            "lat": 0,
            "lon": 0,
            "timezone": KNOWN_CITIES[city_name]
        }

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    result = await do_geocoding_request(city_name)
    if result:
        return result

    # 2. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Google Translate
    try:
        project_id = "gen-lang-client-0588633435"
        location = "global"
        parent = f"projects/{project_id}/locations/{location}"
        response = translate_client.translate_text(
            parent=parent,
            contents=[city_name],
            mime_type="text/plain",
            source_language_code="ru",
            target_language_code="en",
        )
        translated = response.translations[0].translated_text
        result = await do_geocoding_request(translated)
        if result:
            return result
    except Exception as e:
        logging.exception(f"[BOT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ '{city_name}': {e}")

    # 3. –ü—Ä–æ–±—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
    translit_city = simple_transliterate(city_name)
    return await do_geocoding_request(translit_city)

# –ù–æ–≤—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–∞
def format_condition(condition_text: str) -> str:
    weather_emojis = {
        "—è—Å–Ω–æ": "‚òÄÔ∏è",
        "—Å–æ–ª–Ω–µ—á–Ω–æ": "‚òÄÔ∏è",
        "—Å–æ–ª–Ω–µ—á–Ω–∞—è": "‚òÄÔ∏è",  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "—Å–æ–ª–Ω–µ—á–Ω–∞—è"
        "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
        "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
        "—Ç—É–º–∞–Ω": "üå´Ô∏è",
        "–¥–æ–∂–¥—å": "üåßÔ∏è",
        "–ª–∏–≤–µ–Ω—å": "üå¶Ô∏è",
        "—Å–Ω–µ–≥": "üå®Ô∏è",
        "–≥—Ä–æ–∑–∞": "‚õàÔ∏è"
    }
    lower = condition_text.lower()
    for key, emoji in weather_emojis.items():
        if key in lower:
            return f"{condition_text.capitalize()} {emoji}"
    return f"{condition_text.capitalize()} üôÇ"

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ WeatherAPI.com
async def get_weather_info(city: str, days: int = 1, mode: str = "") -> str:
    base_url = "http://api.weatherapi.com/v1/forecast.json"
    params = {
        "key": WEATHER_API_KEY,
        "q": city,
        "days": max(days, 1),
        "lang": "ru",
        "aqi": "no",
        "alerts": "no"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url, params=params) as resp:
                if resp.status != 200:
                    logging.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
                data = await resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

    if days == 1 and not mode:
        current = data.get("current", {})
        if not current:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
        condition_text = current.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        formatted_condition = format_condition(condition_text)
        temp = current.get("temp_c", "?")
        wind = current.get("wind_kph", "?")
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()} —Å–µ–π—á–∞—Å: {formatted_condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, –≤–µ—Ç–µ—Ä {wind} –∫–º/—á."
    else:
        forecast_days = data.get("forecast", {}).get("forecastday", [])
        if mode in ["–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
            index = 1 if mode == "–∑–∞–≤—Ç—Ä–∞" else 2
            if len(forecast_days) > index:
                day_info = forecast_days[index]
                date = day_info.get("date", "")
                day = day_info.get("day", {})
                condition_text = day.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                formatted_condition = format_condition(condition_text)
                mintemp = day.get("mintemp_c", "?")
                maxtemp = day.get("maxtemp_c", "?")
                return f"{date}: {formatted_condition}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç {mintemp}¬∞C –¥–æ {maxtemp}¬∞C."
            else:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å."
        else:
            forecast_lines = [f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city.capitalize()}:</b>"]
            available_days = min(len(forecast_days), days)
            for i in range(available_days):
                day_info = forecast_days[i]
                date = day_info.get("date", "")
                day = day_info.get("day", {})
                condition_text = day.get("condition", {}).get("text", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                formatted_condition = format_condition(condition_text)
                mintemp = day.get("mintemp_c", "?")
                maxtemp = day.get("maxtemp_c", "?")
                forecast_lines.append(f"‚Ä¢ {date}: {formatted_condition}, –æ—Ç {mintemp}¬∞C –¥–æ {maxtemp}¬∞C")
            return "\n".join(forecast_lines)

def split_text_for_tts(text: str, max_len: int = 4500) -> list[str]:
    import re
    paragraphs = re.split(r'(?<=[.!?])\s+', text)
    
    chunks = []
    current = ""

    for para in paragraphs:
        if len(current) + len(para) + 1 < max_len:
            current += para + " "
        else:
            chunks.append(current.strip())
            current = para + " "

    if current:
        chunks.append(current.strip())

    return chunks

# ---------------------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---------------------- #
async def send_voice_message(chat_id: int, text: str, lang: str = "en-US"):
    client = texttospeech.TextToSpeechClient()
    clean_text = clean_for_tts(text)

    chunks = split_text_for_tts(clean_text, max_len=4500)

    for i, chunk in enumerate(chunks):
        synthesis_input = texttospeech.SynthesisInput(text=chunk)

        if lang == "en-US":
            voice_name = "en-US-Wavenet-F"
        elif lang == "ru-RU":
            voice_name = "ru-RU-Wavenet-B"  
        else:
            voice_name = lang

        voice = texttospeech.VoiceSelectionParams(
            language_code=lang,
            name=voice_name

        )

        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.OGG_OPUS
        )

        try:
            response = client.synthesize_speech(
                input=synthesis_input, voice=voice, audio_config=audio_config
            )
        except Exception as e:
            logging.exception("[TTS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏:")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞.")
            return

        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as out:
            out.write(response.audio_content)
            out_path = out.name

        await bot.send_voice(chat_id=chat_id, voice=FSInputFile(out_path, filename=f"voice_part_{i+1}.ogg"))
        await asyncio.sleep(1.2)  # –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        os.remove(out_path)

async def generate_voice_snippet(text: str, lang_code: str) -> str:
    client = texttospeech.TextToSpeechClient()

    if lang_code == "ru-RU":
        voice_name = "ru-RU-Wavenet-D"
    elif lang_code == "en-US":
        voice_name = "en-US-Wavenet-F"
    else:
        voice_name = lang_code  # fallback

    voice = texttospeech.VoiceSelectionParams(
        language_code=lang_code,
        name=voice_name
    )

    synthesis_input = texttospeech.SynthesisInput(text=text)
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.OGG_OPUS
    )
    response = client.synthesize_speech(
        input=synthesis_input,
        voice=voice,
        audio_config=audio_config
    )
    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as out_file:
        out_file.write(response.audio_content)
        return out_file.name
        
async def send_bilingual_voice(chat_id: int, dialogue_text: str):
    audio_segments = []
    lines = [l.strip() for l in dialogue_text.strip().splitlines() if l.strip()]
    total = len(lines)

    progress_msg = await bot.send_message(chat_id, f"üîä –û–∑–≤—É—á–∫–∞ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0/{total}")

    def progress_bar(current: int, total: int, size: int = 20) -> str:
        filled = int(size * current / total)
        return "‚ñà" * filled + "‚ñë" * (size - filled)

    for i, line in enumerate(lines, start=1):
        raw_line = strip_html(line)
        if not raw_line or re.match(r"^[#\-\*]+$", raw_line.strip()):
            continue

        cleaned = clean_for_tts(raw_line)
        # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ru-RU
        if detect_lang(cleaned) == "ru":
            lang_code = "ru-RU"
        else:
            lang_code = "en-US"

        try:
            ogg_path = await generate_voice_snippet(cleaned, lang_code)
            segment = AudioSegment.from_file(ogg_path, format="ogg")
            audio_segments.append(segment)
            os.remove(ogg_path)
        except Exception as e:
            logging.exception(f"[voice] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ —Å—Ç—Ä–æ–∫–∏: {cleaned}\n{e}")
            continue

        # üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        bar = progress_bar(i, total)
        try:
            await progress_msg.edit_text(f"üéôÔ∏è –û–∑–≤—É—á–∫–∞ [{bar}] {i}/{total}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    if not audio_segments:
        await progress_msg.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å.")
        return

    final_audio = sum(audio_segments[1:], audio_segments[0])
    final_path = tempfile.NamedTemporaryFile(delete=False, suffix=".ogg").name
    final_audio.export(final_path, format="ogg")

    await bot.send_voice(chat_id=chat_id, voice=FSInputFile(final_path, filename="dialogue.ogg"))
    os.remove(final_path)

    await progress_msg.edit_text("‚úÖ –û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è thread ---------------------- #
def thread(message: Message) -> dict:
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and message.message_thread_id:
        return {"message_thread_id": message.message_thread_id}
    return {}

# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---------------------- #
from aiogram.filters import CommandObject

@dp.message(Command("start", prefix="/!"))
async def cmd_start(message: Message, command: CommandObject):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)

    # üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if command.args == "mynotes":
        await show_notes(message.chat.id, message=message)
        return
    elif command.args == "myreminders":
        await show_reminders(message.chat.id)
        return
    elif command.args == "support":
        support_mode_users.add(message.from_user.id)
        await message.answer(SUPPORT_PROMPT_TEXT)
        return

    greet = """–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî —Ç–≤–æ–π –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –≤–µ—Ä–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω ü§ñüí¨

üé§ –•–æ—á–µ—à—å ‚Äî –ø–æ–≥–æ–≤–æ—Ä–∏–º –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã 
üìÑ –ü—Ä–∏—Å—ã–ª–∞–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∫–æ–¥ ‚Äî –≤—Å—ë –ø—Ä–æ—á—Ç—É  
üß† –ü–æ–º–æ–≥—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
üìê –ë–æ–ª—å—à–µ –Ω–µ –ª–æ–º–∞–π –≥–æ–ª–æ–≤—É –Ω–∞–¥ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ–±—ä—è—Å–Ω—é!
üñº –ú–µ—á—Ç–∞–µ—à—å –æ —á—ë–º-—Ç–æ? –ü–æ–∫–∞–∂—É –∫–∞—Ä—Ç–∏–Ω–∫—É  
‚òÄÔ∏è –°–ø—Ä–æ—Å–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, –±—Ä–∞—Ç—å –ª–∏ –∑–æ–Ω—Ç  
üí± –ü–æ–¥—Å–∫–∞–∂—É –∫—É—Ä—Å –≤–∞–ª—é—Ç ‚Äî –±—É–¥—å –≤ –∫—É—Ä—Å–µ  
üìù –ó–∞–ø–æ–º–Ω—é –≤–∞–∂–Ω–æ–µ –≤ –∑–∞–º–µ—Ç–∫–∏  
‚è∞ –ù–∞–ø–æ–º–Ω—é –æ —Å–∞–º–æ–º –≥–ª–∞–≤–Ω–æ–º  
üá¨üáß –£—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–º–µ—Å—Ç–µ ‚Äî –ª–µ–≥–∫–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!

–Ø —Ä—è–¥–æ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üòä"""

    # üåê –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.chat.id in disabled_chats:
            disabled_chats.remove(message.chat.id)
            save_disabled_chats(disabled_chats)
            logging.info(f"[BOT] –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
        await message.answer("–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω ‚úÖ")
        await message.answer(greet, reply_markup=main_menu_keyboard)
        return

    # üì© –ï—Å–ª–∏ –≤ –õ–°
    await message.answer(greet, reply_markup=main_menu_keyboard)

@dp.message(Command("stop", prefix="/!"))
async def cmd_stop(message: Message, command: CommandObject):
    _register_message_stats(message)
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        disabled_chats.add(message.chat.id)
        save_disabled_chats(disabled_chats)
        logging.info(f"[BOT] –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
        await message.answer("–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ üö´")
    else:
        await message.answer("–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω üö´")
        
@dp.message(Command("help"))
async def cmd_help(message: Message):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)
    if message.chat.type == ChatType.PRIVATE:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support_request")]]
        )
        await bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:", reply_markup=keyboard, **thread(message))
    else:
        private_url = f"https://t.me/{BOT_USERNAME}?start=support"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=private_url)]]
        )
        await bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:", reply_markup=keyboard, **thread(message))

@dp.message(Command("adminstats"))
async def cmd_adminstats(message: Message):
    _register_message_stats(message)
    if message.from_user.id not in SUPPORT_IDS:
        return

    total_msgs = stats.get("messages_total", 0)
    unique_users_list = stats.get("unique_users", [])
    unique_users_count = len(set(unique_users_list))
    files_received = stats.get("files_received", 0)
    cmd_usage = stats.get("commands_used", {})

    total_cmds = sum(cmd_usage.values())
    avg_per_user = round(total_msgs / unique_users_count, 2) if unique_users_count else "‚Äî"

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_msgs}</b>\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{unique_users_count}</b>\n"
        f"üìé –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: <b>{files_received}</b>\n"
        f"üß† –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{total_cmds}</b>\n"
        f"üìà –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{avg_per_user}</b>"
    )

    chart_path = render_top_commands_bar_chart(cmd_usage)
    if chart_path:
        await message.answer_photo(photo=FSInputFile(chart_path, filename="top_commands.png"), caption=text)
        os.remove(chart_path)
    else:
        await message.answer(text + "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    _register_message_stats(message)
    if message.from_user.id != ADMIN_ID:
        return
    broadcast_prefix = "<b>Admin Message:</b>"
    if message.reply_to_message:
        broadcast_msg = message.reply_to_message
    else:
        text_parts = message.text.split(maxsplit=1)
        if len(text_parts) < 2:
            await message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        broadcast_text = text_parts[1]
        broadcast_msg = None

    recipients = unique_users.union(unique_groups)
    for recipient in recipients:
        try:
            if broadcast_msg:
                if broadcast_msg.text:
                    await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n{broadcast_msg.text}")
                elif broadcast_msg.photo:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_photo(chat_id=recipient, photo=broadcast_msg.photo[-1].file_id, caption=caption)
                elif broadcast_msg.video:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_video(chat_id=recipient, video=broadcast_msg.video.file_id, caption=caption)
                elif broadcast_msg.voice:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_voice(chat_id=recipient, voice=broadcast_msg.voice.file_id, caption=caption)
                elif broadcast_msg.document:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_document(chat_id=recipient, document=broadcast_msg.document.file_id, caption=caption)
                elif broadcast_msg.audio:
                    caption = broadcast_msg.caption or ""
                    caption = f"{broadcast_prefix}\n{caption}"
                    await bot.send_audio(chat_id=recipient, audio=broadcast_msg.audio.file_id, caption=caption)
                else:
                    await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n[–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ]")
            else:
                await bot.send_message(chat_id=recipient, text=f"{broadcast_prefix}\n{broadcast_text}")
        except Exception as e:
            logging.exception(f"[BROADCAST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {recipient}: {e}")
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.callback_query(F.data == "support_request")
async def handle_support_click(callback: CallbackQuery):
    await callback.answer()
    support_mode_users.add(callback.from_user.id)
    await callback.message.answer(SUPPORT_PROMPT_TEXT)

# ‚òÖ –ò–∑–º–µ–Ω—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mynotes ‚Äì —Ç–µ–ø–µ—Ä—å –±–µ–∑ prefix, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
@dp.message(Command("mynotes"))
async def show_notes_command(message: Message):
    _register_message_stats(message)
    if message.chat.type != ChatType.PRIVATE:
        private_url = f"https://t.me/{BOT_USERNAME}?start=mynotes"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏", url=private_url)]
        ])
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", reply_markup=keyboard)
        return
    await show_notes(message.chat.id)

@dp.message(Command("myreminders", prefix="/!"))
async def show_reminders_command(message: Message):
    _register_message_stats(message)
    if message.chat.type != ChatType.PRIVATE:
        private_url = f"https://t.me/{BOT_USERNAME}?start=myreminders"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", url=private_url)]
        ])
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", reply_markup=keyboard)
        return
    await show_reminders(message.chat.id)

@dp.message(Command("learn_en"))
async def cmd_learn_en(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ö—É—Ä—Å", callback_data="learn_course")],
        [InlineKeyboardButton(text="üìô –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="learn_grammar")],
        [InlineKeyboardButton(text="üéØ –ö–≤–∏–∑", callback_data="learn_quiz")],
        [InlineKeyboardButton(text="üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="learn_dialogues")],
        [InlineKeyboardButton(text="üß† –°–ª–æ–≤–æ –¥–Ω—è", callback_data="learn_word")],
        [InlineKeyboardButton(text="üìì –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="learn_vocab")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="learn_add_word")],
        [InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞", callback_data="review_menu")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="learn_progress")],
        [InlineKeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="learn_achievements")],
        [InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="learn_reminders")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="learn_close")]
    ])
    await message.answer("üá¨üáß <b>–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</b>\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

@dp.callback_query(F.data == "learn_back")
async def handle_learn_back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await cmd_learn_en(callback.message)

@dp.callback_query(F.data == "learn_toggle_reminders")
async def handle_toggle_reminders(callback: CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    current = vocab_reminders_enabled.get(str(uid), True)
    vocab_reminders_enabled[str(uid)] = not current
    save_vocab_reminder_settings()
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if not current else "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await callback.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}", show_alert=True)
    await callback.message.delete()
    await cmd_learn_en(callback.message)

@dp.callback_query(F.data == "learn_reminders")
async def handle_learn_reminders(callback: CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    enabled = vocab_reminders_enabled.get(str(uid), True)

    text = (
        "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Å–ª–æ–≤</b>\n\n"
        "–ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.\n"
        f"–°–µ–π—á–∞—Å: <b>{'–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå'}</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üö´ –í—ã–∫–ª—é—á–∏—Ç—å" if enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                callback_data="learn_toggle_reminders"
            )
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "learn_close")
async def handle_learn_close(callback: CallbackQuery):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

@dp.callback_query(F.data == "learn_dialogues")
async def handle_learn_dialogues(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëã Small Talk", callback_data="dialogue_topic:Small Talk")],
        [InlineKeyboardButton(text="üõ´ –ê—ç—Ä–æ–ø–æ—Ä—Ç", callback_data="dialogue_topic:Airport")],
        [InlineKeyboardButton(text="‚òï –ö–∞—Ñ–µ", callback_data="dialogue_topic:Cafe")],
        [InlineKeyboardButton(text="üè® –û—Ç–µ–ª—å", callback_data="dialogue_topic:Hotel")],
        [InlineKeyboardButton(text="üßë‚Äç‚öïÔ∏è –£ –≤—Ä–∞—á–∞", callback_data="dialogue_topic:Doctor")],
        [InlineKeyboardButton(text="üõçÔ∏è –ü–æ–∫—É–ø–∫–∏", callback_data="dialogue_topic:Shopping")],
        [InlineKeyboardButton(text="üöï –¢–∞–∫—Å–∏", callback_data="dialogue_topic:Taxi")],
        [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫", callback_data="dialogue_topic:Phone Call")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞ —É—Ä–æ–∫–µ", callback_data="dialogue_topic:In Class")],
        [InlineKeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏", callback_data="dialogue_topic:Making an Appointment")],
        [InlineKeyboardButton(text="üß≠ –°–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Ä–æ–≥—É", callback_data="dialogue_topic:Asking for Directions")],
        [InlineKeyboardButton(text="üíº –ò–Ω—Ç–µ—Ä–≤—å—é", callback_data="dialogue_topic:Job Interview")],
        [InlineKeyboardButton(text="üè¶ –í –±–∞–Ω–∫–µ", callback_data="dialogue_topic:Bank")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞:", reply_markup=keyboard)
# ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞ ‚îÄ‚îÄ‚îÄ#
@dp.callback_query(F.data.startswith("dialogue_topic:"))
async def handle_dialogue_topic(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

    topic_raw = callback.data.split(":", 1)[1]
    topic_title = topic_raw.replace("_", " ").title()

    await callback.message.edit_text(
        f"üìñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é 3‚Äì5 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ —Ç–µ–º—É ¬´{topic_title}¬ª‚Ä¶",
        parse_mode="HTML"
    )

    # –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    prompt = (
        f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –°–æ—Å—Ç–∞–≤—å 3‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ —Ç–µ–º—É ¬´{topic_title}¬ª.\n"
        "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ —á–∏—Å—Ç—ã–º JSON (–±–µ–∑ ```), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "[\n"
        "  {\n"
        "    \"title\": \"Ordering Coffee\",\n"
        "    \"dialogue\": [\n"
        "      {\"speaker\": \"You\", \"en\": \"Hi, can I get a cappuccino to go, please?\", \"ru\": \"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–æ–∂–Ω–æ –º–Ω–µ –∫–∞–ø—É—á–∏–Ω–æ —Å —Å–æ–±–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?\"},\n"
        "      {\"speaker\": \"VAI\", \"en\": \"Sure. What size would you like?\", \"ru\": \"–ö–æ–Ω–µ—á–Ω–æ. –ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?\"}\n"
        "    ]\n"
        "  },\n"
        "  ‚Ä¶\n"
        "]\n"
        "–ù–∏–∫–∞–∫–∏—Ö Markdown‚Äë–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON-–º–∞—Å—Å–∏–≤."
    )

    resp = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
    raw = resp.text.strip()

    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ ```json ‚Ä¶ ```  
    raw = re.sub(r"^```json\s*|\s*```$", "", raw, flags=re.IGNORECASE).strip()

    try:
        dialogs = json.loads(raw)
    except json.JSONDecodeError:
        await callback.message.edit_text(
            f"<b>üí¨ –¢–µ–º–∞: {topic_title}</b>\n\n"
            f"<code>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å JSON, –≤–æ—Ç —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ Gemini:</code>\n"
            f"{escape(raw)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
            ])
        )
        return

    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫
    for dlg in dialogs:
        for turn in dlg.get("dialogue", []):
            turn["en"] = re.sub(r"\*+", "", turn["en"]).strip()
            turn["ru"] = re.sub(r"\*+", "", turn["ru"]).strip()

    # –°–æ–±–∏—Ä–∞–µ–º HTML
    lines = [f"<b>üí¨ –¢–µ–º–∞: {topic_title}</b>\n"]
    for idx, block in enumerate(dialogs, 1):
        title = block.get("title", f"–î–∏–∞–ª–æ–≥ {idx}")
        lines.append(f"<u>{title}</u>")
        for turn in block["dialogue"]:
            sp = turn["speaker"]
            lines.append(f"‚Ä¢ <b>{sp}:</b> {turn['en']}")
            lines.append(f"  <i>¬´{turn['ru']}¬ª</i>")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏

    full_text = "\n".join(lines)

    await state.update_data(
        last_dialogue_json=dialogs,
        last_dialogue=full_text
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîä –û–∑–≤—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="dialogue_voice")],
        [InlineKeyboardButton(text="üìò –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="dialogue_add_words")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")],
    ])

    await callback.message.edit_text(
        full_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "review_menu")
async def show_review_mode(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –¢–æ–ª—å–∫–æ '—Å–æ–∑—Ä–µ–≤—à–∏–µ'", callback_data="learn_review")],
        [InlineKeyboardButton(text="üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å", callback_data="vocab_repeat_all")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_vocab")]
    ])
    await callback.answer()
    await callback.message.edit_text("üß† –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data == "learn_course")
async def handle_learn_course(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò A1", callback_data="learn_level:A1")],
        [InlineKeyboardButton(text="üìó A2", callback_data="learn_level:A2")],
        [InlineKeyboardButton(text="üìô B1", callback_data="learn_level:B1")],
        [InlineKeyboardButton(text="üìï B2", callback_data="learn_level:B2")],
        [InlineKeyboardButton(text="üìì C1", callback_data="learn_level:C1")],
        [InlineKeyboardButton(text="üìî C2", callback_data="learn_level:C2")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("learn_level:"))
async def handle_learn_level(callback: CallbackQuery, state: FSMContext):
    level = callback.data.split(":")[1]
    await callback.answer()
    await callback.message.edit_text(f"üìö –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {level}, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    prompt = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
        f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.\n"
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ 3‚Äì5 —Ç–µ–º. –î–ª—è –∫–∞–∂–¥–æ–π:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –≤ —Å–∫–æ–±–∫–∞—Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)\n"
        "- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "- –ó–∞–¥–∞–Ω–∏–µ\n\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML, –≤–µ—Ä–Ω–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü—Ä–∏–º–µ—Ä:\n\n"
        "–£—Ä–æ–≤–µ–Ω—å: A2 (Pre-Intermediate)\n\n"
        "–¢–µ–º–∞ 1: –ù–∞–∑–≤–∞–Ω–∏–µ (Title)\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: ...\n"
        "–ó–∞–¥–∞–Ω–∏–µ: ...\n\n"
        "–¢–µ–º–∞ 2: ..."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw_text = response.text.strip()
        text = format_gemini_response(raw_text)

        # üí° –î–æ–±–∞–≤–∏–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –≤—Ä—É—á–Ω—É—é
        formatted = f"<b>üìò –£—Ä–æ–≤–µ–Ω—å {level}</b>\n\n"
        formatted += text.replace("–¢–µ–º–∞ ", "<b>‚Ä¢ –¢–µ–º–∞ ").replace("\n–û–ø–∏—Å–∞–Ω–∏–µ:", "</b>\n  <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>").replace("\n–ó–∞–¥–∞–Ω–∏–µ:", "\n  <b>–ó–∞–¥–∞–Ω–∏–µ:</b>")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∏ –∫–≤–∏–∑–∞
        await state.update_data(last_course=formatted)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â—ë —Ç–µ–º—ã", callback_data=f"learn_more:{level}")],
            [
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ", callback_data=f"learn_quiz:{level}"),
                InlineKeyboardButton(text="üîä –û–∑–≤—É—á–∏—Ç—å —Ç–µ–º—ã", callback_data=f"learn_voice:{level}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–≤–Ω—è–º", callback_data="learn_course")]
        ])

        await callback.message.edit_text(formatted, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–∞.")
        logging.exception(f"[learn_level:{level}] –û—à–∏–±–∫–∞ Gemini: {e}")

@dp.callback_query(F.data.startswith("learn_voice:"))
async def handle_learn_voice(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üéß –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–º—ã...")

    data = await state.get_data()
    course_text = data.get("last_course")

    if not course_text:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∑–≤—É—á–∫–∏.")
        return

    try:
        # ‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω—É—é –æ–∑–≤—É—á–∫—É (—Å—Ç—Ä–æ–∫–∞ –∑–∞ —Å—Ç—Ä–æ–∫–æ–π, auto-detect —è–∑—ã–∫–∞)
        await send_bilingual_voice(callback.message.chat.id, course_text)
    except Exception as e:
        logging.exception(f"[learn_voice] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–º—ã.")

@dp.callback_query(F.data.startswith("learn_quiz:"))
async def handle_learn_quiz(callback: CallbackQuery):
    level = callback.data.split(":")[1]
    user_id = callback.from_user.id
    await callback.answer(f"üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è {level}...")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç –∏–∑ 3 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è {level}.\n"
        "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (A, B, C, D), —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ.\n"
        "–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-–º–∞—Å—Å–∏–≤–∞:\n\n"
        '[\n'
        '  {\n'
        '    "question": "What is the capital of France?",\n'
        '    "options": {\n'
        '      "A": "London",\n'
        '      "B": "Paris",\n'
        '      "C": "Berlin",\n'
        '      "D": "Madrid"\n'
        '    },\n'
        '    "answer": "B"\n'
        '  }\n'
        ']'
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw_text = response.text.strip()

        if not raw_text:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")

        # üîß –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É —Ç–∏–ø–∞ ```json ... ```
        if raw_text.startswith("```json"):
            raw_text = raw_text[7:]  # —É–¥–∞–ª—è–µ–º ```json\n
        if raw_text.endswith("```"):
            raw_text = raw_text[:-3]  # —É–¥–∞–ª—è–µ–º ```

        # üß™ –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            questions = json.loads(raw_text)
        except json.JSONDecodeError:
            logging.error(f"[learn_quiz:{level}] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:\n{raw_text}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞. Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        quiz_storage[user_id] = {}
        for i, q in enumerate(questions):
            quiz_storage[user_id][i + 1] = q["answer"]

            buttons = [
                [InlineKeyboardButton(text=f"{k}) {v}", callback_data=f"quiz_answer:{level}:{i+1}:{k}")]
                for k, v in q["options"].items()
            ]

            await callback.message.answer(
                f"<b>–í–æ–ø—Ä–æ—Å {i+1}:</b> {q['question']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                parse_mode="HTML"
            )

    except Exception as e:
        logging.exception(f"[learn_quiz:{level}] –û—à–∏–±–∫–∞ Gemini: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç.")

async def send_quiz_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    index = data["current_question"]

    if index >= len(questions):
        score = data["score"]
        level = data["level"]
        await message.answer(
            f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {len(questions)}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data=f"learn_level:{level}")]
            ])
        )
        await state.clear()
        return

    question = questions[index]
    text = f"<b>–í–æ–ø—Ä–æ—Å {index + 1}:</b> {question['question']}"
    buttons = [
        [InlineKeyboardButton(text=f"{key}) {val}", callback_data=f"quiz_answer:{key}")]
        for key, val in question["options"].items()
    ]
    await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="HTML")

@dp.callback_query(F.data == "dialogue_voice")
async def handle_dialogue_voice(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üéß –û–∑–≤—É—á–∏–≤–∞—é –¥–∏–∞–ª–æ–≥...")

    data = await state.get_data()
    dialogue = data.get("last_dialogue")

    if not dialogue:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏.")
        return

    await send_bilingual_voice(callback.message.chat.id, dialogue)

@dp.callback_query(F.data == "learn_achievements")
async def show_achievements(callback: CallbackQuery):
    uid = str(callback.from_user.id)
    await callback.answer()

    achievements = user_achievements.get(uid, [])

    if achievements:
        text = "<b>üèÜ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n" + "\n".join(f"‚Ä¢ {a}" for a in achievements)
    else:
        text = "üò∂ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –í—Å—ë –≤–ø–µ—Ä–µ–¥–∏!"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "dialogue_add_words")
async def handle_dialogue_add_words(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    dialogue = data.get("last_dialogue")

    if not dialogue:
        await callback.message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    prompt = (
        "–í–æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–∏–∞–ª–æ–≥. –ù–∞–π–¥–∏ 3‚Äì5 –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–ª–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤, "
        "–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∞–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä. –§–æ—Ä–º–∞—Ç:\n\n"
        "–°–ª–æ–≤–æ: ...\n–ó–Ω–∞—á–µ–Ω–∏–µ: ...\n–ü—Ä–∏–º–µ—Ä: ...\n---\n\n"
        + dialogue
    )

    await callback.message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥...")

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw = response.text.strip()
        # –±—ã—Å—Ç—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* –≤ HTML‚Äë—Ç–µ–≥–∏
        html = format_gemini_response(raw)
        await state.update_data(dialogue_words=html)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", callback_data="dialogue_add_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dialogue_add_cancel")]
        ])
        await callback.message.answer(f"<b>üìò –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</b>\n\n{html}",
                                      reply_markup=keyboard,
                                      parse_mode="HTML")
    except Exception as e:
        logging.exception(f"[dialogue_add_words] –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ª–æ–≥.")

@dp.callback_query(F.data == "dialogue_add_confirm")
async def handle_dialogue_add_confirm(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = await state.get_data()
    text = data.get("dialogue_words", "")

    count = 0
    for block in text.split("---"):
        lines = block.strip().split("\n")
        if len(lines) < 3:
            continue
        word = lines[0].replace("–°–ª–æ–≤–æ:", "").strip()
        meaning = lines[1].replace("–ó–Ω–∞—á–µ–Ω–∏–µ:", "").strip()
        example = lines[2].replace("–ü—Ä–∏–º–µ—Ä:", "").strip()
        entry = {
            "word": word,
            "meaning": meaning,
            "example": example,
            "last_reviewed": datetime.utcnow().isoformat(),
            "review_level": 0
        }
        user_vocab.setdefault(uid, []).append(entry)
        count += 1

    save_vocab(user_vocab)
    await check_achievements(uid, callback)
    await callback.message.edit_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: <b>{count}</b>", parse_mode="HTML")
    await state.clear()

@dp.callback_query(F.data == "dialogue_add_cancel")
async def handle_dialogue_add_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.delete()
    await state.clear()


@dp.callback_query(F.data.startswith("learn_more:"))
async def handle_learn_more(callback: CallbackQuery):
    level = callback.data.split(":")[1]
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã...")

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ—â—ë 3‚Äì5 –Ω–æ–≤—ã—Ö —É—á–µ–±–Ω—ã—Ö —Ç–µ–º –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É.\n"
        "–§–æ—Ä–º–∞—Ç:\n\n"
        "‚Ä¢ –¢–µ–º–∞: –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: ...\n"
        "–ó–∞–¥–∞–Ω–∏–µ: ..."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        text = format_gemini_response(response.text.strip())
        chat_history[callback.from_user.id] = text

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ï—â—ë —Ç–µ–º—ã", callback_data=f"learn_more:{level}"),
                InlineKeyboardButton(text="üîä –û–∑–≤—É—á–∏—Ç—å", callback_data=f"voice_material:{level}")
            ],
            [
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ", callback_data=f"quiz_for:{level}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–≤–Ω—è–º", callback_data="learn_course")]
        ])

        await callback.message.answer(f"<b>üìò –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {level}</b>\n\n{text}", reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã.")
        logging.exception(f"[learn_more:{level}] –û—à–∏–±–∫–∞ Gemini: {e}")

@dp.callback_query(F.data.startswith("voice_material:"))
async def handle_voice_material(callback: CallbackQuery):
    uid = callback.from_user.id
    await callback.answer()

    text = chat_history.get(uid)
    if not text:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç.")
        return

    await send_voice_message(callback.message.chat.id, clean_for_tts(text))

@dp.callback_query(F.data.startswith("quiz_for:"))
async def handle_quiz_for_topic(callback: CallbackQuery):
    level = callback.data.split(":")[1]
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ...")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –º–∏–Ω–∏-–∫–≤–∏–∑ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —É—Ä–æ–≤–Ω—é {level}. "
        "–°–¥–µ–ª–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A‚ÄìD), "
        "—É–∫–∞–∑—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –§–æ—Ä–º–∞—Ç:\n\n"
        "1. –í–æ–ø—Ä–æ—Å\nA) ...\nB) ...\nC) ...\nD) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X\n\n"
        "2. ... –∏ —Ç.–¥."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        text = format_gemini_response(response.text.strip())

        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = parse_quiz_questions(text)

        if not questions:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ—Å—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        quiz_storage[callback.from_user.id] = {i + 1: q["answer"] for i, q in enumerate(questions)}

        for idx, q in enumerate(questions, start=1):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="A", callback_data=f"quiz_answer:{level}:{idx}:A"),
                    InlineKeyboardButton(text="B", callback_data=f"quiz_answer:{level}:{idx}:B"),
                    InlineKeyboardButton(text="C", callback_data=f"quiz_answer:{level}:{idx}:C"),
                    InlineKeyboardButton(text="D", callback_data=f"quiz_answer:{level}:{idx}:D"),
                ]
            ])
            await callback.message.answer(f"<b>–í–æ–ø—Ä–æ—Å {idx}:</b>\n{q['question']}", reply_markup=keyboard)

        await callback.message.answer("–í—ã–±–∏—Ä–∞–π –æ—Ç–≤–µ—Ç—ã üëá —è —Å–∫–∞–∂—É, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ—Ç.")

    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.")
        logging.exception(f"[quiz_for:{level}] –û—à–∏–±–∫–∞ Gemini: {e}")

@dp.callback_query(F.data == "learn_quiz")
async def handle_quiz_menu(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¶ A1", callback_data="quiz_level:A1")],
        [InlineKeyboardButton(text="üü© A2", callback_data="quiz_level:A2")],
        [InlineKeyboardButton(text="üü® B1", callback_data="quiz_level:B1")],
        [InlineKeyboardButton(text="üü• B2", callback_data="quiz_level:B2")],
        [InlineKeyboardButton(text="‚¨õ C1", callback_data="quiz_level:C1")],
        [InlineKeyboardButton(text="üü´ C2", callback_data="quiz_level:C2")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text("üéØ <b>–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–≤–∏–∑–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É:</b>", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("quiz_level:"))
async def handle_quiz_level(callback: CallbackQuery):
    level = callback.data.split(":")[1]
    await callback.answer()
    await callback.message.edit_text(f"üìö –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–≤–∏–∑ –¥–ª—è —É—Ä–æ–≤–Ω—è <b>{level}</b>...")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –∫–≤–∏–∑ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è {level}. "
        "–°–¥–µ–ª–∞–π 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A‚ÄìD), "
        "—É–∫–∞–∑—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n\n"
        "1. –í–æ–ø—Ä–æ—Å\nA) ...\nB) ...\nC) ...\nD) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X\n\n"
        "2. ... –∏ —Ç.–¥."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        text = format_gemini_response(response.text.strip())

        questions = parse_quiz_questions(text)

        if not questions:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∏–∑.")
            return

        for idx, q in enumerate(questions, start=1):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="A", callback_data=f"quiz_answer:{level}:{idx}:A"),
                    InlineKeyboardButton(text="B", callback_data=f"quiz_answer:{level}:{idx}:B"),
                    InlineKeyboardButton(text="C", callback_data=f"quiz_answer:{level}:{idx}:C"),
                    InlineKeyboardButton(text="D", callback_data=f"quiz_answer:{level}:{idx}:D")
                ]
            ])
            await callback.message.answer(f"<b>–í–æ–ø—Ä–æ—Å {idx}:</b>\n{q['question']}", reply_markup=keyboard)

        next_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ù–æ–≤—ã–π –∫–≤–∏–∑", callback_data=f"quiz_level:{level}")],
            [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="learn_progress")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_quiz")]
        ])
        await callback.message.answer("‚úÖ –í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –∏ —è —Å–∫–∞–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ—Ç üòâ", reply_markup=next_button)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        quiz_storage[callback.from_user.id] = {i + 1: q["answer"] for i, q in enumerate(questions)}

    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞.")
        logging.exception(f"[quiz_level:{level}] –û—à–∏–±–∫–∞ Gemini: {e}")

@dp.callback_query(F.data.startswith("quiz_answer:"))
async def handle_quiz_answer(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.")
        return

    _, level, q_number_str, user_choice = parts
    user_id = callback.from_user.id

    try:
        q_number = int(q_number_str)
    except:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    correct_answer = quiz_storage.get(user_id, {}).get(q_number)
    if not correct_answer:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
        return

    if user_choice == correct_answer:
        progress = user_progress.setdefault(callback.from_user.id, {})
        progress[level] = progress.get(level, 0) + 1
        save_progress(user_progress)
        correct = user_progress[callback.from_user.id][level]
        msg = f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{correct}</b> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é {level}"
        await callback.message.answer(msg)
        await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!", show_alert=False)
        await callback.message.edit_text(callback.message.text + f"\n\n‚úÖ –û—Ç–≤–µ—Ç: <b>{user_choice}</b>")
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=False)
        await callback.message.edit_text(callback.message.text + f"\n\n‚ùå –¢–≤–æ–π –æ—Ç–≤–µ—Ç: <b>{user_choice}</b>\n‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>")


@dp.callback_query(F.data == "learn_progress")
async def handle_learn_progress(callback: CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    progress_data = user_progress.get(uid, {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])

    if not progress_data:
        await callback.message.edit_text(
            "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü—Ä–æ–π–¥–∏ –ø–∞—Ä—É –∫–≤–∏–∑–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ + –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
    text = "<b>üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–≤–Ω—è–º:</b>\n"
    for level, correct_count in progress_data.items():
        text += f"‚Ä¢ {level}: <b>{correct_count}</b> –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress_reset")
    ])

    await callback.message.edit_text(text.strip(), reply_markup=keyboard)


@dp.callback_query(F.data == "learn_add_word")
async def handle_add_word_click(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:")
    await state.set_state(VocabAdd.waiting_for_word)

@dp.message(VocabAdd.waiting_for_word)
async def handle_add_word_input(message: Message, state: FSMContext):
    uid = message.from_user.id
    word_raw = message.text.strip()

    prompt = (
        f"–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ '{word_raw}'. "
        "–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ó–Ω–∞—á–µ–Ω–∏–µ: ...\n–ü—Ä–∏–º–µ—Ä: ..."
    )

    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä...")
    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw = response.text.strip().split("\n")
        meaning = raw[0].replace("–ó–Ω–∞—á–µ–Ω–∏–µ:", "").strip()
        example = raw[1].replace("–ü—Ä–∏–º–µ—Ä:", "").strip()

        await state.update_data(word=word_raw, meaning=meaning, example=example)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_add_word"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_add_word"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_word")
            ]
        ])
        await message.answer(
            f"<b>–°–ª–æ–≤–æ:</b> {word_raw}\n<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {meaning}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {example}",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.exception(f"[VOCAB_ADD_INTERFACE] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.")
        await state.clear()

@dp.callback_query(F.data == "progress_reset")
async def handle_progress_reset(callback: CallbackQuery):
    uid = callback.from_user.id
    if uid in user_progress:
        user_progress.pop(uid)
        save_progress(user_progress)
        await callback.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω ‚ùå", show_alert=True)
    else:
        await callback.answer("–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üòÑ", show_alert=True)

@dp.callback_query(F.data == "learn_word")
async def handle_word_of_the_day(callback: CallbackQuery):
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–æ–≤–æ –¥–Ω—è...")

    uid = callback.from_user.id
    user_history = user_word_of_day_history.get(uid, [])

    attempts = 0
    max_attempts = 5
    word = ""
    meaning = ""
    example = ""

    while attempts < max_attempts:
        attempts += 1

        prompt = (
            "–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ–µ –∏ –≤–∞–∂–Ω–æ–µ. "
            "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞–≤–∞–ª —Ä–∞–Ω—å—à–µ, –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π generic –≤—Ä–æ–¥–µ 'hello'.\n\n"
            "–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–°–ª–æ–≤–æ: cat\n"
            "–ó–Ω–∞—á–µ–Ω–∏–µ: –ö–æ—à–∫–∞\n"
            "–ü—Ä–∏–º–µ—Ä: I have a cat.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –∫—Ä–æ–º–µ —ç—Ç–∏—Ö —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫. "
            "–ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —É–∫–∞–∂–∏ ¬´–°–ª–æ–≤–æ:¬ª, ¬´–ó–Ω–∞—á–µ–Ω–∏–µ:¬ª, ¬´–ü—Ä–∏–º–µ—Ä:¬ª."
        )

        try:
            response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
            raw = response.text.strip().split("\n")

            for line in raw:
                if line.lower().startswith("—Å–ª–æ–≤–æ:"):
                    word = line.split(":", 1)[1].strip()
                elif line.lower().startswith("–∑–Ω–∞—á–µ–Ω–∏–µ:"):
                    meaning = line.split(":", 1)[1].strip()
                elif line.lower().startswith("–ø—Ä–∏–º–µ—Ä:"):
                    example = line.split(":", 1)[1].strip()

            if word and word.lower() not in [w.lower() for w in user_history]:
                user_history.append(word)
                user_word_of_day_history[uid] = user_history[-100:]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–ª–æ–≤–∞–º–∏
                save_word_of_day_history(user_word_of_day_history)
                break
        except Exception as e:
            logging.exception(f"[WORD_OF_DAY_ATTEMPT] –û—à–∏–±–∫–∞: {e}")
            continue

    if not word:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ.")
        return

    text = (
        f"<b>üìò –°–ª–æ–≤–æ –¥–Ω—è:</b> <i>{word}</i>\n\n"
        f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {escape(meaning)}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> {escape(example)}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="learn_word")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "learn_vocab")
async def handle_vocab(callback: CallbackQuery):
    uid = callback.from_user.id
    await callback.answer()

    vocab = user_vocab.get(uid, [])
    if not vocab:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="vocab_add")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
        ])
        await callback.message.edit_text("üìì –í —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤.", reply_markup=keyboard)
        return

    for i, entry in enumerate(vocab):
        word = entry['word']
        meaning = entry['meaning']
        example = entry['example']
        last_reviewed = entry.get('last_reviewed', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        date_str = ""
        try:
            dt = datetime.fromisoformat(last_reviewed)
            date_str = dt.strftime('%d.%m.%Y')
        except:
            date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        review_level = entry.get("review_level", 0)
        progress = "üîπ" * review_level + "‚ö™" * (5 - review_level)
        progress_percent = int((review_level / 5) * 100)
        text = (
            f"<b>{i+1}. {word}</b> ‚Äî {meaning}\n"
            f"<i>{example}</i>\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: <code>{date_str}</code>\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {progress_percent}% {progress}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"vocab_delete:{i}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"vocab_edit:{i}")
            ]
        ])
        await callback.message.answer(text, reply_markup=keyboard)

    bottom = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="vocab_add")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="learn_vocab_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back"),
         InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="vocab_close")]
    ])
    await callback.message.answer("üìö –í–æ—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞:", reply_markup=bottom)

@dp.callback_query(F.data == "vocab_add")
async def ask_add_vocab(callback: CallbackQuery):
    uid = callback.from_user.id
    await callback.message.delete()
    pending_note_or_reminder[uid] = {"type": "add_vocab"}
    await bot.send_message(uid, "‚úçÔ∏è –í–≤–µ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å.")

@dp.callback_query(F.data == "learn_review")
async def handle_vocab_review(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id

    if not vocab_reminders_enabled.get(str(uid), True):
        await callback.message.edit_text("üîï –£ —Ç–µ–±—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤. –í–∫–ª—é—á–∏ –∏—Ö, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞.")
        return
    
    await callback.answer()
    await callback.message.delete()

    vocab = user_vocab.get(uid, [])
    if not vocab:
        await callback.message.edit_text("üìì –í —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        return

    now = datetime.utcnow()
    due_words = []
    for i, entry in enumerate(vocab):
        last = datetime.fromisoformat(entry.get("last_reviewed", now.isoformat()))
        level = entry.get("review_level", 0)
        interval_days = [0, 1, 2, 4, 7, 14, 30]
        interval = interval_days[min(level, len(interval_days) - 1)]
        if (now - last).days >= interval:
            due_words.append((i, entry))

    if not due_words:
        await callback.message.edit_text("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.")
        return

    await state.update_data(queue=due_words, index=0)
    await state.set_state(VocabReview.reviewing)
    await send_next_review_word(callback.message.chat.id, state)

async def send_next_review_word(uid: int, state: FSMContext):
    data = await state.get_data()
    queue = data.get("queue", [])
    index = data.get("index", 0)

    if index >= len(queue):
        await bot.send_message(uid, "‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!")
        await state.clear()
        return

    i, entry = queue[index]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚úÖ –ü–æ–º–Ω—é", callback_data=f"review_remember:{i}"),
        InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–º–Ω—é", callback_data=f"review_forget:{i}")
    ],
    [
        InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="review_skip"),
        InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø", callback_data="review_stop")
    ]
])

    await bot.send_message(
        uid,
        f"<b>{entry['word']}</b> ‚Äî {entry['meaning']}\n\n<i>{entry['example']}</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("review_remember:"))
async def review_remember(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    i = int(callback.data.split(":")[1])
    user_vocab[uid][i]["review_level"] = min(user_vocab[uid][i].get("review_level", 0) + 1, 5)
    user_vocab[uid][i]["last_reviewed"] = datetime.utcnow().isoformat()
    save_vocab(user_vocab)

    uid_str = str(uid)
    user_stats = review_stats.get(uid_str, {"correct": 0, "wrong": 0})
    user_stats["correct"] += 1
    review_stats[uid_str] = user_stats
    save_review_stats()
    await check_achievements(uid, callback)


    data = await state.get_data()
    data["index"] += 1
    await state.update_data(data)
    await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
    await callback.message.delete()
    await send_next_review_word(uid, state)

@dp.callback_query(F.data.startswith("review_forget:"))
async def review_forget(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    i = int(callback.data.split(":")[1])
    user_vocab[uid][i]["review_level"] = max(user_vocab[uid][i].get("review_level", 0) - 1, 0)
    user_vocab[uid][i]["last_reviewed"] = datetime.utcnow().isoformat()
    save_vocab(user_vocab)

    uid_str = str(uid)
    user_stats = review_stats.get(uid_str, {"correct": 0, "wrong": 0})
    user_stats["wrong"] += 1
    review_stats[uid_str] = user_stats
    save_review_stats()

    data = await state.get_data()
    data["index"] += 1
    await state.update_data(data)
    await callback.answer("üîÅ –ó–∞–ø–æ–º–Ω–∏—à—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
    await callback.message.delete()
    await send_next_review_word(uid, state)

@dp.callback_query(F.data == "review_skip")
async def review_skip(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data["index"] += 1
    await state.update_data(data)
    await callback.answer("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await send_next_review_word(callback.from_user.id, state)

@dp.callback_query(F.data == "review_stop")
async def review_stop(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("‚èπ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await callback.message.edit_text("üîï –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

@dp.callback_query(F.data == "learn_vocab_stats")
async def handle_vocab_stats(callback: CallbackQuery):
    uid = callback.from_user.id
    await callback.answer()

    vocab = user_vocab.get(uid, [])
    if not vocab:
        await callback.message.edit_text("üìì –í —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤.")
        return

    total = len(vocab)
    levels = {}
    now = datetime.utcnow()

    next_reviews = []

    for entry in vocab:
        level = entry.get("level", 1)
        levels[level] = levels.get(level, 0) + 1

        due = entry.get("next_review")
        if due:
            try:
                due_dt = datetime.fromisoformat(due)
                if due_dt > now:
                    next_reviews.append(due_dt)
            except:
                continue

    stats_text = f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤–∞—Ä—è</b>\n\n–í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{total}</b>\n"

    for lvl in sorted(levels):
        stats_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {lvl}: <b>{levels[lvl]}</b>\n"

    if next_reviews:
        nearest = min(next_reviews)
        in_minutes = int((nearest - now).total_seconds() // 60)
        stats_text += f"\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ <b>{in_minutes} –º–∏–Ω</b>"
    else:
        stats_text += "\n‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é!"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text(stats_text.strip(), reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "confirm_add_word")
async def confirm_add_word(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = await state.get_data()
    entry = {
        "word": data["word"],
        "meaning": data["meaning"],
        "example": data["example"],
        "last_reviewed": datetime.utcnow().isoformat(),
        "review_level": 0
    }
    user_vocab.setdefault(uid, []).append(entry)
    save_vocab(user_vocab)
    await callback.message.edit_text(f"‚úÖ –°–ª–æ–≤–æ <b>{data['word']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    await state.clear()

@dp.callback_query(F.data == "edit_add_word")
async def edit_add_word(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    await state.set_state(VocabAdd.waiting_for_word)

@dp.callback_query(F.data == "cancel_add_word")
async def cancel_add_word(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

 
@dp.callback_query(F.data == "vocab_close")
async def close_vocab(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data.startswith("vocab_delete:"))
async def handle_vocab_delete(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    vocab = user_vocab.get(uid, [])

    if 0 <= index < len(vocab):
        deleted_word = vocab.pop(index)
        save_vocab(user_vocab)
        await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ: {deleted_word['word']}", show_alert=True)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    await handle_vocab(callback)

@dp.callback_query(F.data.startswith("vocab_edit:"))
async def handle_vocab_edit(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    vocab = user_vocab.get(uid, [])

    if 0 <= index < len(vocab):
        await state.update_data(edit_index=index)
        await state.set_state(VocabEdit.waiting_for_field)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –°–ª–æ–≤–æ", callback_data="edit_field:word")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–≤–æ–¥", callback_data="edit_field:meaning")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–∏–º–µ—Ä", callback_data="edit_field:example")]
        ])
        await callback.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.callback_query(F.data.startswith("edit_field:"))
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    await state.update_data(field_to_edit=field)
    await state.set_state(VocabEdit.waiting_for_new_value)
    await callback.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{field}</b>:")

@dp.message(VocabEdit.waiting_for_new_value)
async def save_new_value(message: Message, state: FSMContext):
    uid = message.from_user.id
    new_value = message.text.strip()
    data = await state.get_data()

    index = data["edit_index"]
    field = data["field_to_edit"]
    vocab = user_vocab.get(uid, [])

    if 0 <= index < len(vocab) and field in ["word", "meaning", "example"]:
        vocab[index][field] = new_value
        save_vocab(user_vocab)
        await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{field}</b> ‚Üí {new_value}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")

    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    fake_callback = type("Fake", (), {"from_user": message.from_user, "message": message})
    await handle_vocab(fake_callback)


@dp.callback_query(F.data.in_({"review_remember", "review_forget"}))
async def handle_review_response(callback: CallbackQuery):
    uid = callback.from_user.id
    await callback.answer()

    vocab = user_vocab.get(uid, [])
    if not vocab:
        await callback.message.edit_text("–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        return

    current = vocab[0]  # –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —Ç–µ–∫—É—â–µ–µ
    if callback.data == "review_remember":
        current["review_level"] = current.get("review_level", 0) + 1
    else:
        current["review_level"] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

    current["last_reviewed"] = datetime.utcnow().isoformat()
    save_vocab(user_vocab)

    await handle_vocab_review(callback)  # –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π

@dp.callback_query(F.data == "learn_grammar")
async def handle_grammar(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò A1", callback_data="grammar_level:A1")],
        [InlineKeyboardButton(text="üìó A2", callback_data="grammar_level:A2")],
        [InlineKeyboardButton(text="üìô B1", callback_data="grammar_level:B1")],
        [InlineKeyboardButton(text="üìï B2", callback_data="grammar_level:B2")],
        [InlineKeyboardButton(text="üìí C1", callback_data="grammar_level:C1")],
        [InlineKeyboardButton(text="üìì C2", callback_data="grammar_level:C2")],
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="learn_back")],
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("grammar_level:"))
async def handle_grammar_level(callback: CallbackQuery, state: FSMContext):
    level = callback.data.split(":", 1)[1]
    await callback.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}‚Ä¶")

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –æ–¥–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level}. "
        "–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ –¥–≤–∞ –ø–æ–ª—è (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):\n"
        "1) –í–æ–ø—Ä–æ—Å (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º): –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º ____ –∏ –≥–ª–∞–≥–æ–ª –≤ —Å–∫–æ–±–∫–∞—Ö.\n"
        "2) –û—Ç–≤–µ—Ç: —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–í–æ–ø—Ä–æ—Å: By the time we arrived, the train ____ (leave).\n"
        "–û—Ç–≤–µ—Ç: had left"
    )
    resp = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
    raw = resp.text.strip()

    # –∏—â–µ–º –±–ª–æ–∫ "–û—Ç–≤–µ—Ç"
    m = re.search(r"–û—Ç–≤–µ—Ç\s*[:\-]\s*(.+)", raw, flags=re.IGNORECASE)
    if not m:
        logging.error(f"[GRAMMAR:{level}] Bad response:\n{raw}")
        kb_retry = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ï—â—ë —Ä–∞–∑", callback_data=f"grammar_level:{level}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")],
        ])
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb_retry)
        return

    # –æ—Ç–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–æ "–û—Ç–≤–µ—Ç"
    raw_q = raw.split("–û—Ç–≤–µ—Ç", 1)[0].strip()
    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ '*' –∏ –º–µ—Ç–∫—É "–í–æ–ø—Ä–æ—Å:"
    question = re.sub(r"\*+", "", raw_q)
    question = re.sub(r"(?i)^–í–æ–ø—Ä–æ—Å[:\-\s]*", "", question).strip()

    correct = m.group(1).strip()

    await state.set_state(GrammarExercise.waiting_for_answer)
    await state.update_data(correct_answer=correct)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ù–æ–≤–æ–µ", callback_data=f"grammar_level:{level}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")],
    ])

    await callback.message.edit_text(
        (
            f"<b>üìò –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({level})</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å: {escape(question)}\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: had left), –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
        ),
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )


@dp.message(GrammarExercise.waiting_for_answer)
async def check_grammar_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    correct = normalize_text(data["correct_answer"])
    user_input = normalize_text(message.text or "")

    if user_input == correct:
        await message.answer(
            "‚úÖ –í–µ—Ä–Ω–æ! –•–æ—Ç–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìò –ù–æ–≤–æ–µ", callback_data="learn_grammar")]
                ]
            )
        )
    else:
        await message.answer(
            (
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{data['correct_answer']}</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —ç—Ç—É —Ñ–æ—Ä–º—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤."
            ),
            parse_mode="HTML"
        )

    await state.clear()


@dp.callback_query(F.data.startswith("note_type:"))
async def handle_note_type_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    choice = callback.data.split(":")[1]
    original_text = pending_note_or_reminder.pop(user_id, None)

    if not original_text:
        await callback.message.edit_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    await callback.answer()

    if choice == "note":
        user_notes[user_id].append(original_text)
        save_notes()
        await callback.message.edit_text("üìù –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É.")
    elif choice == "reminder":
        await callback.message.edit_text(
            "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ —Ç–∞–∫: ¬´–Ω–∞–ø–æ–º–Ω–∏ {—Ç–µ–∫—Å—Ç} –ø–æ –ú–æ—Å–∫–≤–µ¬ª, —á—Ç–æ–±—ã —è —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –ø–æ –ú–æ—Å–∫–≤–µ</i>"
        )

@dp.message(lambda message: message.text and message.text.lower().startswith("–º–æ–π"))
async def handle_timezone_setting(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    tz_match = re.match(r"(?i)^–º–æ–π\s+(–≥–æ—Ä–æ–¥|—á–∞—Å–æ–≤–æ–π\s+–ø–æ—è—Å)\s*[:\-‚Äî]?\s*(.+?)\s*[!.\-‚Ä¶]*\s*$", text)
    if not tz_match:
        await message.answer(
            "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–ú–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow</b>\n"
            "–∏–ª–∏\n"
            "<b>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</b>",
            parse_mode="HTML"
        )
        return

    setting_type = tz_match.group(1).lower()
    value = tz_match.group(2).strip()

    if "–≥–æ—Ä–æ–¥" in setting_type:
        value = normalize_city_name(value)
        geo = await geocode_city(value)
        if not geo or "timezone" not in geo:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è <b>{value}</b>.\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å: <code>–ú–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Warsaw</code>"
            )
            return
        tz_str = geo["timezone"]

        user_timezones[user_id] = tz_str
        save_timezones(user_timezones)

        await message.answer(
            f"–ó–∞–ø–æ–º–Ω–∏–ª: <b>{value.capitalize()}</b> ‚úÖ\n"
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>{tz_str}</code> –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

    else:
        tz_str = value
        user_timezones[user_id] = tz_str
        save_timezones(user_timezones)

        await message.answer(
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{tz_str}</code>. "
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

    # üîß –®–ê–ì 2: –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –æ–∂–∏–¥–∞—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    reminder_data = pending_note_or_reminder.get(user_id)
    if reminder_data and not reminder_data.get("was_retried"):
        pending_note_or_reminder[user_id]["was_retried"] = True
        prev_text = reminder_data["text"]
        await handle_reminder(
            type("FakeMessage", (object,), {
                "from_user": type("U", (), {"id": user_id})(),
                "text": prev_text,
                "answer": message.answer
            })
        )


#  –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Ö–æ–¥—è—â–µ–π –ö–ê–†–¢–ò–ù–ö–ò —Å —Ñ–æ—Ä–º—É–ª–æ–π
# ------------------------------------------------------------------
@dp.message(F.photo | F.document.mime_type.in_({"image/png", "image/jpeg"}))
async def handle_formula_image(message: Message):
    """
    1. —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    2. —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º LaTeX
    3. –∫–ª–∞–¥—ë–º —Ñ–æ—Ä–º—É–ª—É –≤ –∫—ç—à + –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    (–æ—Ç–≤–µ—Ç –æ—Ç Gemini –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ‚Äì –∂–¥—ë–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    # 0Ô∏è‚É£ –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
    notify_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    # 1Ô∏è‚É£  ‚Äî¬†–ø–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    tg_file = await bot.get_file(file_id)
    url     = f"https://api.telegram.org/file/bot{TOKEN}/{tg_file.file_path}"

    async with aiohttp.ClientSession() as sess:
        async with sess.get(url) as r:
            img_bytes = await r.read()

    # 2Ô∏è‚É£  ‚Äî¬†—Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ñ–æ—Ä–º—É–ª—É
    latex = await recognize_formula(img_bytes)
    if not latex:
        # 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
        await notify_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É.")
        return

    # 3Ô∏è‚É£  ‚Äî¬†–∫–ª–∞–¥—ë–º –≤ –∫—ç—à ‚Üí –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç
    # 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    await notify_msg.edit_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    #      —Å–ø—Ä–æ—Å–∏—Ç—å ¬´—Ä–µ—à–∏ –µ—ë¬ª, ¬´—É–ø—Ä–æ—Å—Ç–∏¬ª –∏ —Ç.–¥.
    user_images_text[message.from_user.id] = latex

    #     –¥–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –≤–∏–¥–µ–ª, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    png_path = latex_to_png(latex)
    try:
        await bot.send_photo(
            chat_id = message.chat.id,
            photo   = FSInputFile(png_path, "formula.png"),
            caption = (f"–Ø –≤–∏–∂—É —ç—Ç–æ¬†üëÜ\n<code>{latex}</code>\n\n"
                       "–°–ø—Ä–æ—Å–∏ —á—Ç–æ‚Äë–Ω–∏–±—É–¥—å –æ–± —ç—Ç–æ–º!"),
            parse_mode = "HTML"
        )
    finally:
        os.remove(png_path)

    # üîö  –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äì –∂–¥—ë–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return


@dp.message(lambda message: message.voice is not None)
async def handle_voice_message(message: Message):
    _register_message_stats(message)
    await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        file = await bot.get_file(message.voice.file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                voice_bytes = await resp.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmpf:
            tmpf.write(voice_bytes)
            ogg_path = tmpf.name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    try:
        audio = AudioSegment.from_file(ogg_path, format="ogg")
        wav_path = ogg_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        os.remove(ogg_path)
        return
    finally:
        os.remove(ogg_path)
    recognizer = sr.Recognizer()
    recognized_text = ""
    try:
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            recognized_text = recognizer.recognize_google(audio_data, language="ru-RU")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    os.remove(wav_path)
    if not recognized_text:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòî")
        return
    voice_regex = re.compile(r"(–æ—Ç–≤–µ—Ç—å\s+(–≤–æ–π—Å–æ–º|–≥–æ–ª–æ—Å–æ–º)|–≥–æ–ª–æ—Å–æ–º\s+–æ—Ç–≤–µ—Ç—å)", re.IGNORECASE)
    voice_response_requested = bool(voice_regex.search(recognized_text))
    cleaned_text = voice_regex.sub("", recognized_text).strip()
    await handle_msg(message, recognized_text=cleaned_text, voice_response_requested=voice_response_requested)

@dp.callback_query(F.data.startswith("note_delete:"))
async def delete_note(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    notes = user_notes.get(uid, [])
    if 0 <= index < len(notes):
        notes.pop(index)
        save_notes()
    await show_notes(uid)

@dp.callback_query(F.data == "note_delete_all")
async def confirm_delete_all_notes(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="note_cancel_delete_all"),
            InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="note_confirm_delete_all")
        ]
    ])
    await callback.message.answer("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å <b>–≤—Å–µ</b> –∑–∞–º–µ—Ç–∫–∏?", reply_markup=keyboard)

@dp.callback_query(F.data == "note_confirm_delete_all")
async def do_delete_all_notes(callback: CallbackQuery):
    uid = callback.from_user.id
    user_notes[uid] = []
    save_notes()
    await show_notes(uid, callback=callback)

@dp.callback_query(F.data == "note_cancel_delete_all")
async def cancel_delete_all_notes(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data == "note_add")
async def ask_add_note(callback: CallbackQuery):
    await callback.message.delete()
    uid = callback.from_user.id
    pending_note_or_reminder[uid] = {"type": "note"}
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É.")

@dp.callback_query(F.data.startswith("note_edit:"))
async def ask_edit_note(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    notes = user_notes.get(uid, [])
    if 0 <= index < len(notes):
        pending_note_or_reminder[uid] = {"type": "edit_note", "index": index}
        await callback.message.answer(f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ‚Ññ{index+1}.")
    else:
        await callback.message.answer("–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.callback_query(F.data == "note_close")
async def close_notes(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data.startswith("reminder_delete:"))
async def delete_reminder(callback: CallbackQuery):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    user_reminders = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]
    if 0 <= index < len(user_reminders):
        real_index = user_reminders[index][0]
        reminders.pop(real_index)
        save_reminders()
    await show_reminders(uid, callback=callback)

@dp.callback_query(F.data.startswith("reminder_edit:"))
async def ask_edit_reminder(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    index = int(callback.data.split(":")[1])
    user_reminders = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]

    if 0 <= index < len(user_reminders):
        real_index = user_reminders[index][0]
        old_uid, old_dt, old_text = reminders[real_index]

        await state.update_data(reminder_index=real_index, old_text=old_text, old_dt=old_dt)
        await state.set_state(ReminderEdit.waiting_for_new_text)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_text")]
        ])
        await callback.message.answer(
            f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>:\n\n"
            f"üìå <i>{old_text}</i>",
            reply_markup=keyboard
        )

    else:
        await callback.message.answer("–¢–∞–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ—Ç.")

@dp.message(ReminderEdit.waiting_for_new_text)
async def edit_reminder_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    data = await state.get_data()
    await state.update_data(new_text=None if new_text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else new_text)
    await state.set_state(ReminderEdit.waiting_for_new_date)

    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(message.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_date")]
    ])
    await message.answer(
        f"üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <code>{old_local.strftime('%d.%m.%Y')}</code>",
        reply_markup=keyboard
    )


@dp.message(ReminderEdit.waiting_for_new_date)
async def edit_reminder_date(message: Message, state: FSMContext):
    raw = message.text.strip()
    data = await state.get_data()

    if raw.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_date=None)
        await state.set_state(ReminderEdit.waiting_for_new_time)
        old_dt = data.get("old_dt")
        old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(message.from_user.id, "UTC")))
        await message.answer(
            f"‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>,\n–∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>{old_local.strftime('%H:%M')}</code>"
        )
        return

    try:
        date_obj = datetime.strptime(raw, "%d.%m.%Y").date()
        await state.update_data(new_date=date_obj)
        await state.set_state(ReminderEdit.waiting_for_new_time)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_time")]
        ])
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")

@dp.message(ReminderEdit.waiting_for_new_time)
async def edit_reminder_time(message: Message, state: FSMContext):
    user_id = message.from_user.id
    raw = message.text.strip()
    data = await state.get_data()

    old_dt: datetime = data.get("old_dt")
    old_text: str = data.get("old_text")
    index: int = data.get("reminder_index")
    new_text = data.get("new_text") or old_text
    new_date = data.get("new_date") or old_dt.astimezone(pytz.timezone(user_timezones.get(user_id, "UTC"))).date()

    if raw.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        new_time = old_dt.astimezone(pytz.timezone(user_timezones.get(user_id, "UTC"))).time()
    else:
        try:
            new_time = datetime.strptime(raw, "%H:%M").time()
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: <code>15:30</code>")
            return

    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ù–∞–ø–∏—à–∏: <code>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</code>")
        await state.clear()
        return

    try:
        local_tz = pytz.timezone(tz_str)
        dt_local = datetime.combine(new_date, new_time)
        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)

        reminders[index] = (user_id, dt_utc, new_text)
        save_reminders()
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_text}</b> ‚Äî <code>{dt_local.strftime('%d.%m.%Y %H:%M')}</code> ({tz_str})")
    except Exception as e:
        logging.exception(f"[REMINDER_EDIT] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    await state.clear()


@dp.callback_query(F.data == "edit_skip_text")
async def skip_edit_text(callback: CallbackQuery, state: FSMContext):
    await state.update_data(new_text=None)
    data = await state.get_data()
    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(callback.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_date")]
    ])
    await state.set_state(ReminderEdit.waiting_for_new_date)
    await callback.message.edit_text(
        f"üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <code>{old_local.strftime('%d.%m.%Y')}</code>",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "edit_skip_date")
async def skip_edit_date(callback: CallbackQuery, state: FSMContext):
    await state.update_data(new_date=None)
    data = await state.get_data()
    old_dt = data.get("old_dt")
    old_local = old_dt.astimezone(pytz.timezone(user_timezones.get(callback.from_user.id, "UTC")))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_skip_time")]
    ])
    await state.set_state(ReminderEdit.waiting_for_new_time)
    await callback.message.edit_text(
        f"‚è∞ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n–∏–ª–∏ –Ω–∞–∂–º–∏ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>{old_local.strftime('%H:%M')}</code>",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "edit_skip_time")
async def skip_edit_time(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    message.from_user = callback.from_user  # —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å message-—Ö–µ–Ω–¥–ª–µ—Ä
    await edit_reminder_time(message, state)


@dp.callback_query(F.data == "reminder_delete_all")
async def confirm_delete_all_reminders(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reminder_cancel_delete_all"),
            InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="reminder_confirm_delete_all")
        ]
    ])
    await callback.message.answer("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å <b>–≤—Å–µ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", reply_markup=keyboard)

@dp.callback_query(F.data == "reminder_confirm_delete_all")
async def do_delete_all_reminders(callback: CallbackQuery):
    uid = callback.from_user.id
    global reminders
    reminders = [r for r in reminders if r[0] != uid]
    save_reminders()
    await show_reminders(uid, callback=callback)

@dp.callback_query(F.data == "reminder_cancel_delete_all")
async def cancel_delete_all_reminders(callback: CallbackQuery):
    await callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(F.data == "reminder_close")
async def close_reminders(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data == "reminder_add")
async def start_reminder_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")
    await state.set_state(ReminderAdd.waiting_for_date)

@dp.message(ReminderAdd.waiting_for_date)
async def process_reminder_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(date=date_obj)
        await message.answer("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n–ü—Ä–∏–º–µ—Ä: <code>15:30</code>")
        await state.set_state(ReminderAdd.waiting_for_time)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: <code>12.04.2025</code>")

@dp.message(ReminderAdd.waiting_for_time)
async def process_reminder_time(message: Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text.strip(), "%H:%M").time()
        await state.update_data(time=time_obj)
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å)")
        await state.set_state(ReminderAdd.waiting_for_text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: <code>15:30</code>")

@dp.message(ReminderAdd.waiting_for_text)
async def process_reminder_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    date = data.get("date")
    time = data.get("time")
    text = message.text.strip()

    if not date or not time:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    dt_local = datetime.combine(date, time)
    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚è≥ –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏:\n<code>–ú–æ–π –≥–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</code>")
        pending_note_or_reminder[user_id] = {
            "text": text,
            "type": "reminder",
            "date": date,
            "time": time
        }
        await state.clear()
        return

    try:
        local_tz = pytz.timezone(tz_str)
        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)
    except Exception as e:
        logging.exception(f"[FSM] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å—ë –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        await state.clear()
        return

    reminders.append((user_id, dt_utc, text))
    save_reminders()
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <code>{dt_local.strftime('%Y-%m-%d %H:%M')}</code> ({tz_str})")
    await state.clear()

from datetime import timedelta

async def handle_reminder(message: Message):
    user_id = message.from_user.id
    reminder_data = pending_note_or_reminder.pop(user_id, None)
    if not reminder_data:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        return

    tz_str = user_timezones.get(user_id)
    if not tz_str:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")
        return

    try:
        local_tz = pytz.timezone(tz_str)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        date = reminder_data.get("date")
        time = reminder_data.get("time")
        if date and time:
            dt_local = datetime.combine(date, time)
        else:
            # –ò–Ω–∞—á–µ ‚Äî –±–ª–∏–∂–∞–π—à–∞—è –º–∏–Ω—É—Ç–∞
            dt_local = datetime.now(local_tz) + timedelta(minutes=1)

        dt_localized = local_tz.localize(dt_local)
        dt_utc = dt_localized.astimezone(pytz.utc)

        reminders.append((user_id, dt_utc, reminder_data["text"]))
        save_reminders()
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <code>{dt_local.strftime('%Y-%m-%d %H:%M')}</code> ({tz_str})")
    except Exception as e:
        logging.exception(f"[DELAYED_REMINDER] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

@dp.message(F.text.lower().startswith("–¥–æ–±–∞–≤—å —Å–ª–æ–≤–æ:"))
async def handle_add_vocab(message: Message):
    uid = message.from_user.id
    try:
        word_raw = message.text.split(":", 1)[1].strip()
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>–î–æ–±–∞–≤—å —Å–ª–æ–≤–æ: example</code>")
        return

    prompt = (
        f"–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ '{word_raw}'. "
        "–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ó–Ω–∞—á–µ–Ω–∏–µ: ...\n–ü—Ä–∏–º–µ—Ä: ..."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw = response.text.strip().split("\n")
        meaning = raw[0].replace("–ó–Ω–∞—á–µ–Ω–∏–µ:", "").strip()
        example = raw[1].replace("–ü—Ä–∏–º–µ—Ä:", "").strip()
        from datetime import datetime
        entry = {
            "word": word_raw,
            "meaning": meaning,
            "example": example,
            "last_reviewed": datetime.utcnow().isoformat(),
            "review_level": 0
        }

        user_vocab.setdefault(uid, []).append(entry)
        save_vocab(user_vocab)
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ <b>{word_raw}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    except Exception as e:
        logging.exception(f"[VOCAB_ADD] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.")

@dp.message(F.text == "üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
async def handle_notes_button(message: Message):
    await show_notes(message.chat.id, message=message)

@dp.message(F.text == "‚è∞ –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def handle_reminders_button(message: Message):
    await show_reminders(message.chat.id)

@dp.message(F.text == "üá¨üáß –ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ")
async def handle_learn_button(message: Message):
    await cmd_learn_en(message)

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    await cmd_help(message)

@dp.message(VocabAdd.waiting_for_word)
async def handle_vocab_word_input(message: Message, state: FSMContext):
    uid = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    if pending_note_or_reminder.get(uid, {}).get("type") != "add_vocab":
        return  # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    pending_note_or_reminder.pop(uid)

    word_raw = message.text.strip()
    if not word_raw or len(word_raw) < 2:
        await message.answer("‚ùå –°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    prompt = (
        f"–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ '{word_raw}'. "
        "–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ó–Ω–∞—á–µ–Ω–∏–µ: ...\n–ü—Ä–∏–º–µ—Ä: ..."
    )

    try:
        response = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
        raw = response.text.strip().split("\n")
        meaning = raw[0].replace("–ó–Ω–∞—á–µ–Ω–∏–µ:", "").strip()
        example = raw[1].replace("–ü—Ä–∏–º–µ—Ä:", "").strip()

        entry = {
            "word": word_raw,
            "meaning": meaning,
            "example": example,
            "last_reviewed": datetime.utcnow().isoformat(),
            "review_level": 0
        }

        user_vocab.setdefault(uid, []).append(entry)
        save_vocab(user_vocab)

        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ <b>{word_raw}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å.\n"
            f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {meaning}\n<i>{example}</i>"
        )
    except Exception as e:
        logging.exception(f"[VOCAB_ADD] –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# ‚òÖ –ò–∑–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_notes ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫, –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async def show_notes(uid: int, callback: CallbackQuery = None, message: Message = None):
    notes = user_notes.get(uid, [])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    try:
        if callback:
            await callback.message.delete()
        elif message:
            await message.delete()
    except:
        pass

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if not notes:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="note_add")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="note_close")]
        ])
        await bot.send_message(uid, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=keyboard)
        return

    text = "<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:</b>\n"
    buttons = []
    for i, note in enumerate(notes):
        text += f"{i+1}. {note}\n"
        buttons.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è {i+1}", callback_data=f"note_edit:{i}"),
            InlineKeyboardButton(text=f"üóë {i+1}", callback_data=f"note_delete:{i}")
        ])
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="note_add"),
        InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="note_delete_all")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="note_close")
    ])
    await bot.send_message(uid, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def show_reminders(uid: int, callback: CallbackQuery = None):
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
    global reminders
    reminders = [r for r in reminders if not (r[0] == uid and r[1] <= now_utc)]
    save_reminders()
    
    user_rem = [(i, r) for i, r in enumerate(reminders) if r[0] == uid]
    if callback:
        try:
            await callback.message.delete()
        except:
            pass

    if not user_rem:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="reminder_add")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder_close")]
        ])
        await bot.send_message(uid, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=keyboard)
        return
    text = "<b>–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
    buttons = []
    for i, (real_i, (_, dt, msg)) in enumerate(user_rem):
        local = dt.astimezone(pytz.timezone(user_timezones.get(uid, "UTC")))
        text += f"{i+1}. {msg} ‚Äî <code>{local.strftime('%d.%m.%Y %H:%M')}</code>\n"
        buttons.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è {i+1}", callback_data=f"reminder_edit:{i}"),
            InlineKeyboardButton(text=f"üóë {i+1}", callback_data=f"reminder_delete:{i}")
        ])
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="reminder_add"),
        InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="reminder_delete_all")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder_close")
    ])
    await bot.send_message(uid, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def show_dialogues(callback: CallbackQuery):
    if not dialogues:
        await callback.message.edit_text("–î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "<b>üí¨ –ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
    for exchange in dialogues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        user_msg = exchange.get("user", "")
        bot_msg = exchange.get("bot", "")
        text += f"<b>–¢—ã:</b> {user_msg}\n<b>VAI:</b> {bot_msg}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="learn_back")]
    ])
    await callback.message.edit_text(text.strip(), reply_markup=keyboard)

async def handle_all_messages_impl(message: Message, user_input: str):
    _register_message_stats(message)
    all_chat_ids.add(message.chat.id)
    uid = message.from_user.id
    cid = message.chat.id

    voice_response_requested = False  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UnboundLocalError
    if uid in pending_note_or_reminder:
        data = pending_note_or_reminder.pop(uid)
        if data["type"] == "note":
            user_notes[uid].append(user_input)
            save_notes()
            await show_notes(uid)
            return
        elif data["type"] == "edit_note":
            index = data.get("index")
            if index is not None and 0 <= index < len(user_notes.get(uid, [])):
                user_notes[uid][index] = user_input
                save_notes()
                await show_notes(uid)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.from_user.id in SUPPORT_IDS and message.reply_to_message:
        original_id = message.reply_to_message.message_id
        if (message.chat.id, original_id) in support_reply_map:
            user_id = support_reply_map[(message.chat.id, original_id)]
            try:
                await send_admin_reply_as_single_message(message, user_id)
                if message.from_user.id != ADMIN_ID:
                    sender = message.from_user
                    sender_name = sender.full_name
                    sender_username = f"@{sender.username}" if sender.username else f"(ID: <code>{sender.id}</code>)"
                    try:
                        user = await bot.get_chat(user_id)
                        user_name = user.full_name
                        user_username = f"@{user.username}" if user.username else f"(ID: <code>{user.id}</code>)"
                    except Exception:
                        user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        user_username = f"(ID: <code>{user_id}</code>)"
                    text_preview = message.text or "[–º–µ–¥–∏–∞]"
                    await bot.send_message(
                        chat_id=ADMIN_ID,
                        text=(
                            f"üëÅ <b>{sender_name}</b> {sender_username} –æ—Ç–≤–µ—Ç–∏–ª <b>{user_name}</b> {user_username}:\n\n"
                            f"{escape(text_preview)}"
                        )
                    )
                    
            except Exception as e:
                logging.exception(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    if uid in support_mode_users:
        support_mode_users.discard(uid)
        try:
            caption = message.caption or user_input or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            username_part = f" (@{message.from_user.username})" if message.from_user.username else ""
            content = (f"\u2728 <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç <b>{message.from_user.full_name}</b>{username_part} "
                       f"(id: <code>{uid}</code>):\n\n{caption}")
            sent_msg = None
            if message.photo:
                file = await bot.get_file(message.photo[-1].file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        photo_bytes = await resp.read()
                sent_msg = await bot.send_photo(chat_id=ADMIN_ID, photo=BufferedInputFile(photo_bytes, filename="image.jpg"), caption=content)
            elif message.video:
                file = await bot.get_file(message.video.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        video_bytes = await resp.read()
                sent_msg = await bot.send_video(chat_id=ADMIN_ID, video=BufferedInputFile(video_bytes, filename="video.mp4"), caption=content)
            else:
                for support_id in SUPPORT_IDS:
                    try:
                        sent_msg = await bot.send_message(chat_id=support_id, text=content)
                        support_reply_map[(sent_msg.chat.id, sent_msg.message_id)] = uid
                        save_support_map()
                    except Exception as e:
                        logging.exception(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ({support_id}): {e}")
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception as e:
            logging.exception(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –ï—Å–ª–∏ –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if cid in disabled_chats:
            return
        # –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ: –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –µ–≥–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–∏ reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lower_text = user_input.lower()
        mentioned = any(keyword in lower_text for keyword in ["–≤–∞–π", "vai", "–≤—ç–π"])
        reply_to_bot = (
            message.reply_to_message
            and message.reply_to_message.from_user
            and message.reply_to_message.from_user.id == BOT_ID
        )
        if not (mentioned or reply_to_bot):
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if message.document:
        stats["files_received"] += 1
        file = await bot.get_file(message.document.file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                file_bytes = await resp.read()
        text = extract_text_from_file(message.document.file_name, file_bytes)
        if text:
            user_documents[uid] = text
            await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º
    voice_regex = re.compile(r"(–æ—Ç–≤–µ—Ç—å\s+(–≤–æ–π—Å–æ–º|–≥–æ–ª–æ—Å–æ–º)|–≥–æ–ª–æ—Å–æ–º\s+–æ—Ç–≤–µ—Ç—å)", re.IGNORECASE)
    if voice_regex.search(user_input):
        voice_response_requested = True
        user_input = voice_regex.sub("", user_input)
    
    lower_input = user_input.lower()

    logging.info(f"[DEBUG] cid={cid}, text='{user_input}'")

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    exchange_match = EXCHANGE_PATTERN.search(lower_input)
    if exchange_match:
        amount_str = exchange_match.group(1).replace(',', '.')
        try:
            amount = float(amount_str)
        except:
            amount = 0
        from_curr_raw = exchange_match.group(2)
        to_curr_raw = exchange_match.group(3)
    
        from_curr_lemma = normalize_currency_rus(from_curr_raw)
        to_curr_lemma = normalize_currency_rus(to_curr_raw)
    
        from_curr = CURRENCY_SYNONYMS.get(from_curr_lemma, from_curr_lemma.upper())
        to_curr = CURRENCY_SYNONYMS.get(to_curr_lemma, to_curr_lemma.upper())
    
        exchange_text = await get_exchange_rate(amount, from_curr, to_curr)
        if exchange_text is not None:
            if voice_response_requested:
                await send_voice_message(cid, exchange_text)
            else:
                await message.answer(exchange_text)
            return

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WeatherAPI
    weather_pattern = r"–ø–æ–≥–æ–¥–∞(?:\s+–≤)?\s+([a-z–∞-—è—ë\-\s]+?)(?:\s+(?:–Ω–∞\s+(\d+)\s+–¥–Ω(?:—è|–µ–π)|–Ω–∞\s+(–Ω–µ–¥–µ–ª—é)|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞))?$"
    weather_match = re.search(weather_pattern, lower_input, re.IGNORECASE)
    if weather_match:
        city_raw = weather_match.group(1).strip()
        days_part = weather_match.group(2)
        week_flag = weather_match.group(3)
        mode_flag = re.search(r"(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)", lower_input)  # –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        
        city_norm = normalize_city_name(city_raw)
        
        if week_flag:
            days = 7
            mode = ""
        elif mode_flag:
            days = 2
            mode = mode_flag.group(1)
        else:
            days = int(days_part) if days_part else 1
            mode = ""
        
        weather_info = await get_weather_info(city_norm, days, mode)
        if not weather_info:
            weather_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
        if voice_response_requested:
            await send_voice_message(cid, weather_info)
        else:
            await message.answer(weather_info)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∞–π–ª—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø–æ—Å–ª–µ return)
    if uid in user_documents:
        file_content = user_documents[uid]
        prompt_with_file = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n\n{file_content}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å:\n\n{user_input}\n\n"
                            f"–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –∫—Ä–∞—Ç–∫–æ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞.")
        gemini_text = await generate_and_send_gemini_response(cid, prompt_with_file, False, "", "")

        if voice_response_requested:
            await send_voice_message(cid, gemini_text)
        else:
            await message.answer(gemini_text)
        return

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —Å—é–¥–∞:
    gemini_text = await handle_msg(message, user_input, voice_response_requested)
    if not gemini_text:
        return

    if voice_response_requested:
        await send_voice_message(cid, gemini_text)
    else:
        await message.answer(gemini_text)
    return

def split_smart(text: str, limit: int) -> list[str]:
    results = []
    start = 0
    length = len(text)
    while start < length:
        remain = length - start
        if remain <= limit:
            results.append(text[start:].strip())
            break
        candidate = text[start : start+limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                cut_pos = len(candidate)
        else:
            cut_pos += 1
        chunk = text[start : start+cut_pos].strip()
        if chunk:
            results.append(chunk)
        start += cut_pos
    return [x for x in results if x]

CAPTION_LIMIT = 950
TELEGRAM_MSG_LIMIT = 4096

def split_caption_and_text(text: str) -> tuple[str, list[str]]:
    if len(text) <= CAPTION_LIMIT:
        return text, []
    chunks_950 = split_smart(text, CAPTION_LIMIT)
    caption = chunks_950[0]
    leftover = " ".join(chunks_950[1:]).strip()
    if not leftover:
        return caption, []
    rest = split_smart(leftover, TELEGRAM_MSG_LIMIT)
    return caption, rest

def format_gemini_response(text: str) -> str:
    code_blocks = {}
    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = f'<pre><code class="language-{lang}">{code}</code></pre>'
        return placeholder

    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)
    text = escape(text)
    for placeholder, block_html in code_blocks.items():
        text = text.replace(escape(placeholder), block_html)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r"\[.*?(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—Ä–∏—Å—É–Ω–æ–∫).+?\]", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(–Ø —è–≤–ª—è—é—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.*–≤—ã–≤–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I am a text-based model.*cannot directly show images\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I can‚Äôt show images directly\.)", "", text, flags=re.IGNORECASE)

    lines = text.split('\n')
    new_lines = []
    for line in lines:
        stripped = line.lstrip()
        prefix_len = len(line) - len(stripped)
        if stripped.startswith('* ') and not stripped.startswith('**'):
            replaced_line = (' ' * prefix_len) + '‚Ä¢ ' + stripped[2:]
            new_lines.append(replaced_line)
        else:
            new_lines.append(line)
    text = '\n'.join(new_lines).strip()

    text = re.sub(r"(?i)\bi am a large language model\b", "I am VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bi'm a large language model\b", "I'm VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bgoogle\b", "Vandili", text)
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å(?:.*?)(?=\.)", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è\s*‚Äî\s*–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø ‚Äî VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)

    return text

def parse_quiz_questions(text: str) -> list[dict]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∫–≤–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    1. –í–æ–ø—Ä–æ—Å
    A) ...
    B) ...
    C) ...
    D) ...
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
    [
        {"question": "...", "options": ["A", "B", "C", "D"], "answer": "B"},
        ...
    ]
    """
    questions = []
    blocks = re.split(r"\n\s*(?=\d+\.\s)", text)
    for block in blocks:
        lines = block.strip().split("\n")
        if len(lines) < 6:
            continue
        question_line = lines[0].strip()
        options = []
        for i in range(1, 5):
            option_line = lines[i].strip()
            parts = option_line.split(")", 1)
            if len(parts) == 2:
                options.append(parts[1].strip())
            else:
                options.append(option_line)
        answer_line = lines[-1].strip()
        answer_match = re.search(r"–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\s+–æ—Ç–≤–µ—Ç\s*[:\-]?\s*([A-D])", answer_line, re.IGNORECASE)
        if not answer_match:
            continue
        correct = answer_match.group(1).upper()
        question_text = "\n".join(lines[:5])
        questions.append({
            "question": question_text,
            "options": options,
            "answer": correct
        })
    return questions

IMAGE_TRIGGERS_RU = ["–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ"]
NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = ["–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
                 "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                 "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π <i>Vandili</i> üòé",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–∏—Ö üòâ",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω–∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ ‚ú®",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –¥–∞–ª–∏ –º–Ω–µ –∂–∏–∑–Ω—å ü§ù",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ ü§ó",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω–∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ üòá"
]

RU_EN_DICT = {
    "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
    "—Ç–∏–≥—Ä": "tiger",
    "–∫–æ—à–∫–∞": "cat",
    "—Å–æ–±–∞–∫–∞": "dog",
    "–ø–µ–π–∑–∞–∂": "landscape",
    "—á–∞–π–∫–∞": "seagull",
    "–ø–∞—Ä–∏–∂": "paris",
    "—É—Ç–∫–æ–Ω–æ—Å": "platypus",
    "–ø—É–¥–µ–ª—å": "poodle",
    "–º–µ–¥–æ–µ–¥": "honey badger"
}

async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    if not prompt:
        return None
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logging.exception(f"Unsplash returned status {response.status} for prompt '{prompt}'")
                    return None
                data = await response.json()
                if "urls" not in data or "regular" not in data["urls"]:
                    logging.exception(f"No 'regular' URL in response for '{prompt}': {data}")
                    return None
                return data["urls"]["regular"]
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

def fallback_translate_to_english(rus_word: str) -> str:
    try:
        project_id = "gen-lang-client-0588633435"
        location = "global"
        parent = f"projects/{project_id}/locations/{location}"
        response = translate_client.translate_text(
            parent=parent,
            contents=[rus_word],
            mime_type="text/plain",
            source_language_code="ru",
            target_language_code="en",
        )
        return response.translations[0].translated_text
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ '{rus_word}': {e}")
        return rus_word

async def generate_short_caption(rus_word: str) -> str:
    short_prompt = (
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –¢—ã ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ Google. –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–ª–æ–≤.\n\n"
        f"–ó–ê–î–ê–ß–ê: –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å ¬´{rus_word}¬ª. "
        "–ú–æ–∂–Ω–æ —Å –ª—ë–≥–∫–æ–π —ç–º–æ—Ü–∏–µ–π –∏–ª–∏ —é–º–æ—Ä–æ–º, –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤."
    )
    try:
        response = await model.generate_content_async([
            {"role": "user", "parts": [short_prompt]}
        ])
        caption = format_gemini_response(response.text.strip())
        return caption
    except Exception as e:
        logging.error(f"[BOT] Error generating short caption: {e}")
        return rus_word.capitalize()

def parse_russian_show_request(user_text: str):
    lower_text = user_text.lower()
    triggered = any(trig in lower_text for trig in IMAGE_TRIGGERS_RU)
    if not triggered:
        return (False, "", "", user_text)
    match = re.search(r"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+([\w\d]+)", lower_text)
    if match:
        raw_rus_word = match.group(3)
        raw_rus_word_clean = raw_rus_word.strip(punctuation)
        parsed = morph.parse(raw_rus_word_clean)
        if parsed:
            rus_normal = parsed[0].normal_form
        else:
            rus_normal = raw_rus_word_clean
        rus_word = rus_normal
    else:
        rus_word = ""
        raw_rus_word = ""
    if raw_rus_word:
        pattern_remove = rf"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+{re.escape(raw_rus_word)}"
        leftover = re.sub(pattern_remove, "", user_text, flags=re.IGNORECASE).strip()
    else:
        leftover = user_text
    RU_EN_DICT_CUSTOM = {
        "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
        "—Ç–∏–≥—Ä": "tiger",
        "–∫–æ—à–∫–∞": "cat",
        "—Å–æ–±–∞–∫–∞": "dog",
        "–ø–µ–π–∑–∞–∂": "landscape",
        "—á–∞–π–∫–∞": "seagull",
        "–ø–∞—Ä–∏–∂": "paris",
        "—É—Ç–∫–æ–Ω–æ—Å": "platypus",
        "–ø—É–¥–µ–ª—å": "poodle",
        "–º–µ–¥–æ–µ–¥": "honey badger"
    }
    if rus_word in RU_EN_DICT_CUSTOM:
        en_word = RU_EN_DICT_CUSTOM[rus_word]
    else:
        en_word = fallback_translate_to_english(rus_word)
    return (True, rus_word, en_word, leftover) if rus_word else (False, "", "", user_text)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  >>>  handle_msg ‚Äì –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–∞—Ü–∏–µ–π LaTeX –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–æ–π  <<<
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_msg(
    message: Message,
    recognized_text: str | None = None,
    voice_response_requested: bool = False
):
    cid        = message.chat.id
    user_input = recognized_text or (message.text or "").strip()
    uid        = message.from_user.id

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) –í –∫—ç—à–µ –µ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∞ ‚Üí –∂–¥—ë–º –≤–æ–ø—Ä–æ—Å
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if uid in user_images_text:
        latex = user_images_text.pop(uid)
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å‚Ä¶ üòä")

        # –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –ø—Ä–æ—Å–∏–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å
        if not user_input:
            await message.answer("‚úçÔ∏è –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∫¬†—ç—Ç–æ–π —Ñ–æ—Ä–º—É–ª–µ, –∏¬†—è –æ—Ç–≤–µ—á—É!")
            return

        prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –û–±—ä—è—Å–Ω—è–π –≤—Å—ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. "
            "–ò–∑–±–µ–≥–∞–π –≥—Ä–æ–º–æ–∑–¥–∫–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫, —Ä–∞–∑–∂—ë–≤—ã–≤–∞–π –∫–∞–∂–¥—ã–π —à–∞–≥ –∏ –¥–∞–≤–∞–π –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.\n\n"
            # 0) –ò—Å—Ö–æ–¥–Ω—ã–π LaTeX (–ª—é–±–æ–π –æ–±–ª–∞—Å—Ç–∏) –º–µ–∂–¥—É $$ ‚Ä¶ $$
            "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ LaTeX –º–µ–∂–¥—É –¥–≤–æ–π–Ω—ã–º–∏ –¥–æ–ª–ª–∞—Ä–∞–º–∏:\n"
            f"$$ {latex} $$\n\n"
            # 1) –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±–ª–∞—Å—Ç—å –∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏
            "1) –°–∫–∞–∂–∏, –∫¬†–∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ –∑–∞–ø–∏—Å—å (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ / –§–∏–∑–∏–∫–∞ / –•–∏–º–∏—è / –î—Ä—É–≥–æ–µ) "
            "–∏ –∫–∞–∫–æ–π —ç—Ç–æ —Ç–∏–ø –∑–∞–¥–∞—á–∏:\n"
            "   ‚Äì –í –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: –∏–Ω—Ç–µ–≥—Ä–∞–ª, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è, —É–ø—Ä–æ—â–µ–Ω–∏–µ –∏¬†—Ç.–ø.\n"
            "   ‚Äì –í —Ñ–∏–∑–∏–∫–µ: —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤–µ–ª–∏—á–∏–Ω—ã (–Ω–∞–ø—Ä. —Å–∏–ª–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è), –≤—ã–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π —É—Ä–∞–≤–Ω–µ–Ω–∏–µ.\n"
            "   ‚Äì –í —Ö–∏–º–∏–∏: —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏, –±–∞–ª–∞–Ω—Å–∞, —Ä–∞—Å—á—ë—Ç —Å—Ç–µ—Ö–∏–æ–º–µ—Ç—Ä–∏–∏ –∏¬†—Ç.–ø.\n\n"
            # 2) –ß—Ç–æ –¥–µ–ª–∞—Ç—å
            "2) –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:\n"
            "   ‚Ä¢ –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª ‚Äì –≤—ã—á–∏—Å–ª–∏ –µ–≥–æ.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ ‚Äì —Ä–µ—à–∏ –µ–≥–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è ‚Äì –Ω–∞–π–¥–∏ –µ—ë.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ ‚Äì —É–ø—Ä–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ —Ñ–∏–∑–∏–∫–∞ ‚Äì –≤—ã–ø–æ–ª–Ω–∏ —Ä–∞—Å—á—ë—Ç (–ø–æ–¥—Å—Ç–∞–≤—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã) –∏–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π —Ñ–æ—Ä–º—É–ª—É –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n"
            "   ‚Ä¢ –ï—Å–ª–∏ —Ö–∏–º–∏—è ‚Äì —Å–±–∞–ª–∞–Ω—Å–∏—Ä—É–π —Ä–µ–∞–∫—Ü–∏—é –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ—Å—Ç–≤.\n\n"
            # 3) –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä
            "3) –î–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É–∫–∞–∑—ã–≤–∞–π:\n"
            "   –®–∞–≥ N:\n"
            "   ‚Ä¢ –§–æ—Ä–º—É–ª–∞ –≤ LaTeX –º–µ–∂–¥—É $$‚Ä¶$$\n"
            "   ‚Ä¢ –ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n\n"
            # 4) –ò—Ç–æ–≥
            "4) –í –∫–æ–Ω—Ü–µ –ø—Ä–∏–≤–µ–¥–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç (—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–±—â–∏–π –≤–∏–¥ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ) —Ç–æ–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ $$‚Ä¶$$."
        )

        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            resp = await model.generate_content_async([{"role": "user", "parts": [prompt]}])
            raw_answer = resp.text.strip()
        except Exception as e:
            logging.exception(f"[FORMULA‚ÄëQA] Gemini error: {e}")
            await message.answer("‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        # —Ä–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —à–∞–≥–∏
        steps = split_steps(raw_answer)  # [(latex, header, explain), ‚Ä¶]

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # A. —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Üí –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —à–∞–≥–∏
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if steps:
            from PIL import Image, ImageOps

            step_imgs    = []  # —Å–ø–∏—Å–æ–∫ PNG —à–∞–≥–æ–≤
            voice_chunks = []  # —Ä–µ–ø–ª–∏–∫–∏ –¥–ª—è TTS

            # ---------- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ ----------#
            for idx, (latex_step, _h, explain_raw) in enumerate(steps, 1):
                # 1) –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É–ª—É
                img_path = latex_to_png(_sanitize_for_png(latex_step))
                step_imgs.append(img_path)
                # 2) –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ¬´4) –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ‚Ä¶¬ª, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                cleaned_lines = []
                for line in explain_raw.splitlines():
                    # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä—ã+')' (–≤–æ–∑–º–æ–∂–Ω–æ —Å –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ–º **)
                    if re.match(r'^\s*\**\s*\d+\)\s*', line):
                        continue
                    cleaned_lines.append(line)
                cleaned = "\n".join(cleaned_lines)

                # 3) –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                explain = _clean_explain(cleaned)

                # 4) –£–¥–∞–ª—è–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã ¬´‚Ä¢¬ª –ø–æ –∫—Ä–∞—è–º
                explain = re.sub(r'^[\*\s]+|[\*\s]+$', '', explain)
                explain = re.sub(r'^[\u2022]\s*', '', explain)
                # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
                explain = explain.replace('*', '')

                # 5) –î–µ–ª–∞–µ–º ¬´–ü–æ—è—Å–Ω–µ–Ω–∏–µ:¬ª –∂–∏—Ä–Ω—ã–º
                if explain.startswith('–ü–æ—è—Å–Ω–µ–Ω–∏–µ:'):
                    explain = explain.replace('–ü–æ—è—Å–Ω–µ–Ω–∏–µ:', '<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b>', 1)
                    explain = re.sub(r'^<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b>[\*\s]*', '<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b> ', explain)
                else:
                    explain = escape(explain)

                caption = f"<b>–®–∞–≥¬†{idx}.</b>\n{explain}"

                # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                if len(caption) > 1024:
                    await bot.send_photo(
                        cid,
                        FSInputFile(img_path, "step.png"),
                        caption=f"<b>–®–∞–≥¬†{idx}</b>",
                        parse_mode="HTML",
                        reply_to_message_id=message.message_id
                    )
                    await safe_send(cid, explain, reply_to=message.message_id)
                else:
                    await bot.send_photo(
                        cid,
                        FSInputFile(img_path, "step.png"),
                        caption=caption,
                        parse_mode="HTML",
                        reply_to_message_id=message.message_id
                    )


            # ---------- –∏—Ç–æ–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ ----------
            try:
                all_latex = re.findall(r"\$\$(.+?)\$\$", raw_answer, flags=re.S)
                if all_latex:
                    final_latex = all_latex[-1].strip()
                    if final_latex not in {l for l, _, _ in steps}:
                        final_img = latex_to_png(_sanitize_for_png(final_latex))
                        await bot.send_photo(
                            cid,
                            FSInputFile(final_img, "result.png"),
                            caption="üèÅ <b>–ò—Ç–æ–≥</b>",
                            parse_mode="HTML",
                            reply_to_message_id=message.message_id
                        )
            finally:
                if 'final_img' in locals():
                    os.remove(final_img)
            # ---------- –∫–æ–Ω–µ—Ü –∏—Ç–æ–≥–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª—ã ----------

            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–æ–±—â–∞—è –¥–æ—Å–∫–∞¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if step_imgs:
                try:
                    imgs    = [Image.open(p) for p in step_imgs]
                    max_w   = max(im.width for im in imgs)
                    total_h = sum(im.height for im in imgs) + 20 * (len(imgs) - 1)

                    board = Image.new("RGB", (max_w, total_h), "white")
                    y = 0
                    for im in imgs:
                        board.paste(ImageOps.expand(im, border=10, fill="white"), (0, y))
                        y += im.height + 20

                    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                        board.save(tmp.name)
                        await bot.send_photo(
                            cid,
                            FSInputFile(tmp.name, "board.png"),
                            caption="üü¢ –û–±—â–∏–π –≤–∏–¥ —Ä–µ—à–µ–Ω–∏—è",
                            parse_mode="HTML"
                        )
                finally:
                    for p in step_imgs:
                        os.remove(p)
                    if 'tmp' in locals():
                        os.remove(tmp.name)

            # –æ–∑–≤—É—á–∫–∞ (–µ—Å–ª–∏ –ø—Ä–æ—Å–∏–ª–∏ ¬´–≥–æ–ª–æ—Å–æ–º¬ª)
            if voice_response_requested:
                await send_voice_message(cid, " ".join(voice_chunks))
            return  # üéâ –≥–æ—Ç–æ–≤–æ!
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # B. —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Üí –ø–ª–æ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        text, imgs = replace_latex_with_png(format_gemini_response(raw_answer))
        if voice_response_requested:
            await send_voice_message(cid, text)
        else:
            await safe_send(cid, text, reply_to=message.message_id)
            for p in imgs:
                try:
                    await bot.send_photo(cid, FSInputFile(p, "latex_part.png"))
                finally:
                    os.remove(p)
        return                                   # –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 2) –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∏–º—è, Unsplash, –∏ —Ç.–¥.)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    lower_inp = user_input.lower()

    # --- –∏–º—è –±–æ—Ç–∞ -------------------------------------------------------
    if any(nc in lower_inp for nc in NAME_COMMANDS):
        answer = "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>! ü§ñ"
        return await (
            send_voice_message(cid, answer) if voice_response_requested
            else message.answer(answer)
        )

    # --- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ ----------------------------------------
    if any(ic in lower_inp for ic in INFO_COMMANDS):
        reply_text = random.choice(OWNER_REPLIES)
        return await (
            send_voice_message(cid, reply_text) if voice_response_requested
            else message.answer(reply_text)
        )

    # --- ¬´–ø–æ–∫–∞–∂–∏ ‚Ä¶¬ª (Unsplash) -----------------------------------------
    show_image, rus_word, image_en, leftover = parse_russian_show_request(user_input)
    if show_image and rus_word:
        leftover = re.sub(r"\b(–≤–∞–π|vai)\b", "", leftover, flags=re.IGNORECASE).strip()

    leftover    = leftover.strip()
    full_prompt = f"{rus_word} {leftover}".strip() if rus_word else leftover

    image_url = await get_unsplash_image_url(
        image_en, UNSPLASH_ACCESS_KEY
    ) if show_image else None

    # –æ—Ç–≤–µ—Ç Gemini
    gemini_text = await generate_and_send_gemini_response(
        cid, full_prompt, show_image, rus_word, leftover
    )

    # --- –µ—Å–ª–∏ –Ω—É–∂–µ–Ω voice‚Äë–æ—Ç–≤–µ—Ç ----------------------------------------
    if voice_response_requested:
        await send_voice_message(cid, gemini_text or "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.")
        return

    # --- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ------------------------------------------
    if image_url:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(image_url) as r:
                if r.status == 200:
                    tmp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg").name
                    with open(tmp_path, "wb") as f:
                        f.write(await r.read())
                    try:
                        await bot.send_chat_action(cid, "upload_photo")
                        caption, rest = split_caption_and_text(gemini_text or "‚Ä¶")
                        await bot.send_photo(
                            cid,
                            FSInputFile(tmp_path, "image.jpg"),
                            caption=caption or "‚Ä¶",
                            **thread(message)
                        )
                        for c in rest:
                            await bot.send_message(cid, c, **thread(message))
                    finally:
                        os.remove(tmp_path)
    elif gemini_text:
        for chunk in split_smart(gemini_text, TELEGRAM_MSG_LIMIT):
            await message.answer(chunk)
    else:
        await message.answer("‚ùå –Ø –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@dp.message(F.text.lower().startswith("–≤–∞–π –ø–æ–∫–∞–∂–∏"))
async def group_show_request(message: Message):
    user_input = message.text.strip()
    await handle_msg(message, recognized_text=user_input, voice_response_requested=False)

async def generate_and_send_gemini_response(cid, full_prompt, show_image, rus_word, leftover):
    gemini_text = ""
    analysis_keywords = [
        "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–Ω–∞ –∫–æ–≥–æ", "–∫—Ç–æ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–≤–ª–∏—è–Ω–∏–µ",
        "—Ñ–∏–ª–æ—Å–æ—Ñ", "–æ—Ç—Ä–∏—Ü–∞–ª", "–ø–æ–≤–ª–∏—è–ª", "—Å–º—ã—Å–ª", "—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º", "–æ–ø—Ä–æ–≤–µ—Ä–≥"
    ]
    # –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è ¬´–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ¬ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî —á—É—Ç—å —Ä–∞—Å—à–∏—Ä—è–µ–º prompt
    needs_expansion = any(k in full_prompt.lower() for k in analysis_keywords)
    if needs_expansion:
        smart_prompt = (
            "–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é. "
            "–ü—Ä–∏–≤–æ–¥–∏ –∏–º–µ–Ω–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å:\n\n"
        )
        full_prompt = smart_prompt + full_prompt

    # –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
    if show_image and rus_word and not leftover:
        return await generate_short_caption(rus_word)

    # —Å—Ç—Ä–æ–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (context window)
    conversation = chat_history.setdefault(cid, [])
    conversation.append({"role": "user", "parts": [full_prompt]})
    if len(conversation) > 8:
        conversation.pop(0)

    try:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞—é‚Ä¶¬ª
        await bot.send_chat_action(chat_id=cid, action="typing")

        # –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω Gemini
        resp = await model.generate_content_async(conversation)
        raw_model_text = resp.text.strip()

        # fallback —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ Gemini –ø—Ä—è–º–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–Ω–∞–Ω–∏–π
        if (
            "–æ–±—Ä–µ–∑–∞–Ω—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞" in raw_model_text.lower()
            or "–Ω–µ –æ–±–ª–∞–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π" in raw_model_text.lower()
        ):
            # –¥–µ–ª–∞–µ–º –≤–µ–±‚Äë–ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            snippets = web_search(full_prompt)
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π prompt —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ –ø–æ–∏—Å–∫–∞
            fallback_prompt = (
                "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n"
                f"{snippets}\n\n"
                f"–ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ –¥–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n{full_prompt}"
            )
            # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–≥–æ–Ω Gemini
            resp2 = await model.generate_content_async([
                {"role": "user", "parts": [fallback_prompt]}
            ])
            raw_model_text = resp2.text.strip()

        # –µ—Å–ª–∏ Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –∑–Ω–∞—á–∏—Ç –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
        if not resp.candidates:
            reason = getattr(resp.prompt_feedback, "block_reason", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            logging.exception(f"[BOT] –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini: –ø—Ä–∏—á–∏–Ω–∞ ‚Äî {reason}")
            gemini_text = (
                f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            )
        else:
            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            gemini_text = format_gemini_response(raw_model_text)
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            conversation.append({"role": "model", "parts": [raw_model_text]})
            if len(conversation) > 8:
                conversation.pop(0)

    except Exception as e:
        logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {e}")
        gemini_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    return gemini_text


async def vocab_reminder_loop():
    while True:
        now = datetime.utcnow()
        for uid, vocab in user_vocab.items():
            if not vocab_reminders_enabled.get(str(uid), True):
                continue
            for entry in vocab:
                last = datetime.fromisoformat(entry.get("last_reviewed", now.isoformat()))
                level = entry.get("review_level", 0)
                interval_days = [0, 1, 2, 4, 7, 14, 30]
                interval = interval_days[min(level, len(interval_days) - 1)]
                if (now - last).days >= interval:
                    try:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚úÖ –ü–æ–º–Ω—é", callback_data="review_remember"),
                                InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–º–Ω—é", callback_data="review_forget")
                            ]
                        ])
                        await bot.send_message(uid,
                            f"üîÅ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ: <b>{entry['word']}</b>\n"
                            f"{entry['meaning']}\n<i>{entry['example']}</i>",
                            reply_markup=keyboard
                        )
                        break  # —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —Ü–∏–∫–ª
                    except Exception as e:
                        logging.exception(f"[VOCAB_REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                    break
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å

async def reminder_loop():
    global reminders
    import pytz
    from datetime import datetime
    while True:
        now_utc = datetime.utcnow().replace(tzinfo=pytz.utc)
        to_send = []
        to_remove = []

        for i, (user_id, remind_dt_utc, note_text) in enumerate(reminders):
            if remind_dt_utc <= now_utc:
                to_send.append((user_id, note_text))
                to_remove.append(i)

        for i in reversed(to_remove):
            reminders.pop(i)
        if to_remove:
            save_reminders()

        for user_id, text in to_send:
            try:
                if "–≤–æ–π—Å" in text.lower() or "–≥–æ–ª–æ—Å–æ–º" in text.lower():
                    await send_voice_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{text}")
                else:
                    await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{text}")
            except Exception as e:
                logging.exception(f"[REMINDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

        
        await asyncio.sleep(30)  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º


@dp.message()
async def handle_all_messages(message: Message):
    user_input = (message.text or "").strip()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å –æ–∑–≤—É—á–∫–æ–π: ---
    if re.search(r"(–ø—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ|–æ–∑–≤—É—á—å –≥–æ–ª–æ—Å–æ–º|–æ—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º|–æ—Ç–≤–µ—Ç—å –≤–æ–π—Å–æ–º)", user_input, re.IGNORECASE):
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–∑–≤—É—á–∏–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if message.reply_to_message and message.reply_to_message.text:
            target = message.reply_to_message.text
            voice_lang = "ru-RU" if detect_lang(target) == "ru" else "en-US"
            await message.reply("üéß –û–∑–≤—É—á–∏–≤–∞—é...")
            await send_voice_message(message.chat.id, target, voice_lang)
            return

        # –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º
        cleaned = re.sub(r"(–ø—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ|–æ–∑–≤—É—á—å –≥–æ–ª–æ—Å–æ–º|–æ—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º|–æ—Ç–≤–µ—Ç—å –≤–æ–π—Å–æ–º)", "", user_input, flags=re.IGNORECASE).strip()
        if not cleaned:
            await message.reply("‚ùå –ù–∞–ø–∏—à–∏, —á—Ç–æ –æ–∑–≤—É—á–∏—Ç—å.")
            return

        await message.reply("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –∏ –æ–∑–≤—É—á–∏–≤–∞—é...")

        try:
            response = await model.generate_content_async([{"role": "user", "parts": [cleaned]}])
            reply_text = response.text.strip()

            # --------------- (–ò–ó–ú–ï–ù–ï–ù–û) –û—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã. ---------------
            # –•–æ—á–µ—à—å, –º–æ–∂–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ –≤–Ω—É—Ç—Ä—å send_voice_message, 
            # –Ω–æ –ø—Ä–æ—â–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å:
            reply_text = re.sub(r"[*_`]+", "", reply_text)

            lang = detect_lang(reply_text)
            voice_lang = "ru-RU" if lang == "ru" else "en-US"
            await send_voice_message(message.chat.id, reply_text, voice_lang)
        except Exception as e:
            logging.exception("[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–∑–≤—É—á–∫–µ:")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–∑–≤—É—á–∏—Ç—å.")
        return

    # --- –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    await handle_all_messages_impl(message, user_input)


# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---------------------- #
async def main():
    global BOT_ID
    me = await bot.get_me()
    BOT_ID = me.id
    
    asyncio.create_task(reminder_loop())
    asyncio.create_task(vocab_reminder_loop())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
