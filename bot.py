import logging
import os
import re
import random
import aiohttp
from html import escape
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY or not UNSPLASH_ACCESS_KEY:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# üîß –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–¥–µ–ª—å Gemini
logging.basicConfig(level=logging.INFO)
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

# ü§ñ Telegram Bot
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

chat_history = {}

# üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5):
                return True
    except:
        return False

# üßº HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Gemini
def format_gemini_response(text: str) -> str:
    code_blocks = {}

    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = f'<pre><code class="language-{lang}">{code}</code></pre>'
        return placeholder

    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)
    text = escape(text)

    for placeholder, block in code_blocks.items():
        text = text.replace(escape(placeholder), block)

    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)

    return text

# üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Unsplash
async def search_unsplash_image(query: str) -> str | None:
    url = "https://api.unsplash.com/search/photos"
    params = {
        "query": query,
        "per_page": 1,
        "client_id": UNSPLASH_ACCESS_KEY
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            results = data.get("results")
            if results:
                return results[0]["urls"]["regular"]
            return None

# ü§î –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∑–≤–∞–ª–∏ –ª–∏ –±–æ—Ç–∞
async def is_bot_called(message: Message) -> bool:
    if message.chat.type == "private":
        return True
    if message.reply_to_message and message.reply_to_message.from_user.id == (await bot.get_me()).id:
        return True
    names = [(await bot.get_me()).username.lower(), "–≤–∞–π", "vai", "–≤–∞–π –±–æ—Ç", "vai bot", "vaibot"]
    return any(name in message.text.lower() for name in names)

# üë§ –£–∑–Ω–∞—é—Ç –ø—Ä–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞?
def is_owner_question(text: str) -> bool:
    return any(k in text.lower() for k in [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü", "–∫—Ç–æ —Å–¥–µ–ª–∞–ª", "–∫—Ç–æ —Å–æ–∑–¥–∞–ª", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–∫–µ–º —Ç—ã —Å–æ–∑–¥–∞–Ω", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω"
    ])

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    if not await is_bot_called(message):
        return

    # üõ°Ô∏è –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if message.message_id in getattr(bot, "_handled_messages", set()):
        return
    bot._handled_messages = getattr(bot, "_handled_messages", set())
    bot._handled_messages.add(message.message_id)

    user_id = message.from_user.id
    user_text = message.text.strip()
    username = message.from_user.username or message.from_user.full_name

    # üë®‚Äçüíª –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    if is_owner_question(user_text):
        answer = random.choice([
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–∏—á–Ω–æ Vandili!",
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω Vandili –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ!",
            "üí° –ú–æ–∏–º –∞–≤—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è Vandili, –∏ —è —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å –∏–º–µ–Ω–Ω–æ –µ–º—É!"
        ])
        await message.answer(format_gemini_response(answer))
        return

    # üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–∞—Ä—Ç/–∫–∞—Ä—Ç–∏–Ω–∫–∞
    if "–∞—Ä—Ç" in user_text.lower() or "—Ñ–æ—Ç–æ" in user_text.lower() or "–∫–∞—Ä—Ç–∏–Ω–∫—É" in user_text.lower():
        try:
            gemini_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. –ß—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å? –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."
            gemini_response = model.generate_content(gemini_prompt)
            description = format_gemini_response(gemini_response.text.strip())

            keywords = re.sub(r"(–ø–æ–∫–∞–∂–∏|–∞—Ä—Ç|—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫—É|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–Ω–∞—Ä–∏—Å—É–π|–¥–∞–π)", "", user_text, flags=re.IGNORECASE).strip()
            if not keywords:
                keywords = "art"

            image_url = await search_unsplash_image(keywords)
            if image_url:
                await message.answer_photo(image_url, caption=description)
            else:
                await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <code>{escape(str(e))}</code>")
        return

    # ü§ñ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini
    chat_history.setdefault(user_id, []).append({"role": "user", "parts": [user_text]})
    if len(chat_history[user_id]) > 5:
        chat_history[user_id].pop(0)

    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = model.generate_content(chat_history[user_id])
        reply = format_gemini_response(response.text)
        if random.random() < 0.3 and username:
            reply = f"@{username}, {reply}"
        await message.answer(reply)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode=ParseMode.HTML)

    except ConnectionError:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        error_text = format_gemini_response(str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_text}", parse_mode=ParseMode.HTML)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
