import logging
import os
import asyncio
import re
import aiohttp
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import google.generativeai as genai

# –¢–æ–∫–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini-—Ç–µ–∫—Å—Ç–∞ ---
def format_gemini_response(text: str) -> str:
    special_chars = r"_[]()~>#+-=|{}.!"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    text = text.replace("**", "")
    text = re.sub(r'\s*```\w*\n', '```\n', text)
    text = re.sub(r'\n```\s*', '\n```', text)
    text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f"```\n{m.group(2)}\n```", text, flags=re.DOTALL)
    text = re.sub(r'(\d+\.) ', r'\n\1 ', text)
    return text

# --- –¢—Ä–∏–≥–≥–µ—Ä—ã ---
TRIGGERS = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]

def is_bot_mentioned(message: types.Message) -> bool:
    text = message.text.lower()
    return (
        any(trigger in text for trigger in TRIGGERS)
        or (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ---
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")

# --- –í–æ–ø—Ä–æ—Å—ã –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ ---
def is_owner_question(text: str) -> bool:
    owner_keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞", "—á–µ–π –∏–∏", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç",
        "–∫—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª", "–¥–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç", "–∫–æ–º—É –æ–Ω —Å–ª—É–∂–∏—Ç",
        "–∫–µ–º –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
        "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω", "–∫–µ–º —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª —ç—Ç–æ—Ç –±–æ—Ç"
    ]
    return any(kw in text.lower() for kw in owner_keywords)

@dp.message()
async def message_router(message: types.Message):
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text
    for trigger in TRIGGERS:
        user_text = user_text.replace(trigger, "").strip()

    if is_owner_question(user_text):
        responses = [
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è *Vandili*.",
            "üß† –ò–ò –±–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è *Vandili*.",
            "üíº –í–ª–∞–¥–µ–ª–µ—Ü –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ ‚Äî *Vandili*.",
            "üîß –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω—É–∂–¥ *Vandili*.",
            "üë®‚Äçüíª –í—Å—ë, —á—Ç–æ —è –¥–µ–ª–∞—é ‚Äî –¥–ª—è *Vandili*!"
        ]
        await message.answer(format_gemini_response(random.choice(responses)), parse_mode="MarkdownV2")
        return

    await bot.send_chat_action(message.chat.id, "typing")

    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = model.generate_content(user_text).text
        formatted = format_gemini_response(response)
        await message.answer(formatted, parse_mode="MarkdownV2")

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")

    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {format_gemini_response(str(e))}", parse_mode="MarkdownV2")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
