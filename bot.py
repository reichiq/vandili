import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command

load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

chat_history = {}

NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]
IMAGE_TRIGGERS = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ",
    "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É",
    "–¥–∞–π —Ñ–æ—Ç–æ", "–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
]

CAPTION_LIMIT = 950        # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (caption) –ø–æ–¥ —Ñ–æ—Ç–æ
TELEGRAM_MSG_LIMIT = 4096  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è

def format_gemini_response(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Gemini:
     - ```‚Ä¶``` -> <pre><code>...</code></pre>
     - —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã,
     - **‚Ä¶** -> <b>‚Ä¶</b>, *‚Ä¶* -> <i>‚Ä¶</i>, `‚Ä¶` -> <code>‚Ä¶</code>
    """
    code_blocks = {}

    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = f'<pre><code class="language-{lang}">{code}</code></pre>'
        return placeholder

    # 1) –ò—â–µ–º —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ ```‚Ä¶```
    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)
    # 2) –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    text = escape(text)
    # 3) –í–æ–∑–≤—Ä–∞—â–∞–µ–º <pre><code>...</code></pre> –Ω–∞ –º–µ—Å—Ç–æ
    for placeholder, block_html in code_blocks.items():
        text = text.replace(escape(placeholder), block_html)
    # 4) **‚Ä¶** / *‚Ä¶* / `‚Ä¶`
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    return text.strip()


def get_safe_prompt(text: str) -> str:
    """
    –î–ª—è "–ø–æ–∫–∞–∂–∏ —Ç–∏–≥—Ä–∞" -> "—Ç–∏–≥—Ä–∞". –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è Unsplash.
    """
    text = re.sub(r'[.,!?\-\n]', ' ', text.lower())
    match = re.search(r'–ø–æ–∫–∞–∂–∏(?:\s+–º–Ω–µ)?\s+(\w+)', text)
    if match:
        return match.group(1)
    return re.sub(r"[^a-zA-Z–∞-—è–ê-–Ø0-9\s]", "", text).strip().split(" ")[0]


async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç Unsplash API, –ø—ã—Ç–∞—è—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–ª–∏ None.
    """
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['urls']['regular']
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None


def split_smart(text: str, limit: int) -> list[str]:
    """
    "–£–º–Ω–∞—è" —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª–µ–µ `limit` —Å–∏–º–≤–æ–ª–æ–≤,
    —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ "`. `" (—Ç–æ—á–∫–∞ + –ø—Ä–æ–±–µ–ª) –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø—Ä–æ–±–µ–ª `" "` 
    (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë—Ç, —Ä–µ–∂–µ—Ç –∂—ë—Å—Ç–∫–æ).
    
    –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞:
    1) –ë–µ—Ä—ë–º –∫—É—Å–æ–∫ –≤ `limit` —Å–∏–º–≤–æ–ª–æ–≤.
    2) –í –Ω—ë–º –∏—â–µ–º rfind('. ') -> –µ—Å–ª–∏ –µ—Å—Ç—å, —Ä–µ–∂–µ–º —Ç—É—Ç (—Å —É—á—ë—Ç–æ–º —Ç–æ—á–∫–∏).
    3) –ï—Å–ª–∏ –Ω–µ—Ç '. ', –ø—Ä–æ–±—É–µ–º rfind(' ').
    4) –ï—Å–ª–∏ –Ω–µ—Ç –∏ –ø—Ä–æ–±–µ–ª–∞ ‚Äî —Ä–µ–∂–µ–º –∂—ë—Å—Ç–∫–æ –Ω–∞ `limit`.
    5) –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ.
    """
    results = []
    start = 0
    length = len(text)

    while start < length:
        # –û—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞?
        if (length - start) <= limit:
            # –ë–µ—Ä—ë–º –≤—Å—ë —Ü–µ–ª–∏–∫–æ–º
            results.append(text[start:].strip())
            break

        # –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª–∏–Ω–æ–π limit
        candidate = text[start : start + limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            # –ù–µ –Ω–∞—à–ª–∏ —Ç–æ—á–∫—É + –ø—Ä–æ–±–µ–ª
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                # –î–∞–∂–µ –ø—Ä–æ–±–µ–ª–∞ –Ω–µ—Ç - –ø—Ä–∏–¥—ë—Ç—Å—è —Ä—É–±–∏—Ç—å –∂—ë—Å—Ç–∫–æ
                cut_pos = len(candidate)
            else:
                # –ò–Ω–∞—á–µ –æ—Ç—Å–µ–∫–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
                pass
        else:
            # –ù–∞—à–ª–∏ '. ', –≤–∫–ª—é—á–∏–º —Å–∞–º—É —Ç–æ—á–∫—É
            cut_pos += 1

        # –ë–µ—Ä—ë–º –∫—É—Å–æ–∫ –¥–æ cut_pos
        chunk = text[start : start + cut_pos].strip()
        if chunk:
            results.append(chunk)
        # –°–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä—ë–¥ –Ω–∞ cut_pos
        start += cut_pos

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π
    return [r for r in results if r]


@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–∫—Ç–∞–º–∏, "
        "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –¥–∞–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ —Ç–∏–≥—Ä–∞¬ª\n"
        "‚Ä¢ ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –õ—É–Ω—É¬ª\n\n"
        "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üß†‚ú®"
    )
    await message.answer(greet)


@dp.message()
async def handle_msg(message: Message):
    user_input = message.text.strip()
    cid = message.chat.id
    logging.info(f"[BOT] cid={cid}, text='{user_input}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –∏–º—è
    if any(name_trig in user_input.lower() for name_trig in NAME_COMMANDS):
        await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –∞–≤—Ç–æ—Ä–∞
    if any(info_trig in user_input.lower() for info_trig in INFO_COMMANDS):
        await message.answer(random.choice(OWNER_REPLIES))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Gemini
    chat_history.setdefault(cid, []).append({"role": "user", "parts": [user_input]})
    if len(chat_history[cid]) > 5:
        chat_history[cid].pop(0)

    try:
        await bot.send_chat_action(cid, "typing")
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É Gemini
        resp = model.generate_content(chat_history[cid])
        gemini_text = format_gemini_response(resp.text)
        logging.info(f"[GEMINI] => {gemini_text[:200]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞
        prompt = get_safe_prompt(user_input)
        image_url = await get_unsplash_image_url(prompt, UNSPLASH_ACCESS_KEY)
        triggered = any(t in user_input.lower() for t in IMAGE_TRIGGERS)
        logging.info(f"[BOT] triggered={triggered}, image={image_url}")

        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—ë –ø—Ä–æ—Å–∏–ª
        if image_url and triggered:
            async with aiohttp.ClientSession() as sess:
                async with sess.get(image_url) as r:
                    if r.status == 200:
                        photo_bytes = await r.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                            tmpf.write(photo_bytes)
                            tmp_path = tmpf.name

                        try:
                            await bot.send_chat_action(cid, "upload_photo")
                            file = FSInputFile(tmp_path, filename="image.jpg")

                            # –£–º–µ—Å—Ç–∏–º –ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ caption?
                            if len(gemini_text) <= CAPTION_LIMIT:
                                # –¶–µ–ª–∏–∫–æ–º –∏–¥—ë—Ç –≤ caption
                                if len(gemini_text) <= TELEGRAM_MSG_LIMIT:
                                    # –ò —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    await bot.send_photo(cid, file, caption=gemini_text)
                                else:
                                    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–µ–∫—Å—Ç (–¥–∞–∂–µ –ø—Ä–∏ 950) > 4096, –±—ã–≤–∞–µ—Ç —Ä–µ–¥–∫–æ
                                    # –ù–æ —á–∏—Å—Ç–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏: —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ + caption, –∞ –ª–∏—à–Ω–µ–µ - –Ω–µ—Ç
                                    # –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
                                    chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
                                    # –ü–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ (—Ç–æ—á–Ω–æ –≤–ª–µ–∑–∞–µ—Ç, —Ä–∞–∑ len(gemini_text)<=950)
                                    await bot.send_photo(cid, file, caption=chunks[0])
                                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Å–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                                    for ch in chunks[1:]:
                                        await message.answer(ch)

                            else:
                                # –¢–µ–∫—Å—Ç –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤ caption => —Å—Ç–∞–≤–∏–º '‚Ä¶'
                                await bot.send_photo(cid, file, caption="‚Ä¶")
                                # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ "—É–º–Ω–æ–π" —Ä–∞–∑–±–∏–≤–∫–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096
                                if len(gemini_text) <= TELEGRAM_MSG_LIMIT:
                                    await message.answer(gemini_text)
                                else:
                                    chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
                                    for ch in chunks:
                                        await message.answer(ch)

                        finally:
                            if os.path.exists(tmp_path):
                                os.remove(tmp_path)

                        return

        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏–ª
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "—É–º–Ω–æ" —Ä–∞–∑–±–∏—Ç—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑)
        if len(gemini_text) <= TELEGRAM_MSG_LIMIT:
            await message.answer(gemini_text)
        else:
            chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
            for ch in chunks:
                await message.answer(ch)

    except Exception as e:
        logging.error(f"[BOT] Error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape(str(e))}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
