import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Message
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command

try:
    from googletrans import Translator
    translator = Translator()
    USE_TRANSLATOR = True
except ImportError:
    translator = None
    USE_TRANSLATOR = False

load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(
    model_name="models/gemini-1.5-pro-latest",
    generation_config={"system_instruction": {
        "role": "user",
        "parts": ["–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."]
    }}
)

chat_history = {}

NAME_COMMANDS = ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]
OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π <i>Vandili</i>.",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–µ–≥–æ.",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω –º–æ–π –∞–≤—Ç–æ—Ä.",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å.",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ.",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü."
]
IMAGE_TRIGGERS = [
    "–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ",
    "–ø—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "–ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É",
    "–¥–∞–π —Ñ–æ—Ç–æ", "–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
]
PROMPT_FIX = {
    "–ø—É–¥–µ–ª—å": "poodle", "–ø—É–¥–µ–ª–∏": "poodle",
    "–∫–æ—à–∫–∞": "cat", "–∫–æ—à–∫–∏": "cats", "–∫–æ—Ç": "cat", "–∫–æ—Ç—ã": "cats",
    "—Å–æ–±–∞–∫–∞": "dog", "—Å–æ–±–∞–∫–∏": "dogs",
    "–æ—Ä—Ö–∏–¥–µ—é": "orchid", "–æ—Ä—Ö–∏–¥–µ–∏": "orchids", "–æ—Ä—Ö–∏–¥–µ—è": "orchid",
    "–ø–µ—Ä—Å–∏–∫–∏": "peaches", "–æ–±–µ–∑—å—è–Ω–∞": "monkey", "–æ–±–µ–∑—å—è–Ω—É": "monkey"
}

UNWANTED_REGEX = [
    r"(?is)(–∫\s+—Å–æ–∂–∞–ª–µ–Ω–∏—é.*?–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ.*?–ø–æ–∫–∞–∑–∞—Ç—å.*?(\.|$))",
    r"(?is)(\b–Ω–µ\s+–º–æ–≥—É\s+(?:–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ\s+)?–ø–æ–∫–∞–∑–∞—Ç—å\b.*?(\.|$))",
    r"(?is)(\b—è\s+(?:—Ç–µ–∫—Å—Ç–æ–≤\w*|–±–æ–ª—å—à–∞—è\s+—è–∑—ã–∫–æ–≤–∞—è\s+–º–æ–¥–µ–ª—å|language\s+model).{0,50}(\.|$))",
    r"(?is)(\b–Ω–µ\s+–º–æ–≥—É\s+–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏.*?(\.|$))",
    r"(?is)(\b–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\s+–ø–æ–∏—Å–∫–æ–≤.*?(\.|$))",
    r"(?is)(\b—è\s+–º–æ–≥—É\s+–ø–æ–º–æ—á—å.*?\s–Ω–∞–π—Ç–∏.*?(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–∫–∞—Ä—Ç–∏–Ω–∫–∏).*?(\.|$))",
    r"(?is)(https?:\/\/[^\s)]+)",
    r"(?is)(google|yandex|bing|yahoo|–ø–æ–∏—Å–∫–æ–≤–∏–∫|search\s+engine)",
    r"(?is)(\b(?:—Ä–µ–∫–æ–º–µ–Ω–¥—É—é|—Å–æ–≤–µ—Ç—É—é)\s+–ø–æ–∏—Å–∫.*?(\.|$))",
    r"(?is)(\b–≤—ã\s+–º–æ–∂–µ—Ç–µ\s+–Ω–∞–π—Ç–∏\b.*?(\.|$))",
]

def remove_unwanted_phrases(text: str) -> str:
    for pattern in UNWANTED_REGEX:
        text = re.sub(pattern, "", text, flags=re.IGNORECASE | re.DOTALL)
    return text

def maybe_shorten_text(original: str, user_input: str) -> str:
    if re.search(r"\b–ø–æ–∫–∞–∂–∏\b", user_input.lower()) and not re.search(r"(—Ä–∞—Å—Å–∫–∞–∂–∏|–æ–ø–∏—à–∏|—Ñ–∞–∫—Ç—ã|–ø–∞—Ä—É\s+—Ñ–∞–∫—Ç–æ–≤)", user_input.lower()):
        sents = re.split(r'(?<=[.!?])\s+', original)
        return " ".join(sents[:2]).strip()
    return original

def format_gemini_response(text: str, user_input: str) -> str:
    text = re.sub(r"```(?:\w+)?\n([\s\S]+?)```", "", text)
    text = re.sub(r"\[.*?(—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏|–≤—Å—Ç–∞–≤—å—Ç–µ|–≤—Å—Ç–∞–≤–∏—Ç—å|insert|–∫–∞—Ä—Ç–∏–Ω–∫—É).*?\]", "", text, flags=re.IGNORECASE)
    text = escape(text)
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)
    text = re.sub(r'^\s*\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = remove_unwanted_phrases(text)
    text = maybe_shorten_text(text.strip(), user_input)
    return text.strip()

def get_safe_prompt(user_input: str) -> str:
    text = user_input.lower()
    text = re.sub(r'[.,!?\-\n]', ' ', text)
    text = re.sub(r"\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–ø–æ–∫–∞–∂–∏|–º–Ω–µ|–ø—Ä–æ|—Ñ–∞–∫—Ç|—Ñ–æ—Ç–æ|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–ø—Ä–∏–∫—Ä–µ–ø–∏|–¥–∞–π|–∏|–æ|–æ–±|–æ—Ç–ø—Ä–∞–≤—å|—á—Ç–æ|—Ç–∞–∫–æ–µ|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)\b", "", text)
    words = text.strip().split()
    for i, w in enumerate(words):
        if w in PROMPT_FIX:
            words[i] = PROMPT_FIX[w]
    cleaned = " ".join(words).strip()
    if not cleaned:
        return "random"
    if USE_TRANSLATOR:
        result = translator.translate(cleaned, src="ru", dest="en").text
        logging.info(f"[BOT] RU->EN: '{cleaned}' => '{result}'")
        return result.strip() or "random"
    return cleaned

async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                logging.info(f"[UNSPLASH] Status={resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"Unsplash error: {e}")
    return None

def split_text(text: str, max_len=950):
    parts = []
    while len(text) > max_len:
        idx = text[:max_len].rfind('. ')
        if idx == -1:
            idx = max_len
        parts.append(text[:idx+1].strip())
        text = text[idx+1:].strip()
    if text:
        parts.append(text)
    return parts

@dp.message(Command("start"))
async def cmd_start(message: Message):
    greet = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–∫—Ç–∞–º–∏, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –¥–∞–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–ø–æ–∫–∞–∂–∏ —Ç–∏–≥—Ä–∞¬ª\n"
        "‚Ä¢ ¬´—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –õ—É–Ω—É¬ª\n\n"
        "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üß†‚ú®"
    )
    await message.answer(greet)

@dp.message()
async def handle_msg(message: Message):
    user_input = message.text.strip()
    cid = message.chat.id
    logging.info(f"[BOT] cid={cid}, text='{user_input}'")

    if "—Å–ª–æ–∂–∏ –¥–≤–∞ —á–∏—Å–ª–∞" in user_input.lower():
        explanation = (
            "<b>–ü—Ä–∏–º–µ—Ä Python-–∫–æ–¥–∞:</b>\n\n"
            "<pre>def —Å–ª–æ–∂–∏—Ç—å_—á–∏—Å–ª–∞(a, b):\n"
            "    \"\"\"–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\"\"\"\n"
            "    —Å—É–º–º–∞ = a + b\n"
            "    return —Å—É–º–º–∞\n\n"
            "—á–∏—Å–ª–æ1 = float(input(\"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: \"))\n"
            "—á–∏—Å–ª–æ2 = float(input(\"–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: \"))\n"
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–ª–æ–∂–∏—Ç—å_—á–∏—Å–ª–∞(—á–∏—Å–ª–æ1, —á–∏—Å–ª–æ2)\n"
            "print(\"–°—É–º–º–∞:\", —Ä–µ–∑—É–ª—å—Ç–∞—Ç)</pre>\n\n"
            "<b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É.\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏."
        )
        await message.answer(explanation, parse_mode=ParseMode.HTML)
        return

    if any(name_trig in user_input.lower() for name_trig in NAME_COMMANDS):
        await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>!")
        return

    if any(info_trig in user_input.lower() for info_trig in INFO_COMMANDS):
        r = random.choice(OWNER_REPLIES)
        await message.answer(r)
        return

    chat_history.setdefault(cid, []).append({"role": "user", "parts": [user_input]})
    if len(chat_history[cid]) > 5:
        chat_history[cid].pop(0)

    try:
        await bot.send_chat_action(cid, "typing")
        resp = model.generate_content(chat_history[cid])
        gemini_text = format_gemini_response(resp.text, user_input)
        logging.info(f"[GEMINI] => {gemini_text[:200]}")

        prompt = get_safe_prompt(user_input)
        image_url = await get_unsplash_image_url(prompt, UNSPLASH_ACCESS_KEY)
        triggered = any(t in user_input.lower() for t in IMAGE_TRIGGERS)
        logging.info(f"[BOT] triggered={triggered}, image={image_url}")

        if image_url and triggered:
            async with aiohttp.ClientSession() as sess:
                async with sess.get(image_url) as r:
                    if r.status == 200:
                        photo_bytes = await r.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                            tmpf.write(photo_bytes)
                            tmp_path = tmpf.name

                        parts = split_text(gemini_text)
                        try:
                            await bot.send_chat_action(cid, "upload_photo")
                            file = FSInputFile(tmp_path, filename="image.jpg")
                            cpt = parts[0] if parts else "..."
                            await bot.send_photo(cid, file, caption=cpt)
                            for chunk in parts[1:]:
                                await message.answer(chunk)
                        finally:
                            if os.path.exists(tmp_path):
                                os.remove(tmp_path)
                        return

        for chunk in split_text(gemini_text):
            await message.answer(chunk)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–≤—è–∑–∏ —Å –æ–±–ª–∞–∫–∞–º–∏.")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    except Exception as e:
        logging.error(f"[BOT] Error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape(str(e))}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
