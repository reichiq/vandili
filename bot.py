import logging
import re
import random
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from google.generativeai import GenerativeModel
from config import TELEGRAM_BOT_TOKEN, GEMINI_API_KEY
import google.generativeai as genai
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = GenerativeModel("gemini-pro")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_names = {}
user_histories = {}
MAX_HISTORY = 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5):
                return True
    except:
        return False

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def format_gemini_response(text: str) -> str:
    special_chars = r"_[]()~>#+-=|{}.!"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")

    text = text.replace("**", "")
    text = re.sub(r'```(\w+)?\n', '```\n', text)
    text = re.sub(r'\n```', '\n```', text)
    text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f"```\n{m.group(2)}\n```", text, flags=re.DOTALL)
    text = re.sub(r'(\d+\.) ', r'\n\1 ', text)

    return text

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
owner_keywords = [
    "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞", "—á–µ–π –∏–∏", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç",
    "–∫—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª", "–¥–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç", "–∫–æ–º—É –æ–Ω —Å–ª—É–∂–∏—Ç",
    "–∫–µ–º –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å",
    "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω", "–∫–µ–º —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª —ç—Ç–æ—Ç –±–æ—Ç"
]
def is_owner_question(text: str) -> bool:
    return any(re.search(rf"\\b{re.escape(keyword)}\\b", text.lower()) for keyword in owner_keywords)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def chat_with_gemini(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç –∏ –Ω–µ reply
    if not (message.text and (message.reply_to_message and message.reply_to_message.from_user.id == (await bot.me()).id) or f"@{(await bot.me()).username}" in message.text):
        return

    user_id = message.from_user.id
    user_text = message.text.replace(f"@{(await bot.me()).username}", "").strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    if is_owner_question(user_text):
        replies = [
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili üß†",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è Vandili ü§ñ",
            "–°–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî Vandili. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–µ–º—É üë®‚Äçüíª",
            "Vandili ‚Äî –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –≤–ª–∞–¥–µ–ª–µ—Ü üí°",
            "–Ø —Å–ª—É–∂—É —Ç–æ–ª—å–∫–æ Vandili –∏ –Ω–∏–∫–æ–º—É –±–æ–ª—å—à–µ ‚ú®"
        ]
        await message.answer(format_gemini_response(random.choice(replies)), parse_mode="MarkdownV2")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
    if re.search(r'–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç –º–µ–Ω—è|–º–æ[–µ—è] –∏–º—è', user_text.lower()):
        match = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç –º–µ–Ω—è|–º–æ[–µ—è] –∏–º—è)\s+([\w–ê-–Ø–∞-—è—ë–Å]+)', user_text, re.IGNORECASE)
        if match:
            user_names[user_id] = match.group(1)
            await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {match.group(1)}! üòä", parse_mode="MarkdownV2")
            return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if user_id not in user_histories:
        user_histories[user_id] = []
    user_histories[user_id].append({"role": "user", "parts": [user_text]})
    user_histories[user_id] = user_histories[user_id][-MAX_HISTORY:]

    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = await model.generate_content_async(user_histories[user_id])
        reply_text = response.text

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if user_id in user_names and random.random() < 0.5:
            reply_text = f"{user_names[user_id]}, {reply_text}"

        user_histories[user_id].append({"role": "model", "parts": [reply_text]})
        user_histories[user_id] = user_histories[user_id][-MAX_HISTORY:]

        await message.answer(format_gemini_response(reply_text), parse_mode="MarkdownV2")

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {format_gemini_response(str(e))}", parse_mode="MarkdownV2")


if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))
