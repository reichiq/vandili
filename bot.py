import logging
import os
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å MarkdownV2
from aiogram.client.default import DefaultBotProperties
bot = Bot(
    token=TELEGRAM_BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode="MarkdownV2")
)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def escape_markdown_v2(text):
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = escape_markdown_v2(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!")
    await message.answer(text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
def is_bot_mentioned(message: types.Message):
    triggers = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]
    text = message.text.lower()
    return (
        any(trigger in text for trigger in triggers)
        or (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chat_with_gemini(message: types.Message):
    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()

    try:
        response = model.generate_content(user_text)

        if "```" in response.text:
            parts = response.text.split("```")
            response_text = f"```{parts[1]}```"
        else:
            response_text = response.text

        response_text = escape_markdown_v2(response_text)
        await message.answer(response_text)

    except Exception as e:
        error_text = escape_markdown_v2(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(error_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())