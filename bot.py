import asyncio
import google.generativeai as genai
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# üîë –í—Å—Ç–∞–≤—å API-–∫–ª—é—á –æ—Ç Google Gemini
GEMINI_API_KEY = "AIzaSyAYEQ4CYf9w98CViYyFsnNKu6WK1Eqtfp4"

# –ù–∞—Å—Ç—Ä–æ–∏–º Google Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro")  # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ "gemini-1.5-pro"

# –ù–∞—Å—Ç—Ä–æ–∏–º Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7561074770:AAFCd1Gemz_g-mB-0FU0VXJa53BM3Lq41wA"
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Google Gemini AI. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!")

# üìå AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def chat_with_gemini(message: Message):
    try:
        response = model.generate_content([message.text])
        await message.answer(response.text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())