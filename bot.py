# ---------------------- –ò–º–ø–æ—Ä—Ç—ã ---------------------- #
import logging
import os
import re
import random
import aiohttp
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatType
from aiogram.types import (
    FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, InputFile, BufferedInputFile
)
from aiogram.client.default import DefaultBotProperties
from html import escape
from dotenv import load_dotenv
from pathlib import Path
import asyncio
import google.generativeai as genai
import tempfile
from aiogram.filters import Command
from pymorphy3 import MorphAnalyzer
from string import punctuation

from google.cloud import translate
from google.oauth2 import service_account

from docx import Document
from PyPDF2 import PdfReader
import json

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ ---------------------- #
def extract_text_from_file(filename: str, file_bytes: bytes) -> str:
    if filename.endswith(".txt") or filename.endswith(".py"):
        return file_bytes.decode("utf-8", errors="ignore")
    elif filename.endswith(".pdf"):
        try:
            with BytesIO(file_bytes) as pdf_stream:
                reader = PdfReader(pdf_stream)
                return "\n".join(page.extract_text() or "" for page in reader.pages)
        except Exception:
            return ""
    elif filename.endswith(".docx"):
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmpf:
                tmpf.write(file_bytes)
                tmp_path = tmpf.name
            doc = Document(tmp_path)
            os.remove(tmp_path)
            return "\n".join(p.text for p in doc.paragraphs)
        except Exception:
            return ""
    return ""

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------- #
key_path = '/root/vandili/gcloud-key.json'
credentials = service_account.Credentials.from_service_account_file(key_path)
translate_client = translate.TranslationServiceClient(credentials=credentials)

load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
morph = MorphAnalyzer()

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="models/gemini-2.0-flash")

chat_history = {}
user_documents = {}

ENABLED_CHATS_FILE = "enabled_chats.json"
ADMIN_ID = 1936733487

SUPPORT_PROMPT_TEXT = (
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ) ‚Äî –≤—Å—ë –¥–æ–π–¥—ë—Ç –¥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
)

def thread_kwargs(message: Message) -> dict:
    """
    –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–≥—Ä—É–ø–ø–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏, –≤–µ—Ä–Ω—ë–º —Å–ª–æ–≤–∞—Ä—å
    {"message_thread_id": ...}, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ.
    """
    if (
        message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]
        and message.message_thread_id is not None
    ):
        return {"message_thread_id": message.message_thread_id}
    return {}

def load_enabled_chats() -> set:
    if not os.path.exists(ENABLED_CHATS_FILE):
        return set()
    try:
        with open(ENABLED_CHATS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å enabled_chats: {e}")
        return set()

def save_enabled_chats(chats: set):
    try:
        with open(ENABLED_CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(list(chats), f)
    except Exception as e:
        logging.warning(f"[BOT] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å enabled_chats: {e}")

enabled_chats = load_enabled_chats()
support_mode_users = set()

# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---------------------- #
@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ /start support (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –≥—Ä—É–ø–ø—ã)
    if message.chat.type == ChatType.PRIVATE and message.text.startswith("/start support"):
        support_mode_users.add(message.from_user.id)
        await message.answer(SUPPORT_PROMPT_TEXT)
        return

    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    greet = """–ü—Ä–∏–≤–µ—Ç! –Ø <b>VAI</b> ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üòä

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ß–∏—Ç–∞—é PDF, DOCX, TXT –∏ .py-—Ñ–∞–π–ª—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª.
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞.
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∫–æ–¥–æ–º ‚Äî –Ω–∞–ø–∏—à–∏ #—Ä–µ—Ñ–∞–∫—Ç–æ—Ä –∏ –≤—Å—Ç–∞–≤—å –∫–æ–¥.
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã /help –∏ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"""
    await bot.send_message(
        chat_id=message.chat.id,
        text=greet,
        **thread_kwargs(message)
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.add(message.chat.id)
        save_enabled_chats(enabled_chats)
        logging.info(f"[BOT] –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        enabled_chats.discard(message.chat.id)
        save_enabled_chats(enabled_chats)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            **thread_kwargs(message)
        )
        logging.info(f"[BOT] –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    if message.chat.type == ChatType.PRIVATE:
        # –í –ª–∏—á–∫–µ ‚Äî –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–∫–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                callback_data="support_request"
            )]]
        )
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:",
            reply_markup=keyboard
        )
    else:
        # –í –≥—Ä—É–ø–ø–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –õ–° —Å intent –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        private_url = f"https://t.me/{BOT_USERNAME}?start=support"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                url=private_url
            )]]
        )
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É:",
            reply_markup=keyboard,
            **thread_kwargs(message)
        )

# ---------------------- –†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (callback) ---------------------- #
@dp.callback_query(F.data == "support_request")
async def handle_support_click(callback: CallbackQuery):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ —É –Ω–∞—Å URL-–∫–Ω–æ–ø–∫–∞.
    """
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏¬ª
    await callback.answer()

    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_mode_users.add(callback.from_user.id)
    await callback.message.answer(SUPPORT_PROMPT_TEXT)

@dp.message()
async def handle_all_messages(message: Message):
    uid = message.from_user.id

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å–æ–æ–±—â–∞–µ–º –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
    if uid in support_mode_users:
        support_mode_users.discard(uid)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        try:
            caption = message.caption or message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            username_part = f" (@{message.from_user.username})" if message.from_user.username else ""
            content = (
                f"\u2728 <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç <b>{message.from_user.full_name}</b>{username_part} "
                f"(id: <code>{uid}</code>):\n\n{caption}"
            )

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if message.photo:
                file = await bot.get_file(message.photo[-1].file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        photo_bytes = await resp.read()
                await bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=BufferedInputFile(photo_bytes, filename="image.jpg"),
                    caption=content
                )
            elif message.video:
                file = await bot.get_file(message.video.file_id)
                url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        video_bytes = await resp.read()
                await bot.send_video(
                    chat_id=ADMIN_ID,
                    video=BufferedInputFile(video_bytes, filename="video.mp4"),
                    caption=content
                )
            else:
                await bot.send_message(chat_id=ADMIN_ID, text=content)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except Exception as e:
            logging.warning(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ

    # 2. –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª ‚Äî —á–∏—Ç–∞–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if message.document:
        file = await bot.get_file(message.document.file_id)
        url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                file_bytes = await resp.read()
        text = extract_text_from_file(message.document.file_name, file_bytes)
        if text:
            user_documents[uid] = text
            await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
        return  # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ ‚Äì —Ç–æ–∂–µ –≤—ã—Ö–æ–¥–∏–º

    # 3. –õ–æ–≥–∏—Ä—É–µ–º
    logging.info(f"[DEBUG] Message from {uid}: content_type={message.content_type}, has_document={bool(message.document)}, text={message.text!r}")

    # 4. –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await handle_msg(message)

# ---------------------- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è "–≤–∞–π –ø–æ–∫–∞–∂–∏ ..." ---------------------- #
@dp.message(F.text.lower().startswith("–≤–∞–π –ø–æ–∫–∞–∂–∏"))
async def group_show_request(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await handle_msg(message)

# ---------------------- –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ / –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini ---------------------- #
async def generate_and_send_gemini_response(cid, full_prompt, show_image, rus_word, leftover):
    gemini_text = ""

    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞: –µ—Å–ª–∏ —Å–ª–æ–∂–Ω—ã–π ‚Äî —É—Å–∏–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    analysis_keywords = [
        "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–Ω–∞ –∫–æ–≥–æ", "–∫—Ç–æ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–≤–ª–∏—è–Ω–∏–µ",
        "—Ñ–∏–ª–æ—Å–æ—Ñ", "–æ—Ç—Ä–∏—Ü–∞–ª", "–ø–æ–≤–ª–∏—è–ª", "—Å–º—ã—Å–ª", "—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º", "–æ–ø—Ä–æ–≤–µ—Ä–≥"
    ]
    needs_expansion = any(k in full_prompt.lower() for k in analysis_keywords)
    if needs_expansion:
        smart_prompt = (
            "–û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é. "
            "–ü—Ä–∏–≤–æ–¥–∏ –∏–º–µ–Ω–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å:\n\n"
        )
        full_prompt = smart_prompt + full_prompt

    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    if show_image and rus_word and not leftover:
        gemini_text = generate_short_caption(rus_word)
        return gemini_text

    if full_prompt:
        chat_history.setdefault(cid, []).append({"role": "user", "parts": [full_prompt]})
        if len(chat_history[cid]) > 5:
            chat_history[cid].pop(0)

        try:
            await bot.send_chat_action(chat_id=cid, action="typing")
            resp = model.generate_content(chat_history[cid])
            if not resp.candidates:
                reason = getattr(resp.prompt_feedback, "block_reason", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
                logging.warning(f"[BOT] –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini: –ø—Ä–∏—á–∏–Ω–∞ ‚Äî {reason}")
                gemini_text = (
                    "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–ª–∏ "
                    "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."
                )
            else:
                gemini_text = format_gemini_response(resp.text)
        except Exception as e:
            logging.error(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {e}")
            gemini_text = (
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )

    return gemini_text

CAPTION_LIMIT = 950
TELEGRAM_MSG_LIMIT = 4096

IMAGE_TRIGGERS_RU = ["–ø–æ–∫–∞–∂–∏", "–ø–æ–∫–∞–∂–∏ –º–Ω–µ", "—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å", "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ"]

NAME_COMMANDS = [
    "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ–µ –∏–º—è", "—Ç–≤–æ—ë –∏–º—è", "what is your name", "who are you"
]
INFO_COMMANDS = [
    "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç—ã", "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–≤–æ–π –∞–≤—Ç–æ—Ä",
    "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
    "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–≤–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü", "–≤ —Å–º—ã—Å–ª–µ –∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
]

OWNER_REPLIES = [
    "–Ø ‚Äî <b>VAI</b>, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π <i>Vandili</i> üòé",
    "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî <b>Vandili</b>. –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è –Ω–∏—Ö üòâ",
    "–Ø –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É <i>Vandili</i>, –æ–Ω–∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ ‚ú®",
    "–°–æ–∑–¥–∞–Ω <b>Vandili</b> ‚Äî –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –¥–∞–ª–∏ –º–Ω–µ –∂–∏–∑–Ω—å ü§ù",
    "–Ø –±–æ—Ç <b>Vandili</b>. –í—Å—ë –ø—Ä–æ—Å—Ç–æ ü§ó",
    "–Ø –ø—Ä–æ–¥—É–∫—Ç <i>Vandili</i>. –û–Ω–∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ üòá"
]

RU_EN_DICT = {
    "–æ–±–µ–∑—å—è–Ω–∞": "monkey",
    "—Ç–∏–≥—Ä": "tiger",
    "–∫–æ—à–∫–∞": "cat",
    "—Å–æ–±–∞–∫–∞": "dog",
    "–ø–µ–π–∑–∞–∂": "landscape",
    "—á–∞–π–∫–∞": "seagull",
    "–ø–∞—Ä–∏–∂": "paris",
    "—É—Ç–∫–æ–Ω–æ—Å": "platypus",
    "–ø—É–¥–µ–ª—å": "poodle",
    "–º–µ–¥–æ–µ–¥": "honey badger"
}

def split_smart(text: str, limit: int) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ –Ω–µ –±–æ–ª–µ–µ limit —Å–∏–º–≤–æ–ª–æ–≤,
    —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–ª–æ–≤–∞.
    """
    results = []
    start = 0
    length = len(text)
    while start < length:
        remain = length - start
        if remain <= limit:
            results.append(text[start:].strip())
            break
        candidate = text[start : start+limit]
        cut_pos = candidate.rfind('. ')
        if cut_pos == -1:
            cut_pos = candidate.rfind(' ')
            if cut_pos == -1:
                cut_pos = len(candidate)
        else:
            cut_pos += 1
        chunk = text[start : start+cut_pos].strip()
        if chunk:
            results.append(chunk)
        start += cut_pos
    return [x for x in results if x]

def split_caption_and_text(text: str) -> tuple[str, list[str]]:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å—å (–¥–æ 950 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫—É—Å–∫–æ–≤ (–¥–æ 4096).
    """
    if len(text) <= CAPTION_LIMIT:
        return text, []
    chunks_950 = split_smart(text, CAPTION_LIMIT)
    caption = chunks_950[0]
    leftover = " ".join(chunks_950[1:]).strip()
    if not leftover:
        return caption, []
    rest = split_smart(leftover, TELEGRAM_MSG_LIMIT)
    return caption, rest

def get_prepositional_form(rus_word: str) -> str:
    parsed = morph.parse(rus_word)
    if not parsed:
        return rus_word
    p = parsed[0]
    loct = p.inflect({"loct"})
    return loct.word if loct else rus_word

def replace_pronouns_morph(leftover: str, rus_word: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç "–æ –Ω–µ–º/–Ω—ë–º/–Ω–µ–π" –Ω–∞ "–æ [–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ —Å–ª–æ–≤–∞]"
    """
    word_prep = get_prepositional_form(rus_word)
    pronoun_map = {
        r"\b–æ\s+–Ω–µ–º\b":  f"–æ {word_prep}",
        r"\b–æ\s+–Ω—ë–º\b":  f"–æ {word_prep}",
        r"\b–æ\s+–Ω–µ–π\b":  f"–æ {word_prep}",
    }
    for pattern, repl in pronoun_map.items():
        leftover = re.sub(pattern, repl, leftover, flags=re.IGNORECASE)
    return leftover

def format_gemini_response(text: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç Gemini –∫ HTML-—Ñ–æ—Ä–º–∞—Ç—É (–∂–∏—Ä–Ω—ã–π/–∫—É—Ä—Å–∏–≤/–∫–æ–¥),
    –∏ –≤—ã—Ä–µ–∑–∞–µ–º/–∑–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç ‚Äî –æ—Ç Google.
    """
    code_blocks = {}

    def extract_code(match):
        lang = match.group(1) or "text"
        code = escape(match.group(2))
        placeholder = f"__CODE_BLOCK_{len(code_blocks)}__"
        code_blocks[placeholder] = (
            f'<pre><code class="language-{lang}">{code}</code></pre>'
        )
        return placeholder

    # 1. –í—ã—Ä–µ–∑–∞–µ–º —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ —Å –∫–æ–¥–æ–º
    text = re.sub(r"```(\w+)?\n([\s\S]+?)```", extract_code, text)

    # 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
    text = escape(text)

    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
    for placeholder, block_html in code_blocks.items():
        text = text.replace(escape(placeholder), block_html)

    # 4. **bold** -> <b>...</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    # *italic* -> <i>...</i>
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    # `inline code` -> <code>...</code>
    text = re.sub(r'`([^`]+?)`', r'<code>\1</code>', text)

    # 5. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ—Ä–∞–∑—ã –æ —Ç–æ–º, —á—Ç–æ –ò–ò –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
    text = re.sub(r"\[.*?(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—Ä–∏—Å—É–Ω–æ–∫).+?\]", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(–Ø —è–≤–ª—è—é—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.*–≤—ã–≤–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I am a text-based model.*cannot directly show images\.)", "", text, flags=re.IGNORECASE)
    text = re.sub(r"(I can‚Äôt show images directly\.)", "", text, flags=re.IGNORECASE)

    # 6. –ó–∞–º–µ–Ω—è–µ–º "* " –Ω–∞ "‚Ä¢ " (—Å–ø–∏—Å–∫–∏)
    lines = text.split('\n')
    new_lines = []
    for line in lines:
        stripped = line.lstrip()
        prefix_len = len(line) - len(stripped)
        if stripped.startswith('* ') and not stripped.startswith('**'):
            replaced_line = (' ' * prefix_len) + '‚Ä¢ ' + stripped[2:]
            new_lines.append(replaced_line)
        else:
            new_lines.append(line)
    text = '\n'.join(new_lines).strip()

    # 7. –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ –±–æ—Ç –æ—Ç Google,
    #    –∏ –∑–∞–º–µ–Ω—è–µ–º ¬´—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å¬ª –Ω–∞ ¬´–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili¬ª
    text = re.sub(r"(?i)\bi am a large language model\b", "I am VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bi'm a large language model\b", "I'm VAI, created by Vandili", text)
    text = re.sub(r"(?i)\bgoogle\b", "Vandili", text)

    # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å(?:.*?)(?=\.)", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è –±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)
    text = re.sub(r"—è\s*‚Äî\s*–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "–Ø ‚Äî VAI, —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π Vandili", text, flags=re.IGNORECASE)

    return text

async def get_unsplash_image_url(prompt: str, access_key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ —Å Unsplash –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.
    """
    if not prompt:
        return None
    url = f"https://api.unsplash.com/photos/random?query={prompt}&client_id={access_key}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logging.warning(f"Unsplash returned status {response.status} for prompt '{prompt}'")
                    return None
                data = await response.json()
                if "urls" not in data or "regular" not in data["urls"]:
                    logging.warning(f"No 'regular' URL in response for '{prompt}': {data}")
                    return None
                return data["urls"]["regular"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

def fallback_translate_to_english(rus_word: str) -> str:
    """
    –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ RU_EN_DICT, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ Google Translate API.
    """
    try:
        project_id = "gen-lang-client-0588633435"
        location = "global"
        parent = f"projects/{project_id}/locations/{location}"
        response = translate_client.translate_text(
            parent=parent,
            contents=[rus_word],
            mime_type="text/plain",
            source_language_code="ru",
            target_language_code="en",
        )
        return response.translations[0].translated_text
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ '{rus_word}': {e}")
        return rus_word

def generate_short_caption(rus_word: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é (–¥–æ 15 —Å–ª–æ–≤) –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    short_prompt = (
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –¢—ã ‚Äî —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ Google. –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–ª–æ–≤.\n\n"
        f"–ó–ê–î–ê–ß–ê: –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å ¬´{rus_word}¬ª. "
        "–ú–æ–∂–Ω–æ —Å –ª—ë–≥–∫–æ–π —ç–º–æ—Ü–∏–µ–π –∏–ª–∏ —é–º–æ—Ä–æ–º, –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤."
    )
    try:
        response = model.generate_content([
            {
                "role": "user",
                "parts": [short_prompt]
            }
        ])
        caption = format_gemini_response(response.text.strip())
        return caption
    except Exception as e:
        logging.error(f"[BOT] Error generating short caption: {e}")
        return rus_word.capitalize()

def parse_russian_show_request(user_text: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã "–ø–æ–∫–∞–∂–∏" –∏ —Ç.–ø., –∏ –≤—ã—á–ª–µ–Ω—è–µ–º —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ç–∞' -> '–∫–æ—Ç').
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º:
      (bool: show_image?, str: rus_word, str: en_word, str: leftover)
    """
    lower_text = user_text.lower()
    triggered = any(trig in lower_text for trig in IMAGE_TRIGGERS_RU)
    if not triggered:
        return (False, "", "", user_text)

    match = re.search(r"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+([\w\d]+)", lower_text)
    if match:
        raw_rus_word = match.group(3)
        raw_rus_word_clean = raw_rus_word.strip(punctuation)
        parsed = morph.parse(raw_rus_word_clean)
        if parsed:
            rus_normal = parsed[0].normal_form
        else:
            rus_normal = raw_rus_word_clean
        rus_word = rus_normal
    else:
        rus_word = ""
        raw_rus_word = ""

    if raw_rus_word:
        pattern_remove = rf"(–ø–æ–∫–∞–∂–∏( –º–Ω–µ)?|—Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å|–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ)\s+{re.escape(raw_rus_word)}"
        leftover = re.sub(pattern_remove, "", user_text, flags=re.IGNORECASE).strip()
    else:
        leftover = user_text

    if rus_word in RU_EN_DICT:
        en_word = RU_EN_DICT[rus_word]
    else:
        en_word = fallback_translate_to_english(rus_word)

    return (True, rus_word, en_word, leftover) if rus_word else (False, "", "", user_text)

async def handle_msg(message: Message, prompt_mode: bool = False):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –±–æ—Ç–∞/–æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ,
    –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "–≤–∞–π –ø–æ–∫–∞–∂–∏ ..." –∏ –ø—Ä–æ—á–µ–µ.
    """
    cid = message.chat.id
    user_input = (message.text or "").strip()
    # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if "—Ñ–∞–π–ª" in user_input.lower() and message.from_user.id in user_documents:
        text = user_documents[message.from_user.id]
        short_summary_prompt = (
            "–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥ –∏–ª–∏ —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ. "
            "–ò–∑–ª–æ–∂–∏ —ç—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª:\n\n"
            f"{text}"
        )
        gemini_response = await generate_and_send_gemini_response(
            cid, short_summary_prompt, False, "", ""
        )
        await bot.send_message(chat_id=cid, text=gemini_response, **thread_kwargs(message))
        return

    # –ï—Å–ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if cid not in enabled_chats:
            return

        text_lower = user_input.lower()
        mention_bot = BOT_USERNAME and f"@{BOT_USERNAME.lower()}" in text_lower
        is_reply_to_bot = (
            message.reply_to_message
            and message.reply_to_message.from_user
            and (message.reply_to_message.from_user.id == bot.id)
        )
        mention_keywords = ["–≤–∞–π", "–≤—ç–π", "vai"]

        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –±–æ—Ç–∞ –∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        if not mention_bot and not is_reply_to_bot and not any(k in text_lower for k in mention_keywords):
            return

    logging.info(f"[BOT] cid={cid}, text='{user_input}'")

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" –∏ "–∫—Ç–æ —Å–æ–∑–¥–∞–ª"
    lower_inp = user_input.lower()
    if any(nc in lower_inp for nc in NAME_COMMANDS):
        await bot.send_message(
            chat_id=cid,
            text="–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>VAI</b>! ü§ñ",
            **thread_kwargs(message)
        )
        return
    if any(ic in lower_inp for ic in INFO_COMMANDS):
        await bot.send_message(
            chat_id=cid,
            text=random.choice(OWNER_REPLIES),
            **thread_kwargs(message)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å–∞ "–≤–∞–π –ø–æ–∫–∞–∂–∏ ..."
    show_image, rus_word, image_en, leftover = parse_russian_show_request(user_input)
    if show_image and rus_word:
        # –ï—Å–ª–∏ –≤ leftover –æ—Å—Ç–∞–ª–æ—Å—å "–≤–∞–π" (–∏–ª–∏ "vai") –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ ‚Äî —É–±–∏—Ä–∞–µ–º
        leftover = re.sub(r"\b(–≤–∞–π|vai)\b", "", leftover, flags=re.IGNORECASE).strip()
        leftover = replace_pronouns_morph(leftover, rus_word)

    leftover = leftover.strip()
    full_prompt = f"{rus_word} {leftover}".strip() if rus_word else leftover

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å Unsplash
    image_url = None
    if show_image:
        image_url = await get_unsplash_image_url(image_en, UNSPLASH_ACCESS_KEY)
    has_image = bool(image_url)

    logging.info(
        f"[BOT] show_image={show_image}, rus_word='{rus_word}', "
        f"image_en='{image_en}', leftover='{leftover}', image_url='{image_url}'"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç) —á–µ—Ä–µ–∑ Gemini
    gemini_text = await generate_and_send_gemini_response(
        cid, full_prompt, show_image, rus_word, leftover
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å
    if has_image:
        async with aiohttp.ClientSession() as sess:
            async with sess.get(image_url) as r:
                if r.status == 200:
                    photo_bytes = await r.read()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
                        tmpf.write(photo_bytes)
                        tmp_path = tmpf.name
                    try:
                        await bot.send_chat_action(chat_id=cid, action="upload_photo", **thread_kwargs(message))
                        file = FSInputFile(tmp_path, filename="image.jpg")
                        caption, rest = split_caption_and_text(gemini_text)
                        await bot.send_photo(
                            chat_id=cid,
                            photo=file,
                            caption=caption if caption else "...",
                            **thread_kwargs(message)
                        )
                        for c in rest:
                            await bot.send_message(chat_id=cid, text=c, **thread_kwargs(message))
                    finally:
                        os.remove(tmp_path)
    elif gemini_text:
        chunks = split_smart(gemini_text, TELEGRAM_MSG_LIMIT)
        for c in chunks:
            await bot.send_message(chat_id=cid, text=c, **thread_kwargs(message))

# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---------------------- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


# –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ extract_text_from_file (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç)
from docx import Document
from PyPDF2 import PdfReader

def extract_text_from_file(filename: str, file_bytes: bytes) -> str:
    if filename.endswith(".txt") or filename.endswith(".py"):
        return file_bytes.decode("utf-8", errors="ignore")
    elif filename.endswith(".pdf"):
        try:
            with BytesIO(file_bytes) as pdf_stream:
                reader = PdfReader(pdf_stream)
                return "\n".join(page.extract_text() or "" for page in reader.pages)
        except Exception:
            return ""
    elif filename.endswith(".docx"):
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmpf:
                tmpf.write(file_bytes)
                tmp_path = tmpf.name
            doc = Document(tmp_path)
            os.remove(tmp_path)
            return "\n".join(p.text for p in doc.paragraphs)
        except Exception:
            return ""
    return ""
