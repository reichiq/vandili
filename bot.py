import logging
import os
import asyncio
import re
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
OWNER_RESPONSES = [
    "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Vandili. üî•",
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —ç—Ç–æ–≥–æ –ò–ò —è–≤–ª—è–µ—Ç—Å—è Vandili. üòä",
    "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ—Ä–µ–Ω–∏–µ Vandili. üòé",
    "Vandili ‚Äî –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å! ü§ñ",
    "–ú–æ—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–ª–∞—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Vandili! üöÄ",
    "–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili, –æ–Ω –º–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü. üî•",
    "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏ –º–æ–∂–µ—Ç –º–Ω–æ–π —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è, —Ç–æ —ç—Ç–æ Vandili! üòâ",
    "–ë–ª–∞–≥–æ–¥–∞—Ä—è Vandili —è —Å—É—â–µ—Å—Ç–≤—É—é –∏ –æ—Ç–≤–µ—á–∞—é –≤–∞–º. üòä",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏ –≤–ª–∞–¥–µ–µ—Ç –º–Ω–æ–π Vandili. üòé",
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
OWNER_KEYWORDS = [
    "—á–µ–π —Ç—ã –±–æ—Ç", "–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª", "–∫–µ–º —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω", "–¥–ª—è –∫–æ–≥–æ —Ç—ã —Å–æ–∑–¥–∞–Ω", 
    "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—à—å", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü", "–∫—Ç–æ —Ç–≤–æ–π —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–µ–±—è –Ω–∞–ø–∏—Å–∞–ª", 
    "–∫—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫–µ–º —Ç—ã —Å–æ–∑–¥–∞–Ω", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "—á–µ–π —Ç—ã"
]


def format_gemini_response(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Gemini –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram (MarkdownV2),
    –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏.
    """

    # Telegram —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–Ω–æ –ù–ï –≤ –∫–æ–¥–µ!)
    special_chars = r"_[]()~>#+-=|{}.!`"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∏ –ø–æ—Å–ª–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    text = re.sub(r'\s*```\w*\n', '```\n', text)
    text = re.sub(r'\n```\s*', '\n```', text)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ Telegram –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–æ–¥
    text = re.sub(r'```(\w+)?\n(.*?)\n```', lambda m: f"```\n{m.group(2)}\n```", text, flags=re.DOTALL)

    return text


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–ø–æ–º—è–Ω—É–ª–∏ –ª–∏ –±–æ—Ç–∞
def is_bot_mentioned(message: types.Message):
    triggers = ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]
    text = message.text.lower()
    return (
        any(trigger in text for trigger in triggers) or 
        (message.reply_to_message and message.reply_to_message.from_user.id == bot.id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.google.com", timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å –≤ Gemini
@dp.message()
async def chat_with_gemini(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.from_user.id}")

    if message.chat.type != 'private' and not is_bot_mentioned(message):
        return

    user_text = message.text
    for trigger in ["vai", "–≤–∞–π", "VAI", "Vai", "–í–∞–π"]:
        user_text = user_text.replace(trigger, "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    if any(keyword in user_text.lower() for keyword in OWNER_KEYWORDS):
        await message.answer(format_gemini_response(f"{OWNER_RESPONSES[0]}"), parse_mode="MarkdownV2")
        return

    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = model.generate_content(user_text).text
        formatted_response = format_gemini_response(response)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logging.info(f"–û—Ç–≤–µ—Ç Gemini:\n{formatted_response}")

        await message.answer(formatted_response, parse_mode="MarkdownV2")
    
    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode="MarkdownV2")

    except ConnectionError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="MarkdownV2")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: `{format_gemini_response(str(e))}`", parse_mode="MarkdownV2")


# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
