import logging
import os
import asyncio
import re
import aiohttp
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import google.generativeai as genai

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_names = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
def is_owner_question(text: str) -> bool:
    owner_keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞", "—á–µ–π –∏–∏", "–∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç",
        "–∫—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Å–æ–∑–¥–∞–ª", "–¥–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –±–æ—Ç",
        "–∫–µ–º –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –±–æ—Ç", "–∫—Ç–æ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª",
        "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫–µ–º —Ç—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω",
        "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±", "–∫—Ç–æ —Ç–æ–±–æ–π —É–ø—Ä–∞–≤–ª—è–µ—Ç", "–∫—Ç–æ —Ç–≤–æ–π —Ö–æ–∑—è–∏–Ω"
    ]
    return any(re.search(rf"\b{re.escape(keyword)}\b", text.lower()) for keyword in owner_keywords)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω–∏
def extract_name(text: str):
    match = re.search(r"(–∑–æ–≤–∏ –º–µ–Ω—è|–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–∂–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è) (\w+)", text.lower())
    return match.group(2).capitalize() if match else None

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def format_gemini_response(text: str) -> str:
    special_chars = r"_[]()~>#+-=|{}.!?"
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! ü§ñ –Ø AI –æ—Ç Vandili. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    await message.answer(format_gemini_response(text), parse_mode="MarkdownV2")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chat_with_gemini(message: types.Message):
    text = message.text.strip().lower()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–≤–∞–ª–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–≤–æ—ë –∏–º—è
    name = extract_name(text)
    if name:
        user_names[user_id] = name
        await message.answer(f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä", parse_mode="MarkdownV2")
        return

    # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å
    user_name = user_names.get(user_id, None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner_question(text):
        responses = [
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è Vandili. üòé",
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç Vandili! üî•",
            "Vandili ‚Äî –º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Ö–æ–∑—è–∏–Ω. ü§ñ",
            "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª Vandili, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ! üöÄ",
            "–Ø –±–æ—Ç Vandili, –∏ —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å! üòâ"
        ]
        await message.answer(format_gemini_response(random.choice(responses)), parse_mode="MarkdownV2")
        return

    # –û—Ç–≤–µ—Ç –æ—Ç Gemini
    await bot.send_chat_action(message.chat.id, "typing")
    
    try:
        response = model.generate_content(text).text

        # –ï—Å–ª–∏ –±–æ—Ç –∑–Ω–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–æ–∂–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏
        if user_name:
            response = response.replace("–ü—Ä–∏–≤–µ—Ç!", f"–ü—Ä–∏–≤–µ—Ç, {user_name}!")

        formatted_response = format_gemini_response(response)
        await message.answer(formatted_response, parse_mode="MarkdownV2")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: `{format_gemini_response(str(e))}`", parse_mode="MarkdownV2")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
