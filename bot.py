import logging
import os
import re
import random
import aiohttp
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model = genai.GenerativeModel(model_name="models/gemini-1.5-pro-latest")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO, filename="/home/khan_770977/vandili/bot.log", filemode="a", format="%(asctime)s - %(levelname)s - %(message)s")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–º—ë–Ω
chat_history = {}
user_names = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
async def check_internet():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://google.com", timeout=5):
                return True
    except:
        return False

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞ –∏ —Å—Ç–∏–ª–µ–π

def format_gemini_response(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Gemini –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram (MarkdownV2),
    –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏.
    """
    code_blocks = {}

    # 1. –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    def code_replacer(match):
        placeholder = f"CODE_BLOCK_{len(code_blocks)}"
        code_blocks[placeholder] = match.group(0)
        return placeholder

    text = re.sub(r'```[\s\S]*?```', code_replacer, text)

    # 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤–æ –≤—Å—ë–º –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    special_chars = r'_\*\[\]()~`>#+-=|{}.!'
    text = re.sub(f'([{re.escape(special_chars)}])', r'\\\1', text)

    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ
    for placeholder, block in code_blocks.items():
        text = text.replace(placeholder, block)

    return text

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –±–æ—Ç
async def is_bot_called(message: Message) -> bool:
    if message.chat.type == "private":
        return True
    if message.reply_to_message and message.reply_to_message.from_user.id == (await bot.get_me()).id:
        return True
    bot_usernames = [(await bot.get_me()).username.lower(), "–≤–∞–π", "vai", "–≤–∞–π –±–æ—Ç", "–≤–∞–π–±–æ—Ç", "vai bot", "vaibot"]
    return any(name in message.text.lower() for name in bot_usernames)

# –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
def is_owner_question(text: str) -> bool:
    keywords = [
        "—á–µ–π —ç—Ç–æ –±–æ—Ç", "–∫—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü", "–∫—Ç–æ —Å–¥–µ–ª–∞–ª", "–∫—Ç–æ —Å–æ–∑–¥–∞–ª", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫–µ–º —Ç—ã —Å–æ–∑–¥–∞–Ω",
        "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ö–æ–∑—è–∏–Ω", "–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª", "–∫–µ–º –±—ã–ª —Å–æ–∑–¥–∞–Ω"
    ]
    return any(k in text.lower() for k in keywords)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    if not await is_bot_called(message):
        return

    user_id = message.from_user.id
    user_text = message.text
    username = message.from_user.username or message.from_user.full_name

    if is_owner_question(user_text):
        responses = [
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–∏—á–Ω–æ Vandili!",
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω Vandili –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ!",
            "üßê –Ø —Å–ª—É–∂—É —Ç–æ–ª—å–∫–æ Vandili ‚Äî –æ–Ω –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —Ö–æ–∑—è–∏–Ω!",
            "üí° –ú–æ–∏–º –∞–≤—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è Vandili, –∏ —è —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å –∏–º–µ–Ω–Ω–æ –µ–º—É!",
            "üõ†Ô∏è –ú–µ–Ω—è –Ω–∞–ø–∏—Å–∞–ª Vandili. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∫ –Ω–µ–º—É!",
            "üì° –°–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω Vandili."
        ]
        await message.answer(format_gemini_response(random.choice(responses)), parse_mode=ParseMode.MARKDOWN_V2)
        return

    chat_history.setdefault(user_id, []).append({"role": "user", "parts": [user_text]})
    if len(chat_history[user_id]) > 5:
        chat_history[user_id].pop(0)

    try:
        if not await check_internet():
            raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

        response = model.generate_content(chat_history[user_id])
        result = format_gemini_response(response.text)

        if random.random() < 0.3 and username:
            result = f"@{username}, {result}"

        await message.answer(result, parse_mode=ParseMode.MARKDOWN_V2)

    except aiohttp.ClientConnectionError:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±–ª–∞–∫–∞–º Vandili.", parse_mode=ParseMode.MARKDOWN_V2)
    except ConnectionError:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        error_text = format_gemini_response(str(e))
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_text}", parse_mode=ParseMode.MARKDOWN_V2)

if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))
